
==================== FINAL INTERFACE ====================
2019-04-26 21:26:52.205394 UTC

interface mp6-type-infer-0.1.0.0-KCsIbnCrPoAJ0yEvsnbQhv:Infer 8022
  interface hash: 6b1f69d58980c38cdb1feb93a147c92e
  ABI hash: 7014f112cafeeaa4b7bba1c1738a444e
  export-list hash: 07db9d916ba7e7c436b8a184bc8f53a7
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0451a77cc0d8e5d99d548d6441c7dd35
  sig of: Nothing
  used TH splices: False
  where
exports:
  Infer.changeFresh
  Infer.freshInst
  Infer.freshInstFV
  Infer.infer
  Infer.inferDec
  Infer.inferInit
  Infer.occurs
  Infer.unify
module dependencies: Common
package dependencies: array-0.5.2.0 base-4.10.1.0*
                      containers-0.5.10.2 deepseq-1.4.3.0 ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Set.Internal
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  containers-0.5.10.2:Data.Map.Internal 9c57d7e8180b3d401d116f2112d8715d
import  -/  containers-0.5.10.2:Data.Map.Strict 194f5b0a9785a91a43562790aa6787fc
import  -/  containers-0.5.10.2:Data.Map.Strict.Internal 90deec3a59296f433f9f1dc7cc1632b6
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  Common 96525dafafa987517b11778b8f4e142a
  exports: 6f2c885b2035c4fcd55933ada3fd6cf3
  AnonDec 2f14dc8ba07ef97eefc1fd3f7ab76c0d
  AppExp 1ec65e3565b82b0e7ddb78671213e61b
  BinOpExp 2503130ab3c2b9e480932c67c992b3e7
  ConstExp 4f32f9652e1712616d73312f92dafdd9
  Dec cbb321cf939f554f3572105d36f80298
  Exp c0b0202dc4c067b39dfa53aaf4d8cfc2
  FVState 503809768707ef4f03cda82750d7b8e1
  FunExp 957ac47e06b72edca540419537f7384e
  IfExp 4d56e8a58c8f11c5732604a080fb2507
  LetDec 2b2203069a0352f5be9ab58b8ba841dc
  LetExp c7c93aa9e6230a3805459111ec2f4a41
  LetRec 18eae54485b3701c24f85ff7e0f1b6f3
  LetRecExp 6eab96e570462aa647f6fd67966405a3
  LookupError 852cb4ad0ca6f854805e6aec1993d4c7
  MonOpExp 556943f2696d077a63118c18e36605d6
  MonoTy 2b092fa562158d888310321a9eb0ed4c
  PolyTy e666a042bc634f0e50a878d50f403570
  SubstEnv 9112a2bbb66d32e8ce2cf12a21fd2c84
  TyConst 136c7188eea194dd78ca1292b0f5466c
  TyVar 895ef0142ba9b9dbd9e3b6d8078f4010
  TypeEnv 98d606472b227d150ddaf942ea7457a9
  UnifError 8abd3eafbe341102d23ecc00b486f608
  VarExp db922e5d134fc0f831be3ff5f3155aed
  VarId 00c97d273b8f930706c2534babae9bb9
  binopTySig 7d2417ad18f8fdbf36e327f3e6e1d74e
  boolTy 4315c482013bf4289d7c6618b4f3f160
  constTySig 4add607540192c79a27ca415a3624e4d
  freshTVar 1ffc2edadc92f877335aeb92942f5cdb
  freshTau c461d4a174b98996d378a7a0b072723c
  funTy 763972fffc5cedd0a6bd8f8638c39892
  gen 286cdd3227530d2b213de9db839d3a5a
  liftEnv b44ff58b9ad6a11735a57cc5ad3fee03
  liftMonoTy 0f38d943cc11cb2b7f53eafee3133245
  monopTySig 6184fa97b9e13f772baddd89ce4aeeec
  quantifyMonoTy 6b381c6c85a387660823c8a31893cb09
  substCompose 11a73969f9dcb1d0937f14f4f8ff5160
  substEmpty 6700e670aeb03e5f7ab578a55a71b107
  substInit 246c089736ccdad497b4bcdba2ff1b6d
  throwError 9284a46e9287502831f7ca10372e717f
9b7d1d55eae045013d001d0cdcf41e41
  $sinsert_$sgo8 ::
    GHC.Base.String
    -> a1
    -> Data.Map.Internal.Map GHC.Base.String a1
    -> Data.Map.Internal.Map GHC.Base.String a1
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
5742bd432a93f07881e2a8f218cebe35
  $slookup1 ::
    GHC.Base.String
    -> Data.Map.Internal.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
86f2fa65100979248a462e8af885a33e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Infer.$trModule3 Infer.$trModule1) -}
76c625f0f02005a230673011622220ff
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Infer.$trModule2) -}
85b7dd5b4113155c476adc839c70b9d8
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Infer"#) -}
417fb045bda2676978dcc06dfdad145d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Infer.$trModule4) -}
2ebb86bacd332286cf099e628bc3c967
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("mp6-type-infer-0.1.0.0-KCsIbnCrPoAJ0yEvsnbQhv"#) -}
4cb654c314254dbddd64b13f64f19f27
  $wchangeFresh ::
    [Common.VarId]
    -> Common.SubstEnv
    -> (# Common.FVCounter
          -> Common.FVRes
               (Data.Map.Internal.Map Common.VarId Common.MonoTy) #)
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
9a657f8db2ff694c6b676b8e5657a2a4
  $wfreshInst ::
    [Common.VarId] -> Common.MonoTy -> Common.FVState Common.MonoTy
  {- Arity: 2, Strictness: <S,1*U><L,U>m1, Inline: [0],
     Unfolding: (\ (ww :: [Common.VarId]) (ww1 :: Common.MonoTy) ->
                 case Infer.$wchangeFresh
                        ww
                        (Data.Map.Internal.Tip
                           @ Common.VarId
                           @ Common.MonoTy) of ww2 { Unit# ww3 ->
                 Common.ValidState
                   @ Common.MonoTy
                   (\ (s :: Common.FVCounter) ->
                    case ww3 s of wild1 {
                      Common.ValidRes v s'
                      -> Common.ValidRes @ Common.MonoTy (Common.liftMonoTy v ww1) s'
                      Common.ErrorRes e -> Common.ErrorRes @ Common.MonoTy e }) }) -}
97222a37ffebc1e497a0c4a50e04ee2f
  $winferInit ::
    Common.TypeEnv
    -> Common.Exp
    -> (# Common.FVCounter -> Common.FVRes Common.MonoTy #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Common.TypeEnv) (w1 :: Common.Exp) ->
                 (# \ (s :: Common.FVCounter) ->
                    let {
                      tau :: Common.MonoTy = Common.TyVar s
                    } in
                    case Infer.infer w w1 tau of wild {
                      Common.ValidState i
                      -> case i (case s of wild1 { GHC.Types.I# x ->
                                 GHC.Types.I# (GHC.Prim.+# x 1#) }) of wild1 {
                           Common.ValidRes v s'
                           -> Common.ValidRes @ Common.MonoTy (Common.liftMonoTy v tau) s'
                           Common.ErrorRes e -> Common.ErrorRes @ Common.MonoTy e }
                      Common.ErrorState e -> Common.ErrorRes @ Common.MonoTy e } #)) -}
9c3d1f9b67399391c062c2a1b521f448
  changeFresh ::
    [Common.VarId]
    -> Common.SubstEnv
    -> Common.FVState
         (Data.Map.Internal.Map Common.VarId Common.MonoTy)
  {- Arity: 2, Strictness: <S,1*U><L,U>m1, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [Common.VarId]) (w1 :: Common.SubstEnv) ->
                 case Infer.$wchangeFresh w w1 of ww { Unit# ww1 ->
                 Common.ValidState
                   @ (Data.Map.Internal.Map Common.VarId Common.MonoTy)
                   ww1 }) -}
576ffe7c93cae30342ccb54b1dbb3ead
  freshInst :: Common.PolyTy -> Common.FVState Common.MonoTy
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,U)>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Common.PolyTy) ->
                 case w of ww { (,) ww1 ww2 -> Infer.$wfreshInst ww1 ww2 }) -}
05f2112432386a9bce2e6fd578a231af
  freshInstFV ::
    Common.FVState Common.PolyTy -> Common.FVState Common.MonoTy
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (s :: Common.FVState Common.PolyTy) ->
                 case s of wild {
                   Common.ValidState i
                   -> Common.ValidState
                        @ Common.MonoTy
                        (\ (s1 :: Common.FVCounter) ->
                         case i s1 of wild1 {
                           Common.ValidRes v s'
                           -> case v of ww { (,) ww1 ww2 ->
                              case Infer.$wfreshInst ww1 ww2 of wild2 {
                                Common.ValidState f1 -> f1 s'
                                Common.ErrorState e -> Common.ErrorRes @ Common.MonoTy e } }
                           Common.ErrorRes e -> Common.ErrorRes @ Common.MonoTy e })
                   Common.ErrorState e -> Common.ErrorState @ Common.MonoTy e }) -}
e238a330fcc4836e85b2692d67291521
  infer ::
    Common.TypeEnv
    -> Common.Exp -> Common.MonoTy -> Common.FVState Common.SubstEnv
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U> -}
72d239e25bb69057f11ca7deef0d7fb9
  inferDec ::
    Common.TypeEnv
    -> Common.Dec -> Common.FVState (Common.TypeEnv, Common.MonoTy)
  {- Arity: 2, Strictness: <L,U><S,1*U>m1,
     Unfolding: (\ (env :: Common.TypeEnv) (ds :: Common.Dec) ->
                 case ds of wild {
                   Common.AnonDec e'
                   -> case Infer.$winferInit env e' of ww { Unit# ww1 ->
                      Common.ValidState
                        @ (Common.TypeEnv, Common.MonoTy)
                        (\ (s :: Common.FVCounter) ->
                         case ww1 s of wild1 {
                           Common.ValidRes v s'
                           -> Common.ValidRes @ (Common.TypeEnv, Common.MonoTy) (env, v) s'
                           Common.ErrorRes e
                           -> Common.ErrorRes @ (Common.TypeEnv, Common.MonoTy) e }) }
                   Common.LetDec x e'
                   -> case Infer.$winferInit
                             env
                             (Common.LetExp x e' (Common.VarExp x)) of ww { Unit# ww1 ->
                      Common.ValidState
                        @ (Common.TypeEnv, Common.MonoTy)
                        (\ (s :: Common.FVCounter) ->
                         case ww1 s of wild1 {
                           Common.ValidRes v s'
                           -> Common.ValidRes
                                @ (Data.Map.Internal.Map GHC.Base.String Common.PolyTy,
                                   Common.MonoTy)
                                (Infer.$sinsert_$sgo8
                                   @ ([Common.VarId], Common.MonoTy)
                                   x
                                   (Common.freeVarsMonoTy v, v)
                                   env,
                                 v)
                                s'
                           Common.ErrorRes e
                           -> Common.ErrorRes @ (Common.TypeEnv, Common.MonoTy) e }) }
                   Common.LetRec f x e'
                   -> case Infer.$winferInit
                             env
                             (Common.LetRecExp f x e' (Common.VarExp f)) of ww { Unit# ww1 ->
                      Common.ValidState
                        @ (Common.TypeEnv, Common.MonoTy)
                        (\ (s :: Common.FVCounter) ->
                         case ww1 s of wild1 {
                           Common.ValidRes v s'
                           -> Common.ValidRes
                                @ (Data.Map.Internal.Map GHC.Base.String Common.PolyTy,
                                   Common.MonoTy)
                                (Infer.$sinsert_$sgo8
                                   @ ([Common.VarId], Common.MonoTy)
                                   f
                                   (Common.freeVarsMonoTy v, v)
                                   env,
                                 v)
                                s'
                           Common.ErrorRes e
                           -> Common.ErrorRes @ (Common.TypeEnv, Common.MonoTy) e }) } }) -}
e85388b8400256d0dcc67c96055e92e1
  inferInit ::
    Common.TypeEnv -> Common.Exp -> Common.FVState Common.MonoTy
  {- Arity: 2, Strictness: <L,U><L,U>m1, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Common.TypeEnv) (w1 :: Common.Exp) ->
                 case Infer.$winferInit w w1 of ww { Unit# ww1 ->
                 Common.ValidState @ Common.MonoTy ww1 }) -}
5371bb088fafad5dfc8ddef0abf389ff
  occurs :: Common.VarId -> Common.MonoTy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,1*U> -}
d0389c850a1b13a970e6497e06637955
  unify ::
    Common.Exp
    -> [(Common.MonoTy, Common.MonoTy)]
    -> Common.FVState Common.SubstEnv
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (exp :: Common.Exp)
                   (eqList :: [(Common.MonoTy, Common.MonoTy)]) ->
                 Infer.unify_aux
                   exp
                   eqList
                   (Data.Map.Internal.Tip @ Common.VarId @ Common.MonoTy)) -}
b09f4688b7862d89a6f4c27977172e03
  unify_aux ::
    Common.Exp
    -> [(Common.MonoTy, Common.MonoTy)]
    -> Common.SubstEnv
    -> Common.FVState Common.SubstEnv
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

