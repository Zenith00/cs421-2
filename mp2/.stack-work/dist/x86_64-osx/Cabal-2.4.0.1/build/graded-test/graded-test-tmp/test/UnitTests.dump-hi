
==================== FINAL INTERFACE ====================
2019-03-04 05:52:44.417588 UTC

interface main:UnitTests 8063
  interface hash: a995f8d4515caab355d50d7bbfd06683
  ABI hash: 613056fe53af9820fc239436a93f1767
  export-list hash: 811be69607ce9f82bb3d02450ab52155
  orphan hash: 6ec78b013bb99b2a0e0c696fa79fc900
  flag hash: b8416f5a37f8a440ff65b240e54545f2
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  UnitTests.appExpUnitTests
  UnitTests.assertEqual'
  UnitTests.boolOpExpUnitTests
  UnitTests.callStmtUnitTests
  UnitTests.compOpExpUnitTests
  UnitTests.constExpUnitTests
  UnitTests.funExpUnitTests
  UnitTests.ifExpUnitTests
  UnitTests.ifStmtUnitTests
  UnitTests.intOpExpUnitTests
  UnitTests.letExpUnitTests
  UnitTests.liftBoolOpUnitTests
  UnitTests.liftCompOpUnitTests
  UnitTests.procFibHelp
  UnitTests.procFibonacci
  UnitTests.procStmtUnitTests
  UnitTests.seqStmtUnitTests
  UnitTests.setStmtUnitTests
  UnitTests.testenv1
  UnitTests.testenv2
  UnitTests.varExpUnitTests
module dependencies:
package dependencies: ansi-terminal-0.8.2 ansi-wl-pprint-0.6.8.2
                      array-0.5.3.0 base-4.12.0.0 binary-0.8.6.0 bytestring-0.10.8.2
                      call-stack-0.1.0 colour-2.3.4 containers-0.6.0.1 deepseq-1.4.4.0
                      ghc-prim-0.5.3 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      interpreter-0.3.0.0 mtl-2.2.2 optparse-applicative-0.14.3.0
                      process-1.6.3.0 tagged-0.8.6 tasty-1.2 tasty-hunit-0.10.0.1
                      text-1.2.3.1 transformers-0.5.5.0 unix-2.7.2.2
                      unordered-containers-0.2.9.0
orphans: transformers-0.5.5.0:Control.Monad.Trans.Error
         colour-2.3.4:Data.Colour hashable-1.2.7.0:Data.Hashable.Generic
         text-1.2.3.1:Data.Text.Lazy text-1.2.3.1:Data.Text
         binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         tagged-0.8.6:Data.Tagged tasty-1.2:Test.Tasty.Core
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         unordered-containers-0.2.9.0:Data.HashMap.Base
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
import  -/  interpreter-0.3.0.0:Lib c69877f498ccfcd6618499c528202b68
import  -/  tasty-hunit-0.10.0.1:Test.Tasty.HUnit fa64813065d1c7162dd2cfe30ac56b4b
import  -/  tasty-hunit-0.10.0.1:Test.Tasty.HUnit.Orig 199d256cd89819636b4099b37552e8d2
import  -/  unordered-containers-0.2.9.0:Data.HashMap.Base f8b66a8ac39d506c03f2e1aa73c729b0
import  -/  unordered-containers-0.2.9.0:Data.HashMap.Strict 382b0fb0c37f914f58f22553760567f2
0df07945cd0758c5f0695e2242cefbcd
  $s$fShow(,,)_$cshow ::
    ([GHC.Types.Char],
     Data.HashMap.Base.HashMap GHC.Base.String Lib.Stmt,
     Data.HashMap.Base.HashMap GHC.Base.String Lib.Val)
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: ([GHC.Types.Char],
                          Data.HashMap.Base.HashMap GHC.Base.String Lib.Stmt,
                          Data.HashMap.Base.HashMap GHC.Base.String Lib.Val)) ->
                 GHC.Show.$fShow(,,)_$cshowsPrec
                   @ [GHC.Types.Char]
                   @ (Data.HashMap.Base.HashMap GHC.Base.String Lib.Stmt)
                   @ (Data.HashMap.Base.HashMap GHC.Base.String Lib.Val)
                   GHC.Show.$fShow[]_$s$fShow[]1
                   UnitTests.$s$fShow(,,)_$s$fShowHashMap1
                   UnitTests.$s$fShow(,,)_$s$fShowHashMap
                   GHC.Show.$fShow(,)1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f29043616e2aea97b9fc09e640d6026f
  $s$fShow(,,)_$s$fShowHashMap ::
    GHC.Show.Show (Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val)
                  (Data.HashMap.Base.$fShowHashMap_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ Lib.Val
                     GHC.Show.$fShow[]_$s$fShow[]1
                     Lib.$fShowVal)
                  (\ (x :: Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val) ->
                   Data.HashMap.Base.$fShowHashMap_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ Lib.Val
                     GHC.Show.$fShow[]_$s$fShow[]1
                     Lib.$fShowVal
                     (GHC.Types.I# 0#)
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val)
                     (Data.HashMap.Base.$fShowHashMap_$cshowsPrec
                        @ [GHC.Types.Char]
                        @ Lib.Val
                        GHC.Show.$fShow[]_$s$fShow[]1
                        Lib.$fShowVal
                        (GHC.Types.I# 0#))
                     ls
                     s) -}
4c5f08d065c02d20e4f6d992309d2869
  $s$fShow(,,)_$s$fShowHashMap1 ::
    GHC.Show.Show (Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Stmt)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Stmt)
                  (Data.HashMap.Base.$fShowHashMap_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ Lib.Stmt
                     GHC.Show.$fShow[]_$s$fShow[]1
                     Lib.$fShowStmt)
                  (\ (x :: Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Stmt) ->
                   Data.HashMap.Base.$fShowHashMap_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ Lib.Stmt
                     GHC.Show.$fShow[]_$s$fShow[]1
                     Lib.$fShowStmt
                     (GHC.Types.I# 0#)
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Stmt])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Stmt)
                     (Data.HashMap.Base.$fShowHashMap_$cshowsPrec
                        @ [GHC.Types.Char]
                        @ Lib.Stmt
                        GHC.Show.$fShow[]_$s$fShow[]1
                        Lib.$fShowStmt
                        (GHC.Types.I# 0#))
                     ls
                     s) -}
11c544f6f34edefd1b3b1247c1f79204
  $s$fShowHashMap_$cshow ::
    Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Stmt
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Stmt) ->
                 Data.HashMap.Base.$fShowHashMap_$cshowsPrec
                   @ [GHC.Types.Char]
                   @ Lib.Stmt
                   GHC.Show.$fShow[]_$s$fShow[]1
                   Lib.$fShowStmt
                   (GHC.Types.I# 0#)
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f6624d115fb3da5907fcd3e4598a68c2
  $s$fShowHashMap_$cshow1 ::
    Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val) ->
                 Data.HashMap.Base.$fShowHashMap_$cshowsPrec
                   @ [GHC.Types.Char]
                   @ Lib.Val
                   GHC.Show.$fShow[]_$s$fShow[]1
                   Lib.$fShowVal
                   (GHC.Types.I# 0#)
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d9b383489e699f089d8f2e0cc6ef7d00
  $s$fShowHashMap_$cshowList ::
    [Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Stmt]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Stmt])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Stmt)
                   (Data.HashMap.Base.$fShowHashMap_$cshowsPrec
                      @ [GHC.Types.Char]
                      @ Lib.Stmt
                      GHC.Show.$fShow[]_$s$fShow[]1
                      Lib.$fShowStmt
                      (GHC.Types.I# 0#))
                   ls
                   s) -}
41e3b47e730b20314fdf3888faf1b00e
  $s$fShowHashMap_$cshowList1 ::
    [Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val)
                   (Data.HashMap.Base.$fShowHashMap_$cshowsPrec
                      @ [GHC.Types.Char]
                      @ Lib.Val
                      GHC.Show.$fShow[]_$s$fShow[]1
                      Lib.$fShowVal
                      (GHC.Types.I# 0#))
                   ls
                   s) -}
19993d4e5393b92c2198727075ac6662
  $s$fShowHashMap_$cshowsPrec ::
    GHC.Types.Int
    -> Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Stmt
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: GHC.Types.Int)
                   (w3 :: Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Stmt) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Data.HashMap.Base.$w$cshowsPrec
                   @ [GHC.Types.Char]
                   @ Lib.Stmt
                   GHC.Show.$fShow[]_$s$fShow[]1
                   Lib.$fShowStmt
                   ww1
                   w3 }) -}
3214df40d51dbac144decf3049d184fe
  $s$fShowHashMap_$cshowsPrec1 ::
    GHC.Types.Int
    -> Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: GHC.Types.Int)
                   (w3 :: Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Data.HashMap.Base.$w$cshowsPrec
                   @ [GHC.Types.Char]
                   @ Lib.Val
                   GHC.Show.$fShow[]_$s$fShow[]1
                   Lib.$fShowVal
                   ww1
                   w3 }) -}
9885aaee5fae1aaa7edeedb22fab7ada
  $s$wupdateOrSnocWithKey ::
    ([GHC.Types.Char] -> v -> v -> v)
    -> [GHC.Types.Char]
    -> v
    -> Data.HashMap.Array.Array#
         (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
    -> Data.HashMap.Array.Array
         (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
  {- Arity: 4, Strictness: <L,C(C1(C1(U)))><S,1*U><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ @ v
                   (w1 :: [GHC.Types.Char] -> v -> v -> v)
                   (w2 :: [GHC.Types.Char])
                   (w3 :: v)
                   (ww :: Data.HashMap.Array.Array#
                            (Data.HashMap.Base.Leaf [GHC.Types.Char] v)) ->
                 let {
                   exit :: v
                           -> Data.HashMap.Array.Array#
                                (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                           -> GHC.Prim.Int#
                           -> [GHC.Types.Char]
                           -> v
                           -> Data.HashMap.Array.Array
                                (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                     <join 5> {- Arity: 5, Strictness: <L,U><S,U><S,U><L,U><L,U> -}
                   = \ (w :: v)[OneShot]
                       (ww1 :: Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf [GHC.Types.Char] v))[OneShot]
                       (ww2 :: GHC.Prim.Int#)[OneShot]
                       (k2 :: [GHC.Types.Char])[OneShot]
                       (y :: v)[OneShot] ->
                     case GHC.Magic.runRW#
                            @ ('GHC.Types.TupleRep
                                 '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                            @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Data.HashMap.Array.Array
                                   (Data.HashMap.Base.Leaf [GHC.Types.Char] v) #)
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.thawSmallArray#
                                    @ (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                                    @ GHC.Prim.RealWorld
                                    ww1
                                    0#
                                    (GHC.Prim.sizeofSmallArray#
                                       @ (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                                       ww1)
                                    s1 of ds2 { (#,#) ipv4 ipv5 ->
                             case GHC.Prim.writeSmallArray#
                                    @ GHC.Prim.RealWorld
                                    @ (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                                    ipv5
                                    ww2
                                    (Data.HashMap.Base.L @ [GHC.Types.Char] @ v k2 (w1 k2 w y))
                                    ipv4 of s' { DEFAULT ->
                             case GHC.Prim.unsafeFreezeSmallArray#
                                    @ GHC.Prim.RealWorld
                                    @ (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                                    ipv5
                                    s' of ds3 { (#,#) ipv6 ipv7 ->
                             (# ipv6,
                                Data.HashMap.Array.Array
                                  @ (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                                  ipv7 #) } } }) of ds2 { (#,#) ipv4 ipv5 ->
                     ipv5 }
                 } in
                 letrec {
                   $wgo1 :: [GHC.Types.Char]
                            -> v
                            -> Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> Data.HashMap.Array.Array
                                 (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                     <join 5> {- Arity: 5, Strictness: <S,1*U><L,U><S,U><S,U><S,U>,
                                 Inline: [2] -}
                   = \ (w :: [GHC.Types.Char])
                       (w4 :: v)
                       (ww1 :: Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf [GHC.Types.Char] v))
                       (ww2 :: GHC.Prim.Int#)
                       (ww3 :: GHC.Prim.Int#) ->
                     case w of k2 { DEFAULT ->
                     case GHC.Prim.>=# ww2 ww3 of lwild {
                       DEFAULT
                       -> case GHC.Prim.indexSmallArray#
                                 @ (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                                 ww1
                                 ww2 of ds1 { Unit# ipv3 ->
                          case ipv3 of wild1 { Data.HashMap.Base.L kx y ->
                          case GHC.Base.eqString k2 kx of wild2 {
                            GHC.Types.False -> $wgo1 k2 w4 ww1 (GHC.Prim.+# ww2 1#) ww3
                            GHC.Types.True -> exit w4 ww1 ww2 k2 y } } }
                       1#
                       -> case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      Data.HashMap.Array.Array
                                        (Data.HashMap.Base.Leaf [GHC.Types.Char] v) #)
                                 (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newSmallArray#
                                         @ (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                                         @ GHC.Prim.RealWorld
                                         (GHC.Prim.+# ww3 1#)
                                         (Data.HashMap.Array.undefinedElem
                                            @ (Data.HashMap.Base.Leaf [GHC.Types.Char] v))
                                         s1 of ds { (#,#) ipv3 ipv4 ->
                                  case GHC.Prim.copySmallArray#
                                         @ (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                                         @ GHC.Prim.RealWorld
                                         ww1
                                         0#
                                         ipv4
                                         0#
                                         ww3
                                         ipv3 of s2 { DEFAULT ->
                                  case GHC.Prim.writeSmallArray#
                                         @ GHC.Prim.RealWorld
                                         @ (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                                         ipv4
                                         ww3
                                         (Data.HashMap.Base.L @ [GHC.Types.Char] @ v k2 w4)
                                         s2 of s' { DEFAULT ->
                                  case GHC.Prim.unsafeFreezeSmallArray#
                                         @ GHC.Prim.RealWorld
                                         @ (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                                         ipv4
                                         s' of ds2 { (#,#) ipv5 ipv6 ->
                                  (# ipv5,
                                     Data.HashMap.Array.Array
                                       @ (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                                       ipv6 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                          ipv4 } } }
                 } in
                 $wgo1
                   w2
                   w3
                   ww
                   0#
                   (GHC.Prim.sizeofSmallArray#
                      @ (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                      ww)) -}
0f56c9f19bca85047ff1f450a6329c30
  $sinsert ::
    [GHC.Types.Char]
    -> v
    -> Data.HashMap.Base.HashMap [GHC.Types.Char] v
    -> Data.HashMap.Base.HashMap [GHC.Types.Char] v
  {- Arity: 3, Strictness: <S,U><L,U><S,U>,
     Unfolding: (\ @ v
                   (k0 :: [GHC.Types.Char])
                   (v0 :: v)
                   (m0 :: Data.HashMap.Base.HashMap [GHC.Types.Char] v) ->
                 let {
                   exit :: GHC.Prim.Int#
                           -> GHC.Prim.Int# -> Data.HashMap.Base.HashMap [GHC.Types.Char] v
                     <join 2> {- Arity: 2, Strictness: <S,U><S,U> -}
                   = \ (ww :: GHC.Prim.Int#)[OneShot]
                       (ww1 :: GHC.Prim.Int#)[OneShot] ->
                     UnitTests.$wpoly_go1
                       @ v
                       (GHC.Prim.int2Word#
                          (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) ww1))
                       k0
                       v0
                       0#
                       m0
                 } in
                 letrec {
                   $wgo1 :: [GHC.Types.Char]
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> Data.HashMap.Base.HashMap [GHC.Types.Char] v
                     <join 3> {- Arity: 3, Strictness: <S,1*U><S,U><S,U>, Inline: [2] -}
                   = \ (w1 :: [GHC.Types.Char])
                       (ww :: GHC.Prim.Int#)
                       (ww1 :: GHC.Prim.Int#) ->
                     case w1 of wild {
                       [] -> exit ww ww1
                       : y ys
                       -> case y of wild1 { GHC.Types.C# c# ->
                          $wgo1
                            ys
                            (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) (GHC.Prim.ord# c#))
                            (GHC.Prim.+# ww1 1#) } }
                 } in
                 $wgo1 k0 -2578643520546668380# 0#) -}
1c0a6a64845fa7e48ab73f46e37e16bc
  $sunsafeInsert ::
    [GHC.Types.Char]
    -> v
    -> Data.HashMap.Base.HashMap [GHC.Types.Char] v
    -> Data.HashMap.Base.HashMap [GHC.Types.Char] v
  {- Arity: 3, Strictness: <S,U><L,U><S,U>,
     Unfolding: (\ @ v
                   (k0 :: [GHC.Types.Char])
                   (v0 :: v)
                   (m0 :: Data.HashMap.Base.HashMap [GHC.Types.Char] v) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.HashMap.Base.HashMap [GHC.Types.Char] v #)
                        (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         let {
                           exit :: GHC.Prim.Int#
                                   -> GHC.Prim.Int#
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         Data.HashMap.Base.HashMap [GHC.Types.Char] v #)
                             <join 2> {- Arity: 2, Strictness: <S,U><S,U> -}
                           = \ (ww :: GHC.Prim.Int#)[OneShot]
                               (ww1 :: GHC.Prim.Int#)[OneShot] ->
                             UnitTests.$wpoly_go2
                               @ v
                               (GHC.Prim.int2Word#
                                  (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) ww1))
                               k0
                               v0
                               0#
                               m0
                               w
                         } in
                         letrec {
                           $wgo1 :: [GHC.Types.Char]
                                    -> GHC.Prim.Int#
                                    -> GHC.Prim.Int#
                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          Data.HashMap.Base.HashMap [GHC.Types.Char] v #)
                             <join 3> {- Arity: 3, Strictness: <S,1*U><S,U><S,U>, Inline: [2] -}
                           = \ (w1 :: [GHC.Types.Char])
                               (ww :: GHC.Prim.Int#)
                               (ww1 :: GHC.Prim.Int#) ->
                             case w1 of wild {
                               [] -> exit ww ww1
                               : y ys
                               -> case y of wild1 { GHC.Types.C# c# ->
                                  $wgo1
                                    ys
                                    (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) (GHC.Prim.ord# c#))
                                    (GHC.Prim.+# ww1 1#) } }
                         } in
                         $wgo1 k0 -2578643520546668380# 0#) of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
d77852704b720a377637b67e7762c684
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   UnitTests.$trModule3
                   UnitTests.$trModule1) -}
99f43a75b225754ab03c3a04e761e988
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS UnitTests.$trModule2) -}
52d9aac695b3737f65c941aa8c2edb50
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("UnitTests"#) -}
c9dd93d1e9bcff6a424ecd1454a66ca6
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS UnitTests.$trModule4) -}
6effae8ac23055aae06d286cc2ba4707
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
07fe16aeb8b449801bc9d37da6432763
  $wpoly_go1 ::
    GHC.Prim.Word#
    -> [GHC.Types.Char]
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap [GHC.Types.Char] v
    -> Data.HashMap.Base.HashMap [GHC.Types.Char] v
  {- Arity: 5, Strictness: <S,U><S,1*U><L,U><L,U><S,1*U>,
     Inline: [2] -}
29859f17abff5fe4605b049d7255c992
  $wpoly_go2 ::
    GHC.Prim.Word#
    -> [GHC.Types.Char]
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap [GHC.Types.Char] v
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.HashMap.Base.HashMap [GHC.Types.Char] v #)
  {- Arity: 6, Strictness: <L,U><S,1*U><L,U><L,U><S,1*U><L,U>,
     Inline: [2] -}
9a43a3cbe350f2582e2d1d935c485bf1
  appExpUnitTests ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.appExpUnitTests32
                   UnitTests.appExpUnitTests1) -}
a55c06c0c40eafdf459ff55508158d7d
  appExpUnitTests1 ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.appExpUnitTests25
                   UnitTests.appExpUnitTests2) -}
de1913ec587eae7ed40b39801f1ac539
  appExpUnitTests10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.appExpUnitTests11) -}
2cf0bdbcdbb29f1d51233efa3e7d8324
  appExpUnitTests11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Exception"#) -}
5e8c0cf2f8e71d7e6f33578d2ebea872
  appExpUnitTests12 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.appExpUnitTests23,
                  UnitTests.appExpUnitTests13
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
c58244eb2b204ed143b37c9051fa724c
  appExpUnitTests13 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.appExpUnitTests_actual1
                        UnitTests.appExpUnitTests_expect1 of wild {
                   GHC.Types.False -> UnitTests.appExpUnitTests14 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
bef192038a8c8ad02c75bafb17a9f11a
  appExpUnitTests14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
2af1a243574fa98f204f41c50b1a9264
  appExpUnitTests15 :: Lib.Exp
  {- Strictness: m5,
     Unfolding: (Lib.AppExp
                   UnitTests.appExpUnitTests18
                   UnitTests.appExpUnitTests16) -}
fd0ba2a79ba270b738f3bec058228dbf
  appExpUnitTests16 :: [Lib.Exp]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Exp
                   UnitTests.appExpUnitTests17
                   (GHC.Types.[] @ Lib.Exp)) -}
0bc25754d7fdbd2282a25a382b92fcd2
  appExpUnitTests17 :: Lib.Exp
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Lib.BoolExp GHC.Types.False) -}
41bd61354bf4ed5be5335c9d0da0ffc7
  appExpUnitTests18 :: Lib.Exp
  {- Strictness: m3,
     Unfolding: (Lib.FunExp
                   UnitTests.testenv26
                   UnitTests.appExpUnitTests19) -}
f946f0f4e7e22c0212f5de78c81a3acd
  appExpUnitTests19 :: Lib.Exp
  {- Strictness: m5,
     Unfolding: (Lib.AppExp
                   UnitTests.appExpUnitTests21
                   UnitTests.appExpUnitTests20) -}
5271ef38306567c411fd5facf17787bb
  appExpUnitTests2 ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.appExpUnitTests12
                   UnitTests.appExpUnitTests3) -}
a4f8d6d95d9a9dac751ff1b7a8e92f27
  appExpUnitTests20 :: [Lib.Exp]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Exp
                   UnitTests.testenv23
                   (GHC.Types.[] @ Lib.Exp)) -}
4eaf496c14d5a5429c4d7bbdbf3973d8
  appExpUnitTests21 :: Lib.Exp
  {- Strictness: m10,
     Unfolding: (Lib.VarExp UnitTests.appExpUnitTests22) -}
03bff77f7799ec6ea97641180a999f4f
  appExpUnitTests22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# UnitTests.testenv27) -}
c5d21213ba6b67b9b09c383b384ccc33
  appExpUnitTests23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.appExpUnitTests24) -}
d7cebd2fc11a4f469dd06f005860d62b
  appExpUnitTests24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("lexical scoping"#) -}
d0823f69f961c73d847ba7b8af4335d7
  appExpUnitTests25 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.appExpUnitTests30,
                  UnitTests.appExpUnitTests26
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
f0c4f08c4873d5e46cb97e3f7ed1a706
  appExpUnitTests26 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.appExpUnitTests_actual2
                        UnitTests.testenv1_expect of wild {
                   GHC.Types.False -> UnitTests.appExpUnitTests27 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
d20ebe2346bdddba6af14aa16a00b134
  appExpUnitTests27 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
d3b793b51b611cf4f0962820e9230bee
  appExpUnitTests28 :: Lib.Exp
  {- Strictness: m5,
     Unfolding: (Lib.AppExp
                   UnitTests.appExpUnitTests21
                   UnitTests.appExpUnitTests29) -}
fd1140810a1bf9769bd4f75d60a84151
  appExpUnitTests29 :: [Lib.Exp]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Exp
                   UnitTests.testenv22
                   (GHC.Types.[] @ Lib.Exp)) -}
830abbb86d430ce75cc719ae188d15d3
  appExpUnitTests3 ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.appExpUnitTests4
                   (GHC.Types.[]
                      @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion))) -}
ff2ee51b83957f824cc3c82f9f657644
  appExpUnitTests30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.appExpUnitTests31) -}
d7e893c6b8a515bbffa0fb6a202acf73
  appExpUnitTests31 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("non-trivial function expression"#) -}
72d37663e4f3b59eac17031e29e63bfd
  appExpUnitTests32 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.appExpUnitTests52,
                  UnitTests.appExpUnitTests33
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
8622d8d5233e8dd46fa2f20bcba6236d
  appExpUnitTests33 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.appExpUnitTests_actual3
                        UnitTests.appExpUnitTests_expect2 of wild {
                   GHC.Types.False -> UnitTests.appExpUnitTests34 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
790b41a4a297f0e7968bf699c701e256
  appExpUnitTests34 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
046f90cc861f0d96a4db051d813c780b
  appExpUnitTests35 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
d9db7bdc52d50e06b3f2b1f953871f35
  appExpUnitTests36 :: Lib.Exp
  {- Strictness: m5,
     Unfolding: (Lib.AppExp
                   UnitTests.appExpUnitTests43
                   UnitTests.appExpUnitTests37) -}
307926c71f5d3b3d57fa9f992ff681e9
  appExpUnitTests37 :: [Lib.Exp]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Exp
                   UnitTests.appExpUnitTests41
                   UnitTests.appExpUnitTests38) -}
881ebbad5bb12bdb09887e25057e8725
  appExpUnitTests38 :: [Lib.Exp]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Exp
                   UnitTests.appExpUnitTests39
                   (GHC.Types.[] @ Lib.Exp)) -}
bb71475bccc551ef45d575899efd6f67
  appExpUnitTests39 :: Lib.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntExp UnitTests.appExpUnitTests40) -}
9d5aed3142a9e70f3f13f36c257b08c6
  appExpUnitTests4 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.appExpUnitTests10,
                  UnitTests.appExpUnitTests5
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
6d3e8dd788028967f188cfdddd916dc0
  appExpUnitTests40 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
30554049e847529cd61116969f441b2b
  appExpUnitTests41 :: Lib.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntExp UnitTests.appExpUnitTests42) -}
45d8acd82a4ce1f4540e967322ee049c
  appExpUnitTests42 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
9b8c080d7f5458d2bd327ff2f3530f3c
  appExpUnitTests43 :: Lib.Exp
  {- Strictness: m3,
     Unfolding: (Lib.FunExp
                   UnitTests.appExpUnitTests50
                   UnitTests.appExpUnitTests44) -}
954e4e2922c6a87806d1131d49ceccb9
  appExpUnitTests44 :: Lib.Exp
  {- Strictness: m7,
     Unfolding: (Lib.IntOpExp
                   UnitTests.appExpUnitTests48
                   UnitTests.testenv23
                   UnitTests.appExpUnitTests45) -}
02d7577042daf201767678ee7172379a
  appExpUnitTests45 :: Lib.Exp
  {- Strictness: m10,
     Unfolding: (Lib.VarExp UnitTests.appExpUnitTests46) -}
514dacb5017a77ece2cfaf86864db319
  appExpUnitTests46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.appExpUnitTests47) -}
1356c437c51b030f8aa198b9be261c3c
  appExpUnitTests47 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("b"#) -}
5c0b48b392552111550a4a1d22211fe2
  appExpUnitTests48 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.appExpUnitTests49) -}
4a26ef1325a9dda64af4de11af948757
  appExpUnitTests49 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("+"#) -}
4e0a67dfff6330be8153a8b57de7e9d1
  appExpUnitTests5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.appExpUnitTests_actual
                        UnitTests.appExpUnitTests_expect of wild {
                   GHC.Types.False -> UnitTests.appExpUnitTests6 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
077f746f4028e9b3387869ef6d72e53e
  appExpUnitTests50 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   UnitTests.testenv6
                   UnitTests.appExpUnitTests51) -}
a21191c9e8f866948234148f36b8351f
  appExpUnitTests51 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   UnitTests.appExpUnitTests46
                   (GHC.Types.[] @ GHC.Base.String)) -}
aa05b2db02cc80b4cad4d216f4c570c9
  appExpUnitTests52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.appExpUnitTests53) -}
20792a2041f7356d73495c33faa791b7
  appExpUnitTests53 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Multiple parameters"#) -}
4fece7cb59b4e41450e054ccfcd0b825
  appExpUnitTests6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
05821079cec3186ae852abb36bdcea49
  appExpUnitTests7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.appExpUnitTests8) -}
d7383e60d265c6bf8f044f2b33a0f5a0
  appExpUnitTests8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Apply to non-closure"#) -}
4c34d1a3ce85a5852066559b09000b2e
  appExpUnitTests9 :: Lib.Exp
  {- Strictness: m5,
     Unfolding: (Lib.AppExp
                   UnitTests.testenv23
                   (GHC.Types.[] @ Lib.Exp)) -}
d6918e0126555dbf7cad0c4146a52d14
  appExpUnitTests_actual :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.appExpUnitTests9
                   UnitTests.testenv2) -}
0d16011448c9a541a49fbed609f43c0e
  appExpUnitTests_actual1 :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.appExpUnitTests15
                   UnitTests.testenv2) -}
aaffa703565ade828baa173adf8f33c2
  appExpUnitTests_actual2 :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.appExpUnitTests28
                   UnitTests.testenv2) -}
72bd8f3b253b320deceae17cd7dd7f15
  appExpUnitTests_actual3 :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.appExpUnitTests36
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
81302d4a322042ee76c8a4e6f261100c
  appExpUnitTests_expect :: Lib.Val
  {- Strictness: m4,
     Unfolding: (Lib.ExnVal UnitTests.appExpUnitTests7) -}
7cfb86b5d9e18228f6d8796c2d4be9e7
  appExpUnitTests_expect1 :: Lib.Val
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Lib.BoolVal GHC.Types.False) -}
da70a84a02bbf9344adcb740331d6085
  appExpUnitTests_expect2 :: Lib.Val
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntVal UnitTests.appExpUnitTests35) -}
6d32edfffa274099c8c5d4cf75cf866f
  assertEqual' ::
    (GHC.Classes.Eq a, GHC.Show.Show a) =>
    GHC.Base.String -> a -> a -> Test.Tasty.HUnit.Orig.Assertion
  {- Arity: 6,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(A,C(U),A)><L,1*U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                UnitTests.assertEqual'13
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R <GHC.Show.Show a>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <a>_R
                 ->_R <a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
6a011c793f3a19e43a264ab9d3f0a484
  assertEqual'10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.assertEqual'11) -}
0f5ea77e213cc9ded380cce284fe5fd7
  assertEqual'11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("assertEqual"#) -}
284e637b1d0d9d9bef2d8702053fe0ff
  assertEqual'13 ::
    (GHC.Classes.Eq a, GHC.Show.Show a) =>
    GHC.Base.String
    -> a
    -> a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(A,C(U),A)><L,1*U><L,U><L,U><S,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   ($dShow :: GHC.Show.Show a)
                   (name :: GHC.Base.String)
                   (actual :: a)
                   (expect :: a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case $dEq of ww { GHC.Classes.C:Eq ww1 ww2 ->
                 case ww1 actual expect of wild {
                   GHC.Types.False
                   -> case $dShow of ww4 { GHC.Show.C:Show ww5 ww3 ww6 ->
                      Test.Tasty.HUnit.Orig.assertEqual2
                        @ a
                        name
                        ww3
                        actual
                        expect
                        eta
                        UnitTests.assertEqual'2
                          `cast`
                        (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N)) }
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) } }) -}
5a016f41462ce8806183dc8cca70bf5e
  assertEqual'2 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   UnitTests.assertEqual'10
                   UnitTests.assertEqual'3
                   GHC.Stack.Types.EmptyCallStack) -}
ca97dabedb309f6a453050894e588bdc
  assertEqual'3 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   UnitTests.assertEqual'9
                   UnitTests.assertEqual'8
                   UnitTests.assertEqual'6
                   UnitTests.appExpUnitTests35
                   UnitTests.assertEqual'5
                   UnitTests.appExpUnitTests35
                   UnitTests.assertEqual'4) -}
a89f83575e237361213a308beef88c86
  assertEqual'4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 65#) -}
038ee53e2272552aefd7987ae4dac04a
  assertEqual'5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 35#) -}
5293811e35e7153c6e6a3bbfa1d37fa3
  assertEqual'6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.assertEqual'7) -}
c5d26147940c88997b7e64ad3ea2ca84
  assertEqual'7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test/UnitTests.hs"#) -}
92009c2587c88c25e122f244fe42282b
  assertEqual'8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# UnitTests.$trModule2) -}
eb13efb3449124bd78e9688d9bc0c94f
  assertEqual'9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# UnitTests.$trModule4) -}
4fa5fb7e59d4807a88e9e1398acd059f
  boolOpExpUnitTests ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.boolOpExpUnitTests13
                   UnitTests.boolOpExpUnitTests1) -}
fd16dd07e894698c8cbf7773044971d6
  boolOpExpUnitTests1 ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.boolOpExpUnitTests2
                   (GHC.Types.[]
                      @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion))) -}
fa14567502b741733decbb4f437ec757
  boolOpExpUnitTests10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("or"#) -}
16aef97089b4e783ea50128dff6ae6db
  boolOpExpUnitTests11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.boolOpExpUnitTests12) -}
b5954431defe27396ab188484c2e40c7
  boolOpExpUnitTests12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("(or lift exception)"#) -}
aa22a6c580ef6cf6b9337a1ceb7cf6fd
  boolOpExpUnitTests13 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.boolOpExpUnitTests17,
                  UnitTests.boolOpExpUnitTests14
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
8adebb11fc842985177bec4648b8d99f
  boolOpExpUnitTests14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.boolOpExpUnitTests_actual1
                        UnitTests.testenv1_expect of wild {
                   GHC.Types.False -> UnitTests.boolOpExpUnitTests15 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
4f726b862f3dceea3c397cf92a1ea02c
  boolOpExpUnitTests15 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
f41b77be2c97fbb7b9a53434e1b10687
  boolOpExpUnitTests16 :: Lib.Exp
  {- Strictness: m8,
     Unfolding: (Lib.BoolOpExp
                   UnitTests.boolOpExpUnitTests9
                   UnitTests.testenv22
                   UnitTests.appExpUnitTests17) -}
41c25e14f7748c0129f56a3fa6ac1c88
  boolOpExpUnitTests17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.boolOpExpUnitTests18) -}
7562ae1e4e0a55497b6ff5c6f063d639
  boolOpExpUnitTests18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("(or)"#) -}
4c9d7e268c2c3ab4d21fdeaa13515185
  boolOpExpUnitTests2 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.boolOpExpUnitTests11,
                  UnitTests.boolOpExpUnitTests3
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
cb8f465d4518adcc39d5716e1809fb1c
  boolOpExpUnitTests3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.boolOpExpUnitTests_actual
                        UnitTests.boolOpExpUnitTests_expect of wild {
                   GHC.Types.False -> UnitTests.boolOpExpUnitTests4 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
e45310544b635e55e6eb863794e502e0
  boolOpExpUnitTests4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
41d33d65d5ec2d560e9084b0f9497495
  boolOpExpUnitTests5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.boolOpExpUnitTests6) -}
0eeb57ca9caae01cb032f847e8cd74f1
  boolOpExpUnitTests6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Cannot lift"#) -}
38ebe27f2c5642c95041f93f6d7e4477
  boolOpExpUnitTests7 :: Lib.Exp
  {- Strictness: m8,
     Unfolding: (Lib.BoolOpExp
                   UnitTests.boolOpExpUnitTests9
                   UnitTests.boolOpExpUnitTests8
                   UnitTests.appExpUnitTests17) -}
316b5893d3d2c60c37dee0588de8a4ab
  boolOpExpUnitTests8 :: Lib.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntExp UnitTests.testenv19) -}
42a6ae413ec5f0d74ed96d538f4fb995
  boolOpExpUnitTests9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.boolOpExpUnitTests10) -}
4821a7f3e050fdf579666249e731cb19
  boolOpExpUnitTests_actual :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.boolOpExpUnitTests7
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
15e04fa991bc13058f6466165772e85f
  boolOpExpUnitTests_actual1 :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.boolOpExpUnitTests16
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
b86eb5c7c44bb7c26fde80ad8ac16468
  boolOpExpUnitTests_expect :: Lib.Val
  {- Strictness: m4,
     Unfolding: (Lib.ExnVal UnitTests.boolOpExpUnitTests5) -}
8863beda2b28729673894747ce89f289
  callStmtUnitTests ::
    [([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.callStmtUnitTests54
                   UnitTests.callStmtUnitTests1) -}
3321672e2db82b85d37597fef0761d2c
  callStmtUnitTests1 ::
    [([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.callStmtUnitTests2
                   (GHC.Types.[]
                      @ ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion))) -}
f63f8fb8c4554f67e18905363cf56b93
  callStmtUnitTests10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# UnitTests.testenv20) -}
22a56064d6211ee93c32879a31f73598
  callStmtUnitTests11 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   UnitTests.callStmtUnitTests10
                   (GHC.Types.[] @ GHC.Base.String)) -}
cb96e3b51ddc9f29c82b6e1f455389a8
  callStmtUnitTests12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("g"#) -}
2e8db99f2e60b8ba92ea6fe633246a25
  callStmtUnitTests13 :: Lib.Val
  {- Strictness: m3,
     Unfolding: (Lib.CloVal
                   UnitTests.callStmtUnitTests11
                   UnitTests.callStmtUnitTests14
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
7da27618f4f973f29e703736f78fe6c3
  callStmtUnitTests14 :: Lib.Exp
  {- Strictness: m7,
     Unfolding: (Lib.IntOpExp
                   UnitTests.callStmtUnitTests17
                   UnitTests.callStmtUnitTests9
                   UnitTests.callStmtUnitTests15) -}
a317aa8ee4ae6f4fc1316348bb2158b7
  callStmtUnitTests15 :: Lib.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntExp UnitTests.callStmtUnitTests16) -}
8cb5070b23c24df4d7b0b589132624b8
  callStmtUnitTests16 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
dcb34e6aa46e153aef6d7908ff309efc
  callStmtUnitTests17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.callStmtUnitTests18) -}
e37720299e7ac363bcd973157cec46af
  callStmtUnitTests18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("*"#) -}
84306af82a9c32cd0876c2c6f3ed0b06
  callStmtUnitTests19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# UnitTests.testenv12) -}
ce5bf93deaf777dee7e043240260c54e
  callStmtUnitTests2 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.callStmtUnitTests52,
                  UnitTests.callStmtUnitTests3
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
13705e1f4eb088184e859173813353cd
  callStmtUnitTests20 :: Lib.Val
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntVal UnitTests.callStmtUnitTests21) -}
430f3183613d139f1f6adcdaa2949fe2
  callStmtUnitTests21 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 14#) -}
43a9f63e613025c9aa6c40db6b96c57c
  callStmtUnitTests22 ::
    Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Stmt
  {- Unfolding: (UnitTests.$sunsafeInsert
                   @ Lib.Stmt
                   UnitTests.callStmtUnitTests34
                   UnitTests.callStmtUnitTests23
                   (Data.HashMap.Base.Empty @ [GHC.Types.Char] @ Lib.Stmt)) -}
219aa924fc75c31c78e294cf81d00c15
  callStmtUnitTests23 :: Lib.Stmt
  {- Strictness: m5,
     Unfolding: (Lib.ProcedureStmt
                   UnitTests.callStmtUnitTests34
                   UnitTests.callStmtUnitTests32
                   UnitTests.callStmtUnitTests24) -}
8881cd915d0a2d8fe9b00ba7accce31f
  callStmtUnitTests24 :: Lib.Stmt
  {- Strictness: m1,
     Unfolding: (Lib.SetStmt
                   UnitTests.callStmtUnitTests10
                   UnitTests.callStmtUnitTests25) -}
31ad4d8bba66a53605236d92d5df7907
  callStmtUnitTests25 :: Lib.Exp
  {- Strictness: m5,
     Unfolding: (Lib.AppExp
                   UnitTests.callStmtUnitTests31
                   UnitTests.callStmtUnitTests26) -}
ae3b1174a666e66fb7cabac0e181fe3d
  callStmtUnitTests26 :: [Lib.Exp]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Exp
                   UnitTests.callStmtUnitTests27
                   (GHC.Types.[] @ Lib.Exp)) -}
27ad6a0988d5bffe7085db44e6560cbd
  callStmtUnitTests27 :: Lib.Exp
  {- Strictness: m5,
     Unfolding: (Lib.AppExp
                   UnitTests.callStmtUnitTests29
                   UnitTests.callStmtUnitTests28) -}
cceee5186c7174ea6344e1eeeecca413
  callStmtUnitTests28 :: [Lib.Exp]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Exp
                   UnitTests.callStmtUnitTests9
                   (GHC.Types.[] @ Lib.Exp)) -}
26303a2104d8ece33b94f88115597a74
  callStmtUnitTests29 :: Lib.Exp
  {- Strictness: m10,
     Unfolding: (Lib.VarExp UnitTests.callStmtUnitTests30) -}
e7d46faacbe3cb7c44044417bdd57553
  callStmtUnitTests3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$wexec
                        UnitTests.callStmtUnitTests39
                        (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt)
                        (Data.HashMap.Base.Empty
                           @ GHC.Base.String
                           @ Lib.Val) of ww { (#,,#) ww1 ww2 ww3 ->
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 0> {- Strictness: x -}
                   = Test.Tasty.HUnit.Orig.assertEqual2
                       @ Lib.Result
                       (GHC.Types.[] @ GHC.Types.Char)
                       UnitTests.$s$fShow(,,)_$cshow
                       (ww1, ww2, ww3)
                       UnitTests.callStmtUnitTests38
                       eta
                       UnitTests.assertEqual'2
                         `cast`
                       (Sym (GHC.Classes.N:IP[0]
                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                 } in
                 case GHC.Classes.$fEqModule_$s$c==
                        ww1
                        UnitTests.callStmtUnitTests36 of wild {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case Data.HashMap.Base.equal
                             @ [GHC.Types.Char]
                             @ [GHC.Types.Char]
                             @ Lib.Stmt
                             @ Lib.Stmt
                             GHC.Base.eqString
                             Lib.$fEqStmt_$c==
                             ww2
                             UnitTests.callStmtUnitTests22 of wild1 {
                        GHC.Types.False -> $j
                        GHC.Types.True
                        -> case Data.HashMap.Base.equal
                                  @ [GHC.Types.Char]
                                  @ [GHC.Types.Char]
                                  @ Lib.Val
                                  @ Lib.Val
                                  GHC.Base.eqString
                                  Lib.$fEqVal_$c==
                                  ww3
                                  UnitTests.callStmtUnitTests4 of wild2 {
                             GHC.Types.False -> $j
                             GHC.Types.True -> (# eta, GHC.Tuple.() #) } } } }) -}
6a8de9f6c91eb63d32d2762ddd8f2dec
  callStmtUnitTests30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.callStmtUnitTests12) -}
ccb70ba30898f7b2537cefd4a9a56543
  callStmtUnitTests31 :: Lib.Exp
  {- Strictness: m10,
     Unfolding: (Lib.VarExp UnitTests.callStmtUnitTests19) -}
6a097522e2582183bdfcd339391911cd
  callStmtUnitTests32 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   UnitTests.callStmtUnitTests19
                   UnitTests.callStmtUnitTests33) -}
dadc6febfc6ce2799b8c1142a2651ce2
  callStmtUnitTests33 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   UnitTests.callStmtUnitTests30
                   UnitTests.callStmtUnitTests11) -}
74f6482e8972f613ea019004d91dfb39
  callStmtUnitTests34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.callStmtUnitTests35) -}
ca58ee12db3fef3f01fe9643995475f3
  callStmtUnitTests35 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("fog"#) -}
9a07368e7f01784ec63088ff7f1e6024
  callStmtUnitTests36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.callStmtUnitTests37) -}
84a94a7034e1864e5f4825499865b330
  callStmtUnitTests37 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("14"#) -}
395f617b1cc6978538e2d669093446ec
  callStmtUnitTests38 ::
    ([GHC.Types.Char],
     Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Stmt,
     Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val)
  {- Strictness: m,
     Unfolding: ((UnitTests.callStmtUnitTests36,
                  UnitTests.callStmtUnitTests22, UnitTests.callStmtUnitTests4)) -}
a52dcda850a407a7cdfe965e8e7dd935
  callStmtUnitTests39 :: Lib.Stmt
  {- Strictness: m7,
     Unfolding: (Lib.SeqStmt UnitTests.callStmtUnitTests40) -}
127c0dd99485a14bb73e9ed37fad0594
  callStmtUnitTests4 ::
    Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val
  {- Unfolding: (case UnitTests.$sunsafeInsert
                        @ Lib.Val
                        UnitTests.callStmtUnitTests10
                        UnitTests.callStmtUnitTests20
                        (Data.HashMap.Base.Empty
                           @ [GHC.Types.Char]
                           @ Lib.Val) of z { DEFAULT ->
                 case UnitTests.$sunsafeInsert
                        @ Lib.Val
                        UnitTests.callStmtUnitTests19
                        UnitTests.callStmtUnitTests13
                        z of z1 { DEFAULT ->
                 UnitTests.$sunsafeInsert
                   @ Lib.Val
                   (GHC.CString.unpackCString# UnitTests.callStmtUnitTests12)
                   UnitTests.callStmtUnitTests5
                   z1 } }) -}
b7ef9b7f28996ef940d87b2b8906ac80
  callStmtUnitTests40 :: [Lib.Stmt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Stmt
                   UnitTests.callStmtUnitTests23
                   UnitTests.callStmtUnitTests41) -}
9c4f1ad72d2e711fa9382879b0fc1001
  callStmtUnitTests41 :: [Lib.Stmt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Stmt
                   UnitTests.callStmtUnitTests44
                   UnitTests.callStmtUnitTests42) -}
d474b0e68a7a0b246031393f555251fd
  callStmtUnitTests42 :: [Lib.Stmt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Stmt
                   UnitTests.callStmtUnitTests43
                   (GHC.Types.[] @ Lib.Stmt)) -}
eafe95fd8f3bf9fb86de0fdaddaec4c9
  callStmtUnitTests43 :: Lib.Stmt
  {- Strictness: m2,
     Unfolding: (Lib.PrintStmt UnitTests.callStmtUnitTests9) -}
a04c3d0f09b40d73191bfcbbef146711
  callStmtUnitTests44 :: Lib.Stmt
  {- Strictness: m6,
     Unfolding: (Lib.CallStmt
                   UnitTests.callStmtUnitTests34
                   UnitTests.callStmtUnitTests45) -}
198935104b6e6ce709229ffd835e3167
  callStmtUnitTests45 :: [Lib.Exp]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Exp
                   UnitTests.callStmtUnitTests51
                   UnitTests.callStmtUnitTests46) -}
d2f961d3cd79aa9e580c4cf770d0101d
  callStmtUnitTests46 :: [Lib.Exp]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Exp
                   UnitTests.callStmtUnitTests50
                   UnitTests.callStmtUnitTests47) -}
5f378660fac85159ad10349e56020c86
  callStmtUnitTests47 :: [Lib.Exp]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Exp
                   UnitTests.callStmtUnitTests48
                   (GHC.Types.[] @ Lib.Exp)) -}
e065cf45d53ee0218e4741dfd78e1426
  callStmtUnitTests48 :: Lib.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntExp UnitTests.callStmtUnitTests49) -}
ee326343b3c9c5e482f68b0d87fdc863
  callStmtUnitTests49 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 6#) -}
a5e954da61589d03789a519bdbaa82c1
  callStmtUnitTests5 :: Lib.Val
  {- Strictness: m3,
     Unfolding: (Lib.CloVal
                   UnitTests.callStmtUnitTests11
                   UnitTests.callStmtUnitTests6
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
b8d42304fe094f2f5071846a9b37b203
  callStmtUnitTests50 :: Lib.Exp
  {- Strictness: m3,
     Unfolding: (Lib.FunExp
                   UnitTests.callStmtUnitTests11
                   UnitTests.callStmtUnitTests6) -}
415aa6d490b289522a97a094f2c8479f
  callStmtUnitTests51 :: Lib.Exp
  {- Strictness: m3,
     Unfolding: (Lib.FunExp
                   UnitTests.callStmtUnitTests11
                   UnitTests.callStmtUnitTests14) -}
b93424ee7be004901218378f0b4e7a57
  callStmtUnitTests52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.callStmtUnitTests53) -}
0c0802aa6731f7a1869835c413f3cdd7
  callStmtUnitTests53 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Higher Order Procedure"#) -}
0fa0db144dc54b1e71660ae1a125a037
  callStmtUnitTests54 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.callStmtUnitTests81,
                  UnitTests.callStmtUnitTests55
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
5bc81d216353cdf68f59d9464f0bfb26
  callStmtUnitTests55 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$wexec
                        UnitTests.callStmtUnitTests74
                        (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt)
                        (Data.HashMap.Base.Empty
                           @ GHC.Base.String
                           @ Lib.Val) of ww { (#,,#) ww1 ww2 ww3 ->
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 0> {- Strictness: x -}
                   = Test.Tasty.HUnit.Orig.assertEqual2
                       @ Lib.Result
                       (GHC.Types.[] @ GHC.Types.Char)
                       UnitTests.$s$fShow(,,)_$cshow
                       (ww1, ww2, ww3)
                       UnitTests.callStmtUnitTests73
                       eta
                       UnitTests.assertEqual'2
                         `cast`
                       (Sym (GHC.Classes.N:IP[0]
                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                 } in
                 case GHC.Classes.$fEqModule_$s$c==
                        ww1
                        UnitTests.callStmtUnitTests71 of wild {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case Data.HashMap.Base.equal
                             @ [GHC.Types.Char]
                             @ [GHC.Types.Char]
                             @ Lib.Stmt
                             @ Lib.Stmt
                             GHC.Base.eqString
                             Lib.$fEqStmt_$c==
                             ww2
                             UnitTests.callStmtUnitTests70 of wild1 {
                        GHC.Types.False -> $j
                        GHC.Types.True
                        -> case Data.HashMap.Base.equal
                                  @ [GHC.Types.Char]
                                  @ [GHC.Types.Char]
                                  @ Lib.Val
                                  @ Lib.Val
                                  GHC.Base.eqString
                                  Lib.$fEqVal_$c==
                                  ww3
                                  UnitTests.callStmtUnitTests56 of wild2 {
                             GHC.Types.False -> $j
                             GHC.Types.True -> (# eta, GHC.Tuple.() #) } } } }) -}
3644b274e5b5b6e477911ff83c5fa241
  callStmtUnitTests56 ::
    Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val
  {- Unfolding: (case UnitTests.$sunsafeInsert
                        @ Lib.Val
                        UnitTests.callStmtUnitTests68
                        UnitTests.callStmtUnitTests66
                        (Data.HashMap.Base.Empty
                           @ [GHC.Types.Char]
                           @ Lib.Val) of z { DEFAULT ->
                 case UnitTests.$sunsafeInsert
                        @ Lib.Val
                        UnitTests.callStmtUnitTests64
                        UnitTests.callStmtUnitTests63
                        z of z1 { DEFAULT ->
                 case UnitTests.$sunsafeInsert
                        @ Lib.Val
                        UnitTests.callStmtUnitTests61
                        UnitTests.callStmtUnitTests59
                        z1 of z2 { DEFAULT ->
                 UnitTests.$sunsafeInsert
                   @ Lib.Val
                   UnitTests.callStmtUnitTests57
                   UnitTests.callStmtUnitTests66
                   z2 } } }) -}
c4424305c219fa48358b588eac954009
  callStmtUnitTests57 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.callStmtUnitTests58) -}
c47df0c9d494df638eb0037b98be9772
  callStmtUnitTests58 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tmp"#) -}
56e60cc489af16842be30df1fbfa9de5
  callStmtUnitTests59 :: Lib.Val
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntVal UnitTests.callStmtUnitTests60) -}
6d6ac60104e5b7b9115189274bb43863
  callStmtUnitTests6 :: Lib.Exp
  {- Strictness: m7,
     Unfolding: (Lib.IntOpExp
                   UnitTests.appExpUnitTests48
                   UnitTests.callStmtUnitTests9
                   UnitTests.callStmtUnitTests7) -}
e1127833f8ef51ee0c52b67b95e10842
  callStmtUnitTests60 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 89#) -}
5a94849f58802ef9dad7a041c77dc5c4
  callStmtUnitTests61 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.callStmtUnitTests62) -}
05187c5c5306d443f3678d486232bd1a
  callStmtUnitTests62 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("acc2"#) -}
36415af8e0820dd76682f9db376a1e97
  callStmtUnitTests63 :: Lib.Val
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntVal UnitTests.testenv11) -}
f26770f4daf8c2cd0fe29184ccc330f2
  callStmtUnitTests64 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.callStmtUnitTests65) -}
4c2091e06e6c3632ab6cf59fd1ab8e12
  callStmtUnitTests65 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("n"#) -}
af60a8b503b2a73bf743f317a7ff22e3
  callStmtUnitTests66 :: Lib.Val
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntVal UnitTests.callStmtUnitTests67) -}
8e096af491f19c0144dda146350c5365
  callStmtUnitTests67 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 55#) -}
1c56f0ad6be1c8cf2d02f6ffb2073e50
  callStmtUnitTests68 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.callStmtUnitTests69) -}
d0cad5522892a71d48a32a06f85a0d4b
  callStmtUnitTests69 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("acc1"#) -}
ad6b337dce69802b5ec549c43315280a
  callStmtUnitTests7 :: Lib.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntExp UnitTests.callStmtUnitTests8) -}
83b2ddc8ff4207a9d42bdf423339bf1b
  callStmtUnitTests70 ::
    Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Stmt
  {- Unfolding: (case UnitTests.$sunsafeInsert
                        @ Lib.Stmt
                        UnitTests.procFibonacci9
                        UnitTests.procFibHelp
                        (Data.HashMap.Base.Empty
                           @ [GHC.Types.Char]
                           @ Lib.Stmt) of z { DEFAULT ->
                 UnitTests.$sunsafeInsert
                   @ Lib.Stmt
                   UnitTests.procFibonacci13
                   UnitTests.procFibonacci
                   z }) -}
f32a79b7a75c1f267ded98db9b648b86
  callStmtUnitTests71 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.callStmtUnitTests72) -}
46d17f3daaae4648d8894c5feb852629
  callStmtUnitTests72 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("89"#) -}
77cfb08a77811565ac164e8c23a56483
  callStmtUnitTests73 ::
    ([GHC.Types.Char],
     Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Stmt,
     Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val)
  {- Strictness: m,
     Unfolding: ((UnitTests.callStmtUnitTests71,
                  UnitTests.callStmtUnitTests70, UnitTests.callStmtUnitTests56)) -}
45c0ec499b4efa161342d9a3f5a55d6f
  callStmtUnitTests74 :: Lib.Stmt
  {- Strictness: m7,
     Unfolding: (Lib.SeqStmt UnitTests.callStmtUnitTests75) -}
d693353d2302298ffc2573c7e857da52
  callStmtUnitTests75 :: [Lib.Stmt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Stmt
                   UnitTests.procFibonacci
                   UnitTests.callStmtUnitTests76) -}
7b70062c167a4b7075f964267ea7eff4
  callStmtUnitTests76 :: [Lib.Stmt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Stmt
                   UnitTests.callStmtUnitTests77
                   (GHC.Types.[] @ Lib.Stmt)) -}
14310dfbc5c71e9281850b2d53d2b03f
  callStmtUnitTests77 :: Lib.Stmt
  {- Strictness: m6,
     Unfolding: (Lib.CallStmt
                   UnitTests.procFibonacci13
                   UnitTests.callStmtUnitTests78) -}
43628b2bd88fa19d809480fd8616273a
  callStmtUnitTests78 :: [Lib.Exp]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Exp
                   UnitTests.callStmtUnitTests79
                   (GHC.Types.[] @ Lib.Exp)) -}
3aab043b065fa3d06b9bfb4634b20e53
  callStmtUnitTests79 :: Lib.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntExp UnitTests.callStmtUnitTests80) -}
53a22b4320d7f27f48914fb21ea14b64
  callStmtUnitTests8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
041b01729b22682f37ac486024ea52e6
  callStmtUnitTests80 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
d5a3e12d5eb258f65e6ce7ef81d4dff6
  callStmtUnitTests81 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.callStmtUnitTests82) -}
b1e22231b62553d4c5e7435831cc5dff
  callStmtUnitTests82 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("10th Fibonacci number"#) -}
012241835e1ee5f8bb2398f48ce98680
  callStmtUnitTests9 :: Lib.Exp
  {- Strictness: m10,
     Unfolding: (Lib.VarExp UnitTests.callStmtUnitTests10) -}
f23bc89651ddd739eb0e95900e407ec4
  compOpExpUnitTests ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.compOpExpUnitTests10
                   UnitTests.compOpExpUnitTests1) -}
a7e67435e3d9bcb2fd6242a95981be89
  compOpExpUnitTests1 ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.compOpExpUnitTests2
                   (GHC.Types.[]
                      @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion))) -}
532515e4903dad8f8301c3115b2fe98d
  compOpExpUnitTests10 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.compOpExpUnitTests14,
                  UnitTests.compOpExpUnitTests11
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
e3b870c7b2bd47ecc69175a709ebe0c5
  compOpExpUnitTests11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.compOpExpUnitTests_actual1
                        UnitTests.testenv1_expect of wild {
                   GHC.Types.False -> UnitTests.compOpExpUnitTests12 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
ed6b4285800e4cf8e5c6e887e6102181
  compOpExpUnitTests12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
ff0e45f17db50ef8cdcc2063cc3925a6
  compOpExpUnitTests13 :: Lib.Exp
  {- Strictness: m9,
     Unfolding: (Lib.CompOpExp
                   UnitTests.compOpExpUnitTests6
                   UnitTests.callStmtUnitTests48
                   UnitTests.callStmtUnitTests48) -}
979c15a3fa9c0d9f238f2a3067d10c54
  compOpExpUnitTests14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.compOpExpUnitTests15) -}
18dd171268259e9bddb9fb8730c4dfbe
  compOpExpUnitTests15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("(>=)"#) -}
248d9a58d58fe2c4d2a226b2fa751a2b
  compOpExpUnitTests2 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.compOpExpUnitTests8,
                  UnitTests.compOpExpUnitTests3
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
944225088b2a483134bbe8fa2ef83fb8
  compOpExpUnitTests3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.compOpExpUnitTests_actual
                        UnitTests.boolOpExpUnitTests_expect of wild {
                   GHC.Types.False -> UnitTests.compOpExpUnitTests4 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
ba766f24236dcf1f0d400ac1d2c64a3f
  compOpExpUnitTests4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
e34ae12295535cf60169700c70ea1af6
  compOpExpUnitTests5 :: Lib.Exp
  {- Strictness: m9,
     Unfolding: (Lib.CompOpExp
                   UnitTests.compOpExpUnitTests6
                   UnitTests.testenv22
                   UnitTests.callStmtUnitTests48) -}
19be144dc5c41a1ea4a3d45ef2c1a04e
  compOpExpUnitTests6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.compOpExpUnitTests7) -}
c6e6245170a94a8455c899fd147aa276
  compOpExpUnitTests7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (">="#) -}
e14939bd31b4514377f842fce9422fa4
  compOpExpUnitTests8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.compOpExpUnitTests9) -}
3872977cb9162a3f6034b3c463318167
  compOpExpUnitTests9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("(>= lift exception)"#) -}
8127b51d49b224f5284a173adb75c321
  compOpExpUnitTests_actual :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.compOpExpUnitTests5
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
b647321c4df74a1b6e3ea65f5b2848cc
  compOpExpUnitTests_actual1 :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.compOpExpUnitTests13
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
6c3f365a30462882f1f8bbd67eb9559a
  constExpUnitTests ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.constExpUnitTests7
                   UnitTests.constExpUnitTests1) -}
d36cd8d014e128a8aba74ceaa4ea665c
  constExpUnitTests1 ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.constExpUnitTests2
                   (GHC.Types.[]
                      @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion))) -}
11706ebbbd06b9a9a343d8f2b325bdd2
  constExpUnitTests10 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -5#) -}
d5e679b964e831795d01fc2e3c62142d
  constExpUnitTests11 :: Lib.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntExp UnitTests.constExpUnitTests10) -}
a5c09291890bad87281a33740bf7cbb7
  constExpUnitTests12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.constExpUnitTests13) -}
499bf808ed1dcecd0fa7ca92192b6599
  constExpUnitTests13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Int Constant"#) -}
3212147b81f8c58ae301d2c0863709aa
  constExpUnitTests2 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.constExpUnitTests5,
                  UnitTests.constExpUnitTests3
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
499e216e165d36e31ac84d8e8c1cd3f9
  constExpUnitTests3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.constExpUnitTests_actual
                        UnitTests.testenv1_expect of wild {
                   GHC.Types.False -> UnitTests.constExpUnitTests4 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
30ecd94e1834666f71829b4425d17b07
  constExpUnitTests4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
7ef790bfed216247e172cb4ab6df521f
  constExpUnitTests5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.constExpUnitTests6) -}
374b116449583ee703b91b29505d664a
  constExpUnitTests6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Bool Constant"#) -}
ecea3de6bbd5827de34be848de1def56
  constExpUnitTests7 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.constExpUnitTests12,
                  UnitTests.constExpUnitTests8
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
f1c89db833c8bf0c5e3cb47acaab5fa8
  constExpUnitTests8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.constExpUnitTests_actual1
                        UnitTests.constExpUnitTests_expect of wild {
                   GHC.Types.False -> UnitTests.constExpUnitTests9 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
60560a6b0258b339c8d96c9116e896fb
  constExpUnitTests9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
a43080dcdfd0372fa1792b15df85f526
  constExpUnitTests_actual :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.testenv22
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
4cdf5f3b9cdc5c52f01883d6f15c6d23
  constExpUnitTests_actual1 :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.constExpUnitTests11
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
6cabbbef6078e9e649a01c2623fabee2
  constExpUnitTests_expect :: Lib.Val
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntVal UnitTests.constExpUnitTests10) -}
0a42bde4f73f5e3fc65f182d2b7ce567
  funExpUnitTests ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.funExpUnitTests1
                   (GHC.Types.[]
                      @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion))) -}
bed827003a6147ce622d086e7972e893
  funExpUnitTests1 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.appExpUnitTests52,
                  UnitTests.funExpUnitTests2
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
0c6470bc23746d2c854343b16420d0cd
  funExpUnitTests2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.funExpUnitTests_actual
                        UnitTests.funExpUnitTests_expect of wild {
                   GHC.Types.False -> UnitTests.funExpUnitTests3 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
c79b6fe5b92b0a2ae834aa777315dfa2
  funExpUnitTests3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
9ed6fe6ffe26b90fcacd3884a811f1d1
  funExpUnitTests4 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   UnitTests.testenv6
                   UnitTests.funExpUnitTests5) -}
2183d644a10067d153d828daafab9580
  funExpUnitTests5 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   UnitTests.appExpUnitTests46
                   UnitTests.funExpUnitTests6) -}
85dce7da69d239e15351fe8f8d9cf95c
  funExpUnitTests6 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   UnitTests.funExpUnitTests7
                   (GHC.Types.[] @ GHC.Base.String)) -}
9c3d41ea6290fde3ae2908d993c4b775
  funExpUnitTests7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.funExpUnitTests8) -}
d25eace0b8493b43dd0823ec8e4ea044
  funExpUnitTests8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("c"#) -}
a3fa1a2ef73684f1758ad0a833368fee
  funExpUnitTests9 :: Lib.Exp
  {- Strictness: m3,
     Unfolding: (Lib.FunExp
                   UnitTests.funExpUnitTests4
                   UnitTests.appExpUnitTests39) -}
661777cea14f7373d04a1612fa2735f8
  funExpUnitTests_actual :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.funExpUnitTests9
                   UnitTests.testenv1) -}
4839272766282b2d9fd70dd31b7b4cd6
  funExpUnitTests_expect :: Lib.Val
  {- Strictness: m3,
     Unfolding: (Lib.CloVal
                   UnitTests.funExpUnitTests4
                   UnitTests.appExpUnitTests39
                   UnitTests.testenv1) -}
cfa11022213bfc20bf3771fe6578bc23
  ifExpUnitTests ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.ifExpUnitTests21
                   UnitTests.ifExpUnitTests1) -}
147a5fd67ce07e56ae1b832e9fa1c15c
  ifExpUnitTests1 ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.ifExpUnitTests14
                   UnitTests.ifExpUnitTests2) -}
f8d15e7eff04f6d8072fb07ed7e95e61
  ifExpUnitTests10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.ifExpUnitTests11) -}
1edc89c46b41fcd79591aa2ac0148e89
  ifExpUnitTests11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/"#) -}
1477d7c8f028db2a2525702e335d0426
  ifExpUnitTests12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.ifExpUnitTests13) -}
142dc0a345c5a988f519ab090d2feed7
  ifExpUnitTests13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("exception"#) -}
cdb2803b5e628301df488614d48d8913
  ifExpUnitTests14 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.ifExpUnitTests19,
                  UnitTests.ifExpUnitTests15
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
0579df6b6be2a2cad3370b791600df43
  ifExpUnitTests15 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.ifExpUnitTests_actual1
                        UnitTests.ifExpUnitTests_expect1 of wild {
                   GHC.Types.False -> UnitTests.ifExpUnitTests16 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
02baec2224f3ae5a07cf99452f9f17c2
  ifExpUnitTests16 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
ab817b7214201188204dbdfdd6dd7d91
  ifExpUnitTests17 :: Lib.Exp
  {- Strictness: m6,
     Unfolding: (Lib.IfExp
                   UnitTests.ifExpUnitTests18
                   UnitTests.appExpUnitTests39
                   UnitTests.callStmtUnitTests79) -}
4a77999e1f827f498c8683fcdc927f98
  ifExpUnitTests18 :: Lib.Exp
  {- Strictness: m8,
     Unfolding: (Lib.BoolOpExp
                   UnitTests.testenv24
                   UnitTests.testenv22
                   UnitTests.appExpUnitTests17) -}
b6db296f6b3ec2279ae7d8a23445b575
  ifExpUnitTests19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.ifExpUnitTests20) -}
de3d7a68c4fcecbaed5d111b2400a9d8
  ifExpUnitTests2 ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.ifExpUnitTests3
                   (GHC.Types.[]
                      @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion))) -}
240e3f780b0490473c8d34c2ee48d0df
  ifExpUnitTests20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("False branch"#) -}
4aa11388b5995f5dbda333c4905fa7f5
  ifExpUnitTests21 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.ifExpUnitTests25,
                  UnitTests.ifExpUnitTests22
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
3ebfea9bf89820586b99a2610a00d35a
  ifExpUnitTests22 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.ifExpUnitTests_actual2
                        UnitTests.ifExpUnitTests_expect2 of wild {
                   GHC.Types.False -> UnitTests.ifExpUnitTests23 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
79fadf3e1f7fd260d442247260219704
  ifExpUnitTests23 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
c6480e481f5f8b08a7f5b19620f7109d
  ifExpUnitTests24 :: Lib.Exp
  {- Strictness: m6,
     Unfolding: (Lib.IfExp
                   UnitTests.boolOpExpUnitTests16
                   UnitTests.appExpUnitTests39
                   UnitTests.callStmtUnitTests79) -}
a7847a1b1ac7e20be9abe771a849222c
  ifExpUnitTests25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.ifExpUnitTests26) -}
0c5470da769798d0276b43545816b58b
  ifExpUnitTests26 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("True branch"#) -}
2100b0c3c7fe8430e9541c3369c147ec
  ifExpUnitTests3 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.ifExpUnitTests12,
                  UnitTests.ifExpUnitTests4
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
34755ca75ab58cb2eeeed28c7661144e
  ifExpUnitTests4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.ifExpUnitTests_actual
                        UnitTests.ifExpUnitTests_expect of wild {
                   GHC.Types.False -> UnitTests.ifExpUnitTests5 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
0a57692f2a270e2f15892b8c2bd7fc5b
  ifExpUnitTests5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
5420abf341368d152a5079c30bcb2fab
  ifExpUnitTests6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.ifExpUnitTests7) -}
e06869a368c79f03cade651cbd880d19
  ifExpUnitTests7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Condition is not a Bool"#) -}
c105c44f51814ad6e28991280d50fbe1
  ifExpUnitTests8 :: Lib.Exp
  {- Strictness: m6,
     Unfolding: (Lib.IfExp
                   UnitTests.ifExpUnitTests9
                   UnitTests.appExpUnitTests39
                   UnitTests.callStmtUnitTests79) -}
37d03c6831b4f86d856639e66376746c
  ifExpUnitTests9 :: Lib.Exp
  {- Strictness: m7,
     Unfolding: (Lib.IntOpExp
                   UnitTests.ifExpUnitTests10
                   UnitTests.appExpUnitTests39
                   UnitTests.testenv10) -}
e294aa0758cf746ae85c968fbdfacf1d
  ifExpUnitTests_actual :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.ifExpUnitTests8
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
d24dbbebffc1cb0f35e3096b2d6f2eb0
  ifExpUnitTests_actual1 :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.ifExpUnitTests17
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
ab50c6979a53a026220a93e016a12cd2
  ifExpUnitTests_actual2 :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.ifExpUnitTests24
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
8c22f5525e8265dbc8d1b8933d7b5d89
  ifExpUnitTests_expect :: Lib.Val
  {- Strictness: m4,
     Unfolding: (Lib.ExnVal UnitTests.ifExpUnitTests6) -}
3df5fb72bccfb0b6f6b7f4b8b4626724
  ifExpUnitTests_expect1 :: Lib.Val
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntVal UnitTests.callStmtUnitTests80) -}
2d9f91f09b62d3f8c3d697a98c25ac87
  ifExpUnitTests_expect2 :: Lib.Val
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntVal UnitTests.appExpUnitTests40) -}
8c0d6e14295ed53464e03ec05a60e8c3
  ifStmtUnitTests ::
    [([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.ifStmtUnitTests20
                   UnitTests.ifStmtUnitTests1) -}
7e1a7676e297b6f26154b9b7955edc96
  ifStmtUnitTests1 ::
    [([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.ifStmtUnitTests12
                   UnitTests.ifStmtUnitTests2) -}
2a4499c813fb5bc30e9d2e1af24c31da
  ifStmtUnitTests10 :: Lib.Stmt
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Lib.PrintStmt UnitTests.appExpUnitTests39) -}
fe2e7f7f7b46116afb58b43201151ddd
  ifStmtUnitTests11 :: Lib.Exp
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Lib.FunExp
                   (GHC.Types.[] @ GHC.Base.String)
                   UnitTests.testenv10) -}
2025cf0831cb6eb6cf43e168a2de3b9c
  ifStmtUnitTests12 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.ifStmtUnitTests18,
                  UnitTests.ifStmtUnitTests13
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
94d89146ae04ee499027ce2029de8e90
  ifStmtUnitTests13 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$wexec
                        UnitTests.ifStmtUnitTests17
                        (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt)
                        (Data.HashMap.Base.Empty
                           @ GHC.Base.String
                           @ Lib.Val) of ww { (#,,#) ww1 ww2 ww3 ->
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 0> {- Strictness: x -}
                   = Test.Tasty.HUnit.Orig.assertEqual2
                       @ Lib.Result
                       (GHC.Types.[] @ GHC.Types.Char)
                       UnitTests.$s$fShow(,,)_$cshow
                       (ww1, ww2, ww3)
                       UnitTests.ifStmtUnitTests16
                       eta
                       UnitTests.assertEqual'2
                         `cast`
                       (Sym (GHC.Classes.N:IP[0]
                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                 } in
                 case GHC.Classes.$fEqModule_$s$c==
                        ww1
                        UnitTests.ifStmtUnitTests14 of wild {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case Data.HashMap.Base.equal
                             @ [GHC.Types.Char]
                             @ [GHC.Types.Char]
                             @ Lib.Stmt
                             @ Lib.Stmt
                             GHC.Base.eqString
                             Lib.$fEqStmt_$c==
                             ww2
                             (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt) of wild1 {
                        GHC.Types.False -> $j
                        GHC.Types.True
                        -> case Data.HashMap.Base.equal
                                  @ [GHC.Types.Char]
                                  @ [GHC.Types.Char]
                                  @ Lib.Val
                                  @ Lib.Val
                                  GHC.Base.eqString
                                  Lib.$fEqVal_$c==
                                  ww3
                                  (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val) of wild2 {
                             GHC.Types.False -> $j
                             GHC.Types.True -> (# eta, GHC.Tuple.() #) } } } }) -}
84ac6d55dd6ff9cf8e44706d541abc73
  ifStmtUnitTests14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.ifStmtUnitTests15) -}
76b6c674bcd537eb370235c1b7085364
  ifStmtUnitTests15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("10"#) -}
7cf39ea7f1d09ec6daf46941f9d07e55
  ifStmtUnitTests16 ::
    ([GHC.Types.Char],
     Data.HashMap.Base.HashMap GHC.Base.String Lib.Stmt,
     Data.HashMap.Base.HashMap GHC.Base.String Lib.Val)
  {- Strictness: m,
     Unfolding: ((UnitTests.ifStmtUnitTests14,
                  Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt,
                  Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
b27e1dac74d0a6a46880f08127490b27
  ifStmtUnitTests17 :: Lib.Stmt
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (Lib.IfStmt
                   UnitTests.appExpUnitTests17
                   UnitTests.ifStmtUnitTests10
                   UnitTests.ifStmtUnitTests9) -}
b554ce5497345beacef3fe0f2ff5bd87
  ifStmtUnitTests18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.ifStmtUnitTests19) -}
3b801cf34219351a6acc45cd07f5048a
  ifStmtUnitTests19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Non-trivial conditional"#) -}
799344d2fc59d2aa3fff5218d3b179af
  ifStmtUnitTests2 ::
    [([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.ifStmtUnitTests3
                   (GHC.Types.[]
                      @ ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion))) -}
044310330287bfa87ee4bda2f27e8c0b
  ifStmtUnitTests20 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.ifStmtUnitTests26,
                  UnitTests.ifStmtUnitTests21
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
3e76cbe6e385589183abddbb92336994
  ifStmtUnitTests21 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$wexec
                        UnitTests.ifStmtUnitTests25
                        (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt)
                        (Data.HashMap.Base.Empty
                           @ GHC.Base.String
                           @ Lib.Val) of ww { (#,,#) ww1 ww2 ww3 ->
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 0> {- Strictness: x -}
                   = Test.Tasty.HUnit.Orig.assertEqual2
                       @ Lib.Result
                       (GHC.Types.[] @ GHC.Types.Char)
                       UnitTests.$s$fShow(,,)_$cshow
                       (ww1, ww2, ww3)
                       UnitTests.ifStmtUnitTests24
                       eta
                       UnitTests.assertEqual'2
                         `cast`
                       (Sym (GHC.Classes.N:IP[0]
                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                 } in
                 case GHC.Classes.$fEqModule_$s$c==
                        ww1
                        UnitTests.ifStmtUnitTests22 of wild {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case Data.HashMap.Base.equal
                             @ [GHC.Types.Char]
                             @ [GHC.Types.Char]
                             @ Lib.Stmt
                             @ Lib.Stmt
                             GHC.Base.eqString
                             Lib.$fEqStmt_$c==
                             ww2
                             (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt) of wild1 {
                        GHC.Types.False -> $j
                        GHC.Types.True
                        -> case Data.HashMap.Base.equal
                                  @ [GHC.Types.Char]
                                  @ [GHC.Types.Char]
                                  @ Lib.Val
                                  @ Lib.Val
                                  GHC.Base.eqString
                                  Lib.$fEqVal_$c==
                                  ww3
                                  (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val) of wild2 {
                             GHC.Types.False -> $j
                             GHC.Types.True -> (# eta, GHC.Tuple.() #) } } } }) -}
7ef6d04464b0c9794dd4958968b70870
  ifStmtUnitTests22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.ifStmtUnitTests23) -}
41a1d05ad24c4b99b488e4b3074c83e7
  ifStmtUnitTests23 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("5"#) -}
5f127afd4a3dfe11155e743abba24b9e
  ifStmtUnitTests24 ::
    ([GHC.Types.Char],
     Data.HashMap.Base.HashMap GHC.Base.String Lib.Stmt,
     Data.HashMap.Base.HashMap GHC.Base.String Lib.Val)
  {- Strictness: m,
     Unfolding: ((UnitTests.ifStmtUnitTests22,
                  Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt,
                  Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
2587f51ccde4f05ae9efddd44272cc49
  ifStmtUnitTests25 :: Lib.Stmt
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (Lib.IfStmt
                   UnitTests.testenv22
                   UnitTests.ifStmtUnitTests10
                   UnitTests.ifStmtUnitTests9) -}
a337e45f4f23d3716515802834cd7a50
  ifStmtUnitTests26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.ifStmtUnitTests27) -}
ef2bce63e281178e26c99fc351f56792
  ifStmtUnitTests27 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Vanilla"#) -}
ab56422f2744cfcc4f21f767fee4992d
  ifStmtUnitTests3 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.appExpUnitTests10,
                  UnitTests.ifStmtUnitTests4
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
f07c60dbab4e9069474313cad0eb857f
  ifStmtUnitTests4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$wexec
                        UnitTests.ifStmtUnitTests8
                        (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt)
                        (Data.HashMap.Base.Empty
                           @ GHC.Base.String
                           @ Lib.Val) of ww { (#,,#) ww1 ww2 ww3 ->
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 0> {- Strictness: x -}
                   = Test.Tasty.HUnit.Orig.assertEqual2
                       @ Lib.Result
                       (GHC.Types.[] @ GHC.Types.Char)
                       UnitTests.$s$fShow(,,)_$cshow
                       (ww1, ww2, ww3)
                       UnitTests.ifStmtUnitTests7
                       eta
                       UnitTests.assertEqual'2
                         `cast`
                       (Sym (GHC.Classes.N:IP[0]
                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                 } in
                 case GHC.Classes.$fEqModule_$s$c==
                        ww1
                        UnitTests.ifStmtUnitTests5 of wild {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case Data.HashMap.Base.equal
                             @ [GHC.Types.Char]
                             @ [GHC.Types.Char]
                             @ Lib.Stmt
                             @ Lib.Stmt
                             GHC.Base.eqString
                             Lib.$fEqStmt_$c==
                             ww2
                             (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt) of wild1 {
                        GHC.Types.False -> $j
                        GHC.Types.True
                        -> case Data.HashMap.Base.equal
                                  @ [GHC.Types.Char]
                                  @ [GHC.Types.Char]
                                  @ Lib.Val
                                  @ Lib.Val
                                  GHC.Base.eqString
                                  Lib.$fEqVal_$c==
                                  ww3
                                  (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val) of wild2 {
                             GHC.Types.False -> $j
                             GHC.Types.True -> (# eta, GHC.Tuple.() #) } } } }) -}
efe386f10d8ab5acbc98b6a97020b273
  ifStmtUnitTests5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.ifStmtUnitTests6) -}
cfbe50c94e21b2ba198a158ec30328b8
  ifStmtUnitTests6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("exn: Condition is not a Bool"#) -}
4bfa6fc93124399c4b1b3856c9340216
  ifStmtUnitTests7 ::
    ([GHC.Types.Char],
     Data.HashMap.Base.HashMap GHC.Base.String Lib.Stmt,
     Data.HashMap.Base.HashMap GHC.Base.String Lib.Val)
  {- Strictness: m,
     Unfolding: ((UnitTests.ifStmtUnitTests5,
                  Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt,
                  Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
4b47df7ed05f80936fab831ba6a702a0
  ifStmtUnitTests8 :: Lib.Stmt
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (Lib.IfStmt
                   UnitTests.ifStmtUnitTests11
                   UnitTests.ifStmtUnitTests10
                   UnitTests.ifStmtUnitTests9) -}
530379ea7d360aa6f796ce740663b267
  ifStmtUnitTests9 :: Lib.Stmt
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Lib.PrintStmt UnitTests.callStmtUnitTests79) -}
575f9ac72d1b65e229ab247304082974
  intOpExpUnitTests ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.intOpExpUnitTests29
                   UnitTests.intOpExpUnitTests1) -}
9c6015d215559e442d7a195be42c35ff
  intOpExpUnitTests1 ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.intOpExpUnitTests22
                   UnitTests.intOpExpUnitTests2) -}
6067da221ba2822d11113f03c4dfaa41
  intOpExpUnitTests10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.intOpExpUnitTests11) -}
f3c4d7a57dba7b79a9e4dc818b034e15
  intOpExpUnitTests11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("(/ exception)"#) -}
4a44191eb249b2c582d3d33914b05981
  intOpExpUnitTests12 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.intOpExpUnitTests20,
                  UnitTests.intOpExpUnitTests13
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
76d47881242a0c8c779896f595c251ab
  intOpExpUnitTests13 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.intOpExpUnitTests_actual1
                        UnitTests.intOpExpUnitTests_expect1 of wild {
                   GHC.Types.False -> UnitTests.intOpExpUnitTests14 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
b552182cf7a70ff61e981711f366e444
  intOpExpUnitTests14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
9911b6dce2258bea24870d8cadb64f99
  intOpExpUnitTests15 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 23#) -}
851a1a71e655e2d9be6801e86016f121
  intOpExpUnitTests16 :: Lib.Exp
  {- Strictness: m7,
     Unfolding: (Lib.IntOpExp
                   UnitTests.procFibHelp10
                   UnitTests.intOpExpUnitTests19
                   UnitTests.intOpExpUnitTests17) -}
8e917e79d5bbad5e1681c2663296f1dc
  intOpExpUnitTests17 :: Lib.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntExp UnitTests.intOpExpUnitTests18) -}
d50822f8ba175d0481160335f1d63d62
  intOpExpUnitTests18 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 7#) -}
ab0e97470b94b1564846b19c69185741
  intOpExpUnitTests19 :: Lib.Exp
  {- Strictness: m7,
     Unfolding: (Lib.IntOpExp
                   UnitTests.callStmtUnitTests17
                   UnitTests.boolOpExpUnitTests8
                   UnitTests.callStmtUnitTests79) -}
4b2795deba42ef9453d2047d17528449
  intOpExpUnitTests2 ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.intOpExpUnitTests12
                   UnitTests.intOpExpUnitTests3) -}
9bc9046711d088673bbd51961b3b4416
  intOpExpUnitTests20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.intOpExpUnitTests21) -}
384ead434c7a3428442a733553570519
  intOpExpUnitTests21 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("(/)"#) -}
42ac7ae65598b3395dd9a73b88525ad3
  intOpExpUnitTests22 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.intOpExpUnitTests27,
                  UnitTests.intOpExpUnitTests23
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
c6052f963ad2de59aaf4684180448118
  intOpExpUnitTests23 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.intOpExpUnitTests_actual2
                        UnitTests.boolOpExpUnitTests_expect of wild {
                   GHC.Types.False -> UnitTests.intOpExpUnitTests24 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
ba1c4b7d5c3ad468673df0ca592c97d3
  intOpExpUnitTests24 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
a4d401e1f087249332cc9c7ef92d490c
  intOpExpUnitTests25 :: Lib.Exp
  {- Strictness: m7,
     Unfolding: (Lib.IntOpExp
                   UnitTests.appExpUnitTests48
                   UnitTests.callStmtUnitTests48
                   UnitTests.intOpExpUnitTests26) -}
d3f9a34b3276561031fbd46428ec901a
  intOpExpUnitTests26 :: Lib.Exp
  {- Strictness: m7,
     Unfolding: (Lib.IntOpExp
                   UnitTests.ifExpUnitTests10
                   UnitTests.appExpUnitTests41
                   UnitTests.testenv10) -}
dc7dce64a8c3a6ae63b62be6e4d4e946
  intOpExpUnitTests27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.intOpExpUnitTests28) -}
2c57533d07450f351ebed6ab4e129cef
  intOpExpUnitTests28 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("(+ lift exception) "#) -}
50c0701fa5a475a3b21187dd2f3157f6
  intOpExpUnitTests29 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.intOpExpUnitTests33,
                  UnitTests.intOpExpUnitTests30
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
816d4462dc9fec051eb6deb88a9cf3a3
  intOpExpUnitTests3 ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.intOpExpUnitTests4
                   (GHC.Types.[]
                      @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion))) -}
14fe9883333f68a2b4e2d6c8d9fdd38b
  intOpExpUnitTests30 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.intOpExpUnitTests_actual3
                        UnitTests.appExpUnitTests_expect2 of wild {
                   GHC.Types.False -> UnitTests.intOpExpUnitTests31 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
edaecd0e1acf79ef02c29c329e9a4fe3
  intOpExpUnitTests31 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
7a6925ec676cb46db4f65c4148baaac4
  intOpExpUnitTests32 :: Lib.Exp
  {- Strictness: m7,
     Unfolding: (Lib.IntOpExp
                   UnitTests.appExpUnitTests48
                   UnitTests.appExpUnitTests39
                   UnitTests.appExpUnitTests41) -}
d9da2b59945b355624d5172981ef1c91
  intOpExpUnitTests33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.intOpExpUnitTests34) -}
fdedc9152599a163262295f3e540fe4c
  intOpExpUnitTests34 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("(+)"#) -}
2570bb4c98fc28cbe7d6a0605060428d
  intOpExpUnitTests4 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.intOpExpUnitTests10,
                  UnitTests.intOpExpUnitTests5
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
a42e00c61ba8cec9ff00873356352cbc
  intOpExpUnitTests5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.intOpExpUnitTests_actual
                        UnitTests.intOpExpUnitTests_expect of wild {
                   GHC.Types.False -> UnitTests.intOpExpUnitTests6 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
d3b776cf0b3dcafa5dc99eb04079f11e
  intOpExpUnitTests6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
7455e96fd1fcdf858641564a26add8ae
  intOpExpUnitTests7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.intOpExpUnitTests8) -}
cff14e57d1b51b667bcd5bb3fd9c46e3
  intOpExpUnitTests8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Division by 0"#) -}
012c9aa689882a1cd8ed62e2fbfbebb0
  intOpExpUnitTests9 :: Lib.Exp
  {- Strictness: m7,
     Unfolding: (Lib.IntOpExp
                   UnitTests.ifExpUnitTests10
                   UnitTests.callStmtUnitTests48
                   UnitTests.testenv10) -}
12c2e2e413bbdced24a6d02c9840bf33
  intOpExpUnitTests_actual :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.intOpExpUnitTests9
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
3eb1b0724427222a39e4645d4681a02e
  intOpExpUnitTests_actual1 :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.intOpExpUnitTests16
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
0a3bda745bb78eaf1bdd8cac690a7c4c
  intOpExpUnitTests_actual2 :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.intOpExpUnitTests25
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
58c4055299ed40bfe421017b85a36b6a
  intOpExpUnitTests_actual3 :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.intOpExpUnitTests32
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
60bfced494c3a9ac661bed3de002f460
  intOpExpUnitTests_expect :: Lib.Val
  {- Strictness: m4,
     Unfolding: (Lib.ExnVal UnitTests.intOpExpUnitTests7) -}
baf0a8d637d0fe150cec3fdf05e82367
  intOpExpUnitTests_expect1 :: Lib.Val
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntVal UnitTests.intOpExpUnitTests15) -}
0ebbacbde3070862c8f44ea58799fab9
  letExpUnitTests ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.letExpUnitTests28
                   UnitTests.letExpUnitTests1) -}
fa43faa87ef105069ef4c8795cb3ec52
  letExpUnitTests1 ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.letExpUnitTests20
                   UnitTests.letExpUnitTests2) -}
197ae0b0831132c4902b88052a071176
  letExpUnitTests10 :: ([GHC.Types.Char], Lib.Exp)
  {- Strictness: m,
     Unfolding: ((UnitTests.testenv6, UnitTests.appExpUnitTests21)) -}
92f8a353158b7293928b67b41b7fe8bf
  letExpUnitTests11 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.letExpUnitTests18,
                  UnitTests.letExpUnitTests12
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
fc22006a1edce8403f68ba883d499478
  letExpUnitTests12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.letExpUnitTests_actual1
                        UnitTests.testenv1_expect of wild {
                   GHC.Types.False -> UnitTests.letExpUnitTests13 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
c227be2cd2695e4aeaa073f7760bb9c5
  letExpUnitTests13 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
91cda80277d3ec97fa41934ea0570c40
  letExpUnitTests14 :: Lib.Exp
  {- Strictness: m4,
     Unfolding: (Lib.LetExp
                   UnitTests.letExpUnitTests16
                   UnitTests.letExpUnitTests15) -}
fa8c03d522e70c871677e426785f6948
  letExpUnitTests15 :: Lib.Exp
  {- Strictness: m5,
     Unfolding: (Lib.AppExp
                   UnitTests.appExpUnitTests45
                   UnitTests.appExpUnitTests29) -}
8727855fb389471c294761ce60c6ead3
  letExpUnitTests16 :: [(GHC.Base.String, Lib.Exp)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Lib.Exp)
                   UnitTests.letExpUnitTests17
                   (GHC.Types.[] @ (GHC.Base.String, Lib.Exp))) -}
75c2e445e90702dff93e444cc08f0416
  letExpUnitTests17 :: ([GHC.Types.Char], Lib.Exp)
  {- Strictness: m,
     Unfolding: ((UnitTests.appExpUnitTests46,
                  UnitTests.appExpUnitTests21)) -}
138741fc948b66b9a5d8c5b88c3e9c76
  letExpUnitTests18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.letExpUnitTests19) -}
5da448e7c895e50ba2b8e11bbb751506
  letExpUnitTests19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("non-trivial binding expression"#) -}
ec48389dbc088818bed1c240c4dac22c
  letExpUnitTests2 ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.letExpUnitTests11
                   UnitTests.letExpUnitTests3) -}
e7569fbc70546495ba46dd305e1ccf11
  letExpUnitTests20 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.letExpUnitTests26,
                  UnitTests.letExpUnitTests21
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
744786c6843a1cbad14dea754a6febd3
  letExpUnitTests21 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.letExpUnitTests_actual2
                        UnitTests.letExpUnitTests_expect of wild {
                   GHC.Types.False -> UnitTests.letExpUnitTests22 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
bafde834cd6e7b244ef389fc73729423
  letExpUnitTests22 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
2e871604e94cb6ee86a8d56169927691
  letExpUnitTests23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.letExpUnitTests24) -}
42149efa494f6871b5097a9bc1eb827d
  letExpUnitTests24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("No match in env"#) -}
ab350d991c33c7c0e777bcb1bec1666c
  letExpUnitTests25 :: Lib.Exp
  {- Strictness: m4,
     Unfolding: (Lib.LetExp
                   (GHC.Types.[] @ (GHC.Base.String, Lib.Exp))
                   UnitTests.callStmtUnitTests9) -}
b7f217d610c98437b199082e48500c7b
  letExpUnitTests26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.letExpUnitTests27) -}
7fa0da2bce5f829fd1d4f762947c3b74
  letExpUnitTests27 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Empty binding"#) -}
76c852e599bfecf3f191b97fa3a83cd3
  letExpUnitTests28 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.letExpUnitTests36,
                  UnitTests.letExpUnitTests29
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
c86fdf2c7f39b6c0d321807716fa5317
  letExpUnitTests29 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.letExpUnitTests_actual3
                        UnitTests.appExpUnitTests_expect2 of wild {
                   GHC.Types.False -> UnitTests.letExpUnitTests30 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
6d50a39aacb08835f1c9c3b336cbf27c
  letExpUnitTests3 ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.letExpUnitTests4
                   (GHC.Types.[]
                      @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion))) -}
45252cbbbde0c82796af5fc8b01789c2
  letExpUnitTests30 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
b3efd14edcec612ba0c3227d15782216
  letExpUnitTests31 :: Lib.Exp
  {- Strictness: m4,
     Unfolding: (Lib.LetExp
                   UnitTests.letExpUnitTests32
                   UnitTests.appExpUnitTests44) -}
5056d044ad59bb63cbc361c24d90276f
  letExpUnitTests32 :: [(GHC.Base.String, Lib.Exp)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Lib.Exp)
                   UnitTests.letExpUnitTests35
                   UnitTests.letExpUnitTests33) -}
8a77e9667ac95db6d2b212b951808a03
  letExpUnitTests33 :: [(GHC.Base.String, Lib.Exp)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Lib.Exp)
                   UnitTests.letExpUnitTests34
                   (GHC.Types.[] @ (GHC.Base.String, Lib.Exp))) -}
ccfdcee34095dbe38fa085630a3503d3
  letExpUnitTests34 :: ([GHC.Types.Char], Lib.Exp)
  {- Strictness: m,
     Unfolding: ((UnitTests.appExpUnitTests46,
                  UnitTests.appExpUnitTests39)) -}
867dd714c554ff81524831d1c71b9325
  letExpUnitTests35 :: ([GHC.Types.Char], Lib.Exp)
  {- Strictness: m,
     Unfolding: ((UnitTests.testenv6, UnitTests.appExpUnitTests41)) -}
962127acbda320637849b0f07ba4da24
  letExpUnitTests36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.letExpUnitTests37) -}
216660c584d396ed925cd5208a4de9ba
  letExpUnitTests37 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Multiple bindings"#) -}
654aac3595ab099397d401325f74174c
  letExpUnitTests4 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.appExpUnitTests23,
                  UnitTests.letExpUnitTests5
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
6453022da7fa2914d52e854dc7c3204e
  letExpUnitTests5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.letExpUnitTests_actual
                        UnitTests.testenv1_expect of wild {
                   GHC.Types.False -> UnitTests.letExpUnitTests6 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
dabe821bf717c5107f07a160b771d26e
  letExpUnitTests6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
1c323bcb92a5f61327d6b2583801640f
  letExpUnitTests7 :: Lib.Exp
  {- Strictness: m4,
     Unfolding: (Lib.LetExp
                   UnitTests.letExpUnitTests9
                   UnitTests.letExpUnitTests8) -}
2f076929b373f28be04729afa6564600
  letExpUnitTests8 :: Lib.Exp
  {- Strictness: m5,
     Unfolding: (Lib.AppExp
                   UnitTests.testenv23
                   UnitTests.appExpUnitTests29) -}
a5fe046d0398f32d6464d26e57ff5179
  letExpUnitTests9 :: [(GHC.Base.String, Lib.Exp)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Lib.Exp)
                   UnitTests.letExpUnitTests10
                   (GHC.Types.[] @ (GHC.Base.String, Lib.Exp))) -}
a1a70685506a9c641e0db1d6a78a7fbd
  letExpUnitTests_actual :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.letExpUnitTests7
                   UnitTests.testenv2) -}
c8ffa4e67c32a1318e74b4beab1403a9
  letExpUnitTests_actual1 :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.letExpUnitTests14
                   UnitTests.testenv2) -}
8e3d81f6a48e5e1f04931bdb3a8bd560
  letExpUnitTests_actual2 :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.letExpUnitTests25
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
c30df24cdd18b6bc277d4fb4b349ed7c
  letExpUnitTests_actual3 :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.letExpUnitTests31
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
fa06b9814632c1a4f4331070ee61b291
  letExpUnitTests_expect :: Lib.Val
  {- Strictness: m4,
     Unfolding: (Lib.ExnVal UnitTests.letExpUnitTests23) -}
3dbc8491aec7f7bc795ddd4e4ed3dc1e
  liftBoolOpUnitTests ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.liftBoolOpUnitTests13
                   UnitTests.liftBoolOpUnitTests1) -}
b4710fbdf79221df9fcd4f86dd90ac9a
  liftBoolOpUnitTests1 ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.liftBoolOpUnitTests8
                   UnitTests.liftBoolOpUnitTests2) -}
d92fc1c125095047dedfc77b298dbc1e
  liftBoolOpUnitTests10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
0638d7b6c88a17abd57ad930c2b45f16
  liftBoolOpUnitTests11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.liftBoolOpUnitTests12) -}
5a8c1659980f7285d425cb1b667955fb
  liftBoolOpUnitTests12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Lift ||"#) -}
35be527b8cc68fc8b63d739b27efa6b2
  liftBoolOpUnitTests13 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.liftBoolOpUnitTests16,
                  UnitTests.liftBoolOpUnitTests14
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
edd7e196a2c3dd2a85e10914d58595d2
  liftBoolOpUnitTests14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.appExpUnitTests_expect1
                        UnitTests.appExpUnitTests_expect1 of wild {
                   GHC.Types.False -> UnitTests.liftBoolOpUnitTests15 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
f58ae42b049ac253914e066c9758aee9
  liftBoolOpUnitTests15 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
0f3b73be03ee4573dbe07ee5221ac1a0
  liftBoolOpUnitTests16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.liftBoolOpUnitTests17) -}
6238260305b75e0ccbaabbf6629dc81a
  liftBoolOpUnitTests17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("lift &&"#) -}
7a365ef7e0c746331e91ecc7776fd51c
  liftBoolOpUnitTests2 ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.liftBoolOpUnitTests3
                   (GHC.Types.[]
                      @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion))) -}
9dc198587bacebca760dc2cf0b04c64a
  liftBoolOpUnitTests3 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.liftBoolOpUnitTests6,
                  UnitTests.liftBoolOpUnitTests4
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
1d3327a7c5168d2ba3b4711ad4ad905d
  liftBoolOpUnitTests4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        Lib.liftBoolOp1
                        UnitTests.boolOpExpUnitTests_expect of wild {
                   GHC.Types.False -> UnitTests.liftBoolOpUnitTests5 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
b176ba017041379de2ac1146ac0977ea
  liftBoolOpUnitTests5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
0fc5aae15b1300804fdfdb1dd108dd33
  liftBoolOpUnitTests6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.liftBoolOpUnitTests7) -}
1306b0bb872645549681e127bc7043a5
  liftBoolOpUnitTests7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("lift || (exception)"#) -}
1cd0525c81748d4653af78851c773911
  liftBoolOpUnitTests8 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.liftBoolOpUnitTests11,
                  UnitTests.liftBoolOpUnitTests9
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
7db8a9d42f679ab4ea3aaec88e597dcf
  liftBoolOpUnitTests9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.testenv1_expect
                        UnitTests.testenv1_expect of wild {
                   GHC.Types.False -> UnitTests.liftBoolOpUnitTests10 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
6d9f10182ce0204571e46c418243ef28
  liftCompOpUnitTests ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.liftCompOpUnitTests11
                   UnitTests.liftCompOpUnitTests1) -}
84279938e160a6a92f54526e8fce7137
  liftCompOpUnitTests1 ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.liftCompOpUnitTests6
                   UnitTests.liftCompOpUnitTests2) -}
de4d96f683da9dee03fc557cbc087c26
  liftCompOpUnitTests10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("lift >"#) -}
0379b5ebee364f1c4471ae2117de1722
  liftCompOpUnitTests11 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.liftCompOpUnitTests12,
                  UnitTests.liftBoolOpUnitTests14
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
5200dc4aabc4ee15d76266cdfb51a94a
  liftCompOpUnitTests12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.liftCompOpUnitTests13) -}
0c2b00bdb1616fbe20332456c8eafaff
  liftCompOpUnitTests13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("lift <="#) -}
26d45e5642cdeca99afab65419325141
  liftCompOpUnitTests2 ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.liftCompOpUnitTests3
                   (GHC.Types.[]
                      @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion))) -}
575fc6773ee6c0b23193d8d6f09b2581
  liftCompOpUnitTests3 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.liftCompOpUnitTests4,
                  UnitTests.liftBoolOpUnitTests4
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
b113f96cf9ddfb7bf3c7798d31e0eaf8
  liftCompOpUnitTests4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.liftCompOpUnitTests5) -}
9f1a6ae5783aca9ed850e601be12303b
  liftCompOpUnitTests5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("lift == (exception)"#) -}
ff5c0d3b176a4f4cd53a488c28c8364d
  liftCompOpUnitTests6 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.liftCompOpUnitTests9,
                  UnitTests.liftCompOpUnitTests7
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
4720bd1de5c18cab63e7bc7425120c9b
  liftCompOpUnitTests7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.testenv1_expect
                        UnitTests.testenv1_expect of wild {
                   GHC.Types.False -> UnitTests.liftCompOpUnitTests8 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
0ab3596692712f1f31bddae7bff8a1c5
  liftCompOpUnitTests8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
6f7d37852ea32b0597b5fc13e220dc8b
  liftCompOpUnitTests9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.liftCompOpUnitTests10) -}
3843ac9684d89cdc27c3d5b20b99e7c1
  procFibHelp :: Lib.Stmt
  {- Strictness: m5,
     Unfolding: (Lib.ProcedureStmt
                   UnitTests.procFibonacci9
                   UnitTests.procFibHelp23
                   UnitTests.procFibHelp1) -}
ab340deb0687ec82b0d1ad06dad08cdf
  procFibHelp1 :: Lib.Stmt
  {- Strictness: m4,
     Unfolding: (Lib.IfStmt
                   UnitTests.procFibHelp20
                   UnitTests.procFibHelp19
                   UnitTests.procFibHelp2) -}
695529148edfd9436c22f0e378d5ff78
  procFibHelp10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.procFibHelp11) -}
885add04e098707995520015e72a0eaf
  procFibHelp11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("-"#) -}
a5e51efa32acd0f43b2198ad324e1f4a
  procFibHelp12 :: Lib.Stmt
  {- Strictness: m1,
     Unfolding: (Lib.SetStmt
                   UnitTests.callStmtUnitTests68
                   UnitTests.procFibHelp13) -}
f777976e5e0417b2bba8bf2658afb3ba
  procFibHelp13 :: Lib.Exp
  {- Strictness: m10,
     Unfolding: (Lib.VarExp UnitTests.callStmtUnitTests57) -}
3cda89192f2c51643111a26ce4d9c6b7
  procFibHelp14 :: Lib.Stmt
  {- Strictness: m1,
     Unfolding: (Lib.SetStmt
                   UnitTests.callStmtUnitTests61
                   UnitTests.procFibHelp15) -}
3d47d95381fa4f966dcf7a6bb3f7aced
  procFibHelp15 :: Lib.Exp
  {- Strictness: m7,
     Unfolding: (Lib.IntOpExp
                   UnitTests.appExpUnitTests48
                   UnitTests.procFibHelp17
                   UnitTests.procFibHelp16) -}
ed43576dd2683bd1343e52caa6b71812
  procFibHelp16 :: Lib.Exp
  {- Strictness: m10,
     Unfolding: (Lib.VarExp UnitTests.callStmtUnitTests61) -}
3d9882e2ebdccfb19f11e4debbc8256f
  procFibHelp17 :: Lib.Exp
  {- Strictness: m10,
     Unfolding: (Lib.VarExp UnitTests.callStmtUnitTests68) -}
69fb0e982e2ed63c73bd5235252f2cdc
  procFibHelp18 :: Lib.Stmt
  {- Strictness: m1,
     Unfolding: (Lib.SetStmt
                   UnitTests.callStmtUnitTests57
                   UnitTests.procFibHelp16) -}
62337e7abf7e87013b2978028e8ec52f
  procFibHelp19 :: Lib.Stmt
  {- Strictness: m2,
     Unfolding: (Lib.PrintStmt UnitTests.procFibHelp16) -}
a798c4fcebdd02924583f3c35cd1aa7e
  procFibHelp2 :: Lib.Stmt
  {- Strictness: m7,
     Unfolding: (Lib.SeqStmt UnitTests.procFibHelp3) -}
d1794a4771914aa7e51e52d2018226e9
  procFibHelp20 :: Lib.Exp
  {- Strictness: m9,
     Unfolding: (Lib.CompOpExp
                   UnitTests.procFibHelp21
                   UnitTests.procFibonacci8
                   UnitTests.testenv10) -}
c2b826248ac2e14b154b5a7c0b16e322
  procFibHelp21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.procFibHelp22) -}
08a3caee122a0c084c7d437d6cc794cb
  procFibHelp22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<="#) -}
37de5a2f1c973da31ddc8bcbb5678332
  procFibHelp23 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   UnitTests.callStmtUnitTests64
                   (GHC.Types.[] @ GHC.Base.String)) -}
5e10d0927ad0264ef531df4f99dae309
  procFibHelp3 :: [Lib.Stmt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Stmt
                   UnitTests.procFibHelp18
                   UnitTests.procFibHelp4) -}
161349c86d12d3e482906f81abeb26d2
  procFibHelp4 :: [Lib.Stmt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Stmt
                   UnitTests.procFibHelp14
                   UnitTests.procFibHelp5) -}
66e9f9badcb805ed3370c8409afe571c
  procFibHelp5 :: [Lib.Stmt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Stmt
                   UnitTests.procFibHelp12
                   UnitTests.procFibHelp6) -}
05aae34333ab4240b3ad60d93d2d4a27
  procFibHelp6 :: [Lib.Stmt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Stmt
                   UnitTests.procFibHelp7
                   (GHC.Types.[] @ Lib.Stmt)) -}
4fe74d8c6b043733223c20b1f58e3c65
  procFibHelp7 :: Lib.Stmt
  {- Strictness: m6,
     Unfolding: (Lib.CallStmt
                   UnitTests.procFibonacci9
                   UnitTests.procFibHelp8) -}
4a86584182b4593d6a1139821bdc58e3
  procFibHelp8 :: [Lib.Exp]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Exp
                   UnitTests.procFibHelp9
                   (GHC.Types.[] @ Lib.Exp)) -}
68a087aecd166aa9a3ec5dd2451e0180
  procFibHelp9 :: Lib.Exp
  {- Strictness: m7,
     Unfolding: (Lib.IntOpExp
                   UnitTests.procFibHelp10
                   UnitTests.procFibonacci8
                   UnitTests.callStmtUnitTests7) -}
8feda77d3eb77c73f0b5cefe17cbbf57
  procFibonacci :: Lib.Stmt
  {- Strictness: m5,
     Unfolding: (Lib.ProcedureStmt
                   UnitTests.procFibonacci13
                   UnitTests.procFibHelp23
                   UnitTests.procFibonacci1) -}
64ea808bc4b9abf874bfcbe289fde409
  procFibonacci1 :: Lib.Stmt
  {- Strictness: m7,
     Unfolding: (Lib.SeqStmt UnitTests.procFibonacci2) -}
a4a6eb2e2a8c914555eb42ac9ffd4881
  procFibonacci10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("fibHelper"#) -}
9543dce817f01cf7cd19f1017ed41286
  procFibonacci11 :: Lib.Stmt
  {- Strictness: m1,
     Unfolding: (Lib.SetStmt
                   UnitTests.callStmtUnitTests61
                   UnitTests.callStmtUnitTests7) -}
b95e0602632c7444f671ce9dc59907ee
  procFibonacci12 :: Lib.Stmt
  {- Strictness: m1,
     Unfolding: (Lib.SetStmt
                   UnitTests.callStmtUnitTests68
                   UnitTests.testenv10) -}
71f327855314183b641c8181fe612148
  procFibonacci13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.procFibonacci14) -}
56aa68c09c4e7a58867d166f6f2a2a47
  procFibonacci14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Fibonacci"#) -}
7bdcf15d238d2ecd352cfd0d4019018b
  procFibonacci2 :: [Lib.Stmt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Stmt
                   UnitTests.procFibHelp
                   UnitTests.procFibonacci3) -}
d6f7762a13c9af77bebe9756b61ed7a6
  procFibonacci3 :: [Lib.Stmt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Stmt
                   UnitTests.procFibonacci12
                   UnitTests.procFibonacci4) -}
1236c028806454c07cedbfbf6d7a457c
  procFibonacci4 :: [Lib.Stmt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Stmt
                   UnitTests.procFibonacci11
                   UnitTests.procFibonacci5) -}
7ff86883962bfc8c698bfb1427c183bd
  procFibonacci5 :: [Lib.Stmt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Stmt
                   UnitTests.procFibonacci6
                   (GHC.Types.[] @ Lib.Stmt)) -}
3a5efd0a5c3a2272fdd08d93a83e3844
  procFibonacci6 :: Lib.Stmt
  {- Strictness: m6,
     Unfolding: (Lib.CallStmt
                   UnitTests.procFibonacci9
                   UnitTests.procFibonacci7) -}
d90b44fac0e5d67a6365eb2a495518d6
  procFibonacci7 :: [Lib.Exp]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Exp
                   UnitTests.procFibonacci8
                   (GHC.Types.[] @ Lib.Exp)) -}
23effbf2176deca1e2b2685b86d2b409
  procFibonacci8 :: Lib.Exp
  {- Strictness: m10,
     Unfolding: (Lib.VarExp UnitTests.callStmtUnitTests64) -}
0697c85227cd40cb8fe03a3571c7f648
  procFibonacci9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.procFibonacci10) -}
c8fd26e478e46e62828c6f6df6eed9a7
  procStmtUnitTests ::
    [([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.procStmtUnitTests11
                   UnitTests.procStmtUnitTests1) -}
39d224739af792fbfe4f5c4b2e04ffc3
  procStmtUnitTests1 ::
    [([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.procStmtUnitTests2
                   (GHC.Types.[]
                      @ ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion))) -}
ef365b9ad94fb4a9ca6129744dfc28dc
  procStmtUnitTests10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Environment preserved"#) -}
d0e00d23ef1838f2e9f98e45d869618e
  procStmtUnitTests11 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.ifStmtUnitTests26,
                  UnitTests.procStmtUnitTests12
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
5fc076e02c89692052afca92d456e345
  procStmtUnitTests12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$wexec
                        UnitTests.procStmtUnitTests5
                        (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt)
                        (Data.HashMap.Base.Empty
                           @ GHC.Base.String
                           @ Lib.Val) of ww { (#,,#) ww1 ww2 ww3 ->
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 0> {- Strictness: x -}
                   = Test.Tasty.HUnit.Orig.assertEqual2
                       @ Lib.Result
                       (GHC.Types.[] @ GHC.Types.Char)
                       UnitTests.$s$fShow(,,)_$cshow
                       (ww1, ww2, ww3)
                       UnitTests.procStmtUnitTests13
                       eta
                       UnitTests.assertEqual'2
                         `cast`
                       (Sym (GHC.Classes.N:IP[0]
                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                 } in
                 case GHC.Classes.$fEqModule_$s$c==
                        ww1
                        (GHC.Types.[] @ GHC.Types.Char) of wild {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case Data.HashMap.Base.equal
                             @ [GHC.Types.Char]
                             @ [GHC.Types.Char]
                             @ Lib.Stmt
                             @ Lib.Stmt
                             GHC.Base.eqString
                             Lib.$fEqStmt_$c==
                             ww2
                             UnitTests.procStmtUnitTests4 of wild1 {
                        GHC.Types.False -> $j
                        GHC.Types.True
                        -> case Data.HashMap.Base.equal
                                  @ [GHC.Types.Char]
                                  @ [GHC.Types.Char]
                                  @ Lib.Val
                                  @ Lib.Val
                                  GHC.Base.eqString
                                  Lib.$fEqVal_$c==
                                  ww3
                                  (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val) of wild2 {
                             GHC.Types.False -> $j
                             GHC.Types.True -> (# eta, GHC.Tuple.() #) } } } }) -}
d112f952e591fb6728d42ff0a60cfd34
  procStmtUnitTests13 ::
    ([GHC.Types.Char],
     Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Stmt,
     Data.HashMap.Base.HashMap GHC.Base.String Lib.Val)
  {- Strictness: m,
     Unfolding: ((GHC.Types.[] @ GHC.Types.Char,
                  UnitTests.procStmtUnitTests4,
                  Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
ad82de3923ff0cd126d8371ce1ec7681
  procStmtUnitTests2 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.procStmtUnitTests9,
                  UnitTests.procStmtUnitTests3
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
1467edc67fcf1a86fa4b6d4659e43dad
  procStmtUnitTests3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$wexec
                        UnitTests.procStmtUnitTests5
                        (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt)
                        UnitTests.testenv2 of ww { (#,,#) ww1 ww2 ww3 ->
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 0> {- Strictness: x -}
                   = Test.Tasty.HUnit.Orig.assertEqual2
                       @ Lib.Result
                       (GHC.Types.[] @ GHC.Types.Char)
                       UnitTests.$s$fShow(,,)_$cshow
                       (ww1, ww2, ww3)
                       UnitTests.procStmtUnitTests8
                       eta
                       UnitTests.assertEqual'2
                         `cast`
                       (Sym (GHC.Classes.N:IP[0]
                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                 } in
                 case GHC.Classes.$fEqModule_$s$c==
                        ww1
                        (GHC.Types.[] @ GHC.Types.Char) of wild {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case Data.HashMap.Base.equal
                             @ [GHC.Types.Char]
                             @ [GHC.Types.Char]
                             @ Lib.Stmt
                             @ Lib.Stmt
                             GHC.Base.eqString
                             Lib.$fEqStmt_$c==
                             ww2
                             UnitTests.procStmtUnitTests4 of wild1 {
                        GHC.Types.False -> $j
                        GHC.Types.True
                        -> case Data.HashMap.Base.equal
                                  @ [GHC.Types.Char]
                                  @ [GHC.Types.Char]
                                  @ Lib.Val
                                  @ Lib.Val
                                  GHC.Base.eqString
                                  Lib.$fEqVal_$c==
                                  ww3
                                  UnitTests.testenv2 of wild2 {
                             GHC.Types.False -> $j
                             GHC.Types.True -> (# eta, GHC.Tuple.() #) } } } }) -}
7c7e3a31b925ba318b611cf4a734400d
  procStmtUnitTests4 ::
    Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Stmt
  {- Unfolding: (UnitTests.$sunsafeInsert
                   @ Lib.Stmt
                   UnitTests.procStmtUnitTests6
                   UnitTests.procStmtUnitTests5
                   (Data.HashMap.Base.Empty @ [GHC.Types.Char] @ Lib.Stmt)) -}
9d2c7ad1b81077249395d75456452dfb
  procStmtUnitTests5 :: Lib.Stmt
  {- Strictness: m5,
     Unfolding: (Lib.ProcedureStmt
                   UnitTests.procStmtUnitTests6
                   (GHC.Types.[] @ GHC.Base.String)
                   UnitTests.callStmtUnitTests43) -}
6ff99014a32175d24a2a7272151e4c59
  procStmtUnitTests6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.procStmtUnitTests7) -}
8a842b6205436d0d75237c1cc8d9e303
  procStmtUnitTests7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("p"#) -}
e6ce85f5a8e42169c20850d761ee276c
  procStmtUnitTests8 ::
    ([GHC.Types.Char],
     Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Stmt,
     Data.HashMap.Base.HashMap GHC.Base.String Lib.Val)
  {- Strictness: m,
     Unfolding: ((GHC.Types.[] @ GHC.Types.Char,
                  UnitTests.procStmtUnitTests4, UnitTests.testenv2)) -}
0d862d698c922d581eec69a6f8b73a0c
  procStmtUnitTests9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.procStmtUnitTests10) -}
cae501def3f57c9ee9dd3382a4d95174
  seqStmtUnitTests ::
    [([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.seqStmtUnitTests29
                   UnitTests.seqStmtUnitTests1) -}
af401402431636717e62fd81b06ea2eb
  seqStmtUnitTests1 ::
    [([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.seqStmtUnitTests12
                   UnitTests.seqStmtUnitTests2) -}
04ddbf334c3a7eaa1ad6fbbf70b7aafe
  seqStmtUnitTests10 :: [Lib.Stmt]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Stmt
                   UnitTests.seqStmtUnitTests11
                   (GHC.Types.[] @ Lib.Stmt)) -}
fe74e01120532ea1633184ed8c3d852e
  seqStmtUnitTests11 :: Lib.Stmt
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Lib.PrintStmt UnitTests.callStmtUnitTests15) -}
f9a0c4a377ac11bb9fc01c7d0ee2b406
  seqStmtUnitTests12 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.seqStmtUnitTests27,
                  UnitTests.seqStmtUnitTests13
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
42ea91f65431cf7c51115d326490e259
  seqStmtUnitTests13 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$wexec
                        UnitTests.seqStmtUnitTests20
                        (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt)
                        UnitTests.testenv2 of ww { (#,,#) ww1 ww2 ww3 ->
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 0> {- Strictness: x -}
                   = Test.Tasty.HUnit.Orig.assertEqual2
                       @ Lib.Result
                       (GHC.Types.[] @ GHC.Types.Char)
                       UnitTests.$s$fShow(,,)_$cshow
                       (ww1, ww2, ww3)
                       UnitTests.seqStmtUnitTests19
                       eta
                       UnitTests.assertEqual'2
                         `cast`
                       (Sym (GHC.Classes.N:IP[0]
                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                 } in
                 case GHC.Classes.$fEqModule_$s$c==
                        ww1
                        UnitTests.seqStmtUnitTests17 of wild {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case Data.HashMap.Base.equal
                             @ [GHC.Types.Char]
                             @ [GHC.Types.Char]
                             @ Lib.Stmt
                             @ Lib.Stmt
                             GHC.Base.eqString
                             Lib.$fEqStmt_$c==
                             ww2
                             (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt) of wild1 {
                        GHC.Types.False -> $j
                        GHC.Types.True
                        -> case Data.HashMap.Base.equal
                                  @ [GHC.Types.Char]
                                  @ [GHC.Types.Char]
                                  @ Lib.Val
                                  @ Lib.Val
                                  GHC.Base.eqString
                                  Lib.$fEqVal_$c==
                                  ww3
                                  UnitTests.seqStmtUnitTests14 of wild2 {
                             GHC.Types.False -> $j
                             GHC.Types.True -> (# eta, GHC.Tuple.() #) } } } }) -}
f875ea71a2a6ac9228258b239b1f6e88
  seqStmtUnitTests14 ::
    Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val
  {- Unfolding: (UnitTests.$sinsert
                   @ Lib.Val
                   UnitTests.testenv6
                   UnitTests.seqStmtUnitTests15
                   UnitTests.testenv2) -}
d344b41c206edc252cf851575d654fff
  seqStmtUnitTests15 :: Lib.Val
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntVal UnitTests.seqStmtUnitTests16) -}
ffcdba8b4ef8fedc68534f6981d773fa
  seqStmtUnitTests16 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 24#) -}
7fc035ffa0f761e900269ee4535c7374
  seqStmtUnitTests17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.seqStmtUnitTests18) -}
d8cdff0f51ca8fe875a0f36b1df8c880
  seqStmtUnitTests18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("4224"#) -}
9727f928f98e052c7c69efa14766ffb3
  seqStmtUnitTests19 ::
    ([GHC.Types.Char],
     Data.HashMap.Base.HashMap GHC.Base.String Lib.Stmt,
     Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val)
  {- Strictness: m,
     Unfolding: ((UnitTests.seqStmtUnitTests17,
                  Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt,
                  UnitTests.seqStmtUnitTests14)) -}
b30befadb6f64785cbb7e271f89fb732
  seqStmtUnitTests2 ::
    [([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.seqStmtUnitTests3
                   (GHC.Types.[]
                      @ ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion))) -}
3d15905dc2ec4ea9d827c4237b0418de
  seqStmtUnitTests20 :: Lib.Stmt
  {- Strictness: m7,
     Unfolding: (Lib.SeqStmt UnitTests.seqStmtUnitTests21) -}
70d9f584bc0a06db758dfad5779180d6
  seqStmtUnitTests21 :: [Lib.Stmt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Stmt
                   UnitTests.seqStmtUnitTests24
                   UnitTests.seqStmtUnitTests22) -}
9616bf9d821db41f615f7acd24adfda9
  seqStmtUnitTests22 :: [Lib.Stmt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Stmt
                   UnitTests.seqStmtUnitTests25
                   UnitTests.seqStmtUnitTests23) -}
9b4b95546a4e214bdca70e570cacbe54
  seqStmtUnitTests23 :: [Lib.Stmt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Stmt
                   UnitTests.seqStmtUnitTests24
                   (GHC.Types.[] @ Lib.Stmt)) -}
d0940371f05332fdac2022c47e5430b7
  seqStmtUnitTests24 :: Lib.Stmt
  {- Strictness: m2,
     Unfolding: (Lib.PrintStmt UnitTests.testenv23) -}
da11675772a552025609aa01bfb2cda4
  seqStmtUnitTests25 :: Lib.Stmt
  {- Strictness: m1,
     Unfolding: (Lib.SetStmt
                   UnitTests.testenv6
                   UnitTests.seqStmtUnitTests26) -}
0ccdeb841a9df7181d9f10462a898e46
  seqStmtUnitTests26 :: Lib.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntExp UnitTests.seqStmtUnitTests16) -}
60811d976be5b88b5d3f685cc05a1071
  seqStmtUnitTests27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.seqStmtUnitTests28) -}
cde072636c0e59542e44e5640caacce4
  seqStmtUnitTests28 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Variable Shadowing"#) -}
d80939ad7fcd492fac7582cc28409a53
  seqStmtUnitTests29 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.seqStmtUnitTests37,
                  UnitTests.seqStmtUnitTests30
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
39e8fadfbeeef49c1bbc8433d1cfd63b
  seqStmtUnitTests3 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.appExpUnitTests10,
                  UnitTests.seqStmtUnitTests4
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
0bc8f184a1d667700424a73f3c447c7a
  seqStmtUnitTests30 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$wexec
                        UnitTests.seqStmtUnitTests34
                        (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt)
                        (Data.HashMap.Base.Empty
                           @ GHC.Base.String
                           @ Lib.Val) of ww { (#,,#) ww1 ww2 ww3 ->
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 0> {- Strictness: x -}
                   = Test.Tasty.HUnit.Orig.assertEqual2
                       @ Lib.Result
                       (GHC.Types.[] @ GHC.Types.Char)
                       UnitTests.$s$fShow(,,)_$cshow
                       (ww1, ww2, ww3)
                       UnitTests.seqStmtUnitTests33
                       eta
                       UnitTests.assertEqual'2
                         `cast`
                       (Sym (GHC.Classes.N:IP[0]
                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                 } in
                 case GHC.Classes.$fEqModule_$s$c==
                        ww1
                        UnitTests.seqStmtUnitTests31 of wild {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case Data.HashMap.Base.equal
                             @ [GHC.Types.Char]
                             @ [GHC.Types.Char]
                             @ Lib.Stmt
                             @ Lib.Stmt
                             GHC.Base.eqString
                             Lib.$fEqStmt_$c==
                             ww2
                             (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt) of wild1 {
                        GHC.Types.False -> $j
                        GHC.Types.True
                        -> case Data.HashMap.Base.equal
                                  @ [GHC.Types.Char]
                                  @ [GHC.Types.Char]
                                  @ Lib.Val
                                  @ Lib.Val
                                  GHC.Base.eqString
                                  Lib.$fEqVal_$c==
                                  ww3
                                  (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val) of wild2 {
                             GHC.Types.False -> $j
                             GHC.Types.True -> (# eta, GHC.Tuple.() #) } } } }) -}
673b25f43fee4e14c23d5cfa2631e72a
  seqStmtUnitTests31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.seqStmtUnitTests32) -}
7606297557d1b0d5be5040b3bc48457b
  seqStmtUnitTests32 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("42"#) -}
5084cd46041cb608d9a9db5ea67fec79
  seqStmtUnitTests33 ::
    ([GHC.Types.Char],
     Data.HashMap.Base.HashMap GHC.Base.String Lib.Stmt,
     Data.HashMap.Base.HashMap GHC.Base.String Lib.Val)
  {- Strictness: m,
     Unfolding: ((UnitTests.seqStmtUnitTests31,
                  Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt,
                  Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
4d70d8524393734f1de4ca64905bf273
  seqStmtUnitTests34 :: Lib.Stmt
  {- HasNoCafRefs, Strictness: m7,
     Unfolding: (Lib.SeqStmt UnitTests.seqStmtUnitTests35) -}
32499451dae9532d4b9b8f5903cfa2ca
  seqStmtUnitTests35 :: [Lib.Stmt]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Stmt
                   UnitTests.seqStmtUnitTests36
                   UnitTests.seqStmtUnitTests10) -}
9c218b1f5c7bbbf44b9b5c67e6a2d91c
  seqStmtUnitTests36 :: Lib.Stmt
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Lib.PrintStmt UnitTests.appExpUnitTests41) -}
ae7093667e10ca9621f810d60dd5ec77
  seqStmtUnitTests37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.seqStmtUnitTests38) -}
4c92e203d1537a5f1e6d16c0b48be762
  seqStmtUnitTests38 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Prints"#) -}
32c6711102c991b5dd97e86360734d3f
  seqStmtUnitTests4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$wexec
                        UnitTests.seqStmtUnitTests8
                        (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt)
                        (Data.HashMap.Base.Empty
                           @ GHC.Base.String
                           @ Lib.Val) of ww { (#,,#) ww1 ww2 ww3 ->
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 0> {- Strictness: x -}
                   = Test.Tasty.HUnit.Orig.assertEqual2
                       @ Lib.Result
                       (GHC.Types.[] @ GHC.Types.Char)
                       UnitTests.$s$fShow(,,)_$cshow
                       (ww1, ww2, ww3)
                       UnitTests.seqStmtUnitTests7
                       eta
                       UnitTests.assertEqual'2
                         `cast`
                       (Sym (GHC.Classes.N:IP[0]
                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                 } in
                 case GHC.Classes.$fEqModule_$s$c==
                        ww1
                        UnitTests.seqStmtUnitTests5 of wild {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case Data.HashMap.Base.equal
                             @ [GHC.Types.Char]
                             @ [GHC.Types.Char]
                             @ Lib.Stmt
                             @ Lib.Stmt
                             GHC.Base.eqString
                             Lib.$fEqStmt_$c==
                             ww2
                             (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt) of wild1 {
                        GHC.Types.False -> $j
                        GHC.Types.True
                        -> case Data.HashMap.Base.equal
                                  @ [GHC.Types.Char]
                                  @ [GHC.Types.Char]
                                  @ Lib.Val
                                  @ Lib.Val
                                  GHC.Base.eqString
                                  Lib.$fEqVal_$c==
                                  ww3
                                  (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val) of wild2 {
                             GHC.Types.False -> $j
                             GHC.Types.True -> (# eta, GHC.Tuple.() #) } } } }) -}
a278f33b79e10bd82bf55102d7df3439
  seqStmtUnitTests5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.seqStmtUnitTests6) -}
4a2325058c5ebecbf86ccfcbf71a2538
  seqStmtUnitTests6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("exn: No match in env2"#) -}
2d610d68c13d7098ef39b86315bcc67c
  seqStmtUnitTests7 ::
    ([GHC.Types.Char],
     Data.HashMap.Base.HashMap GHC.Base.String Lib.Stmt,
     Data.HashMap.Base.HashMap GHC.Base.String Lib.Val)
  {- Strictness: m,
     Unfolding: ((UnitTests.seqStmtUnitTests5,
                  Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt,
                  Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
5a11dba488dfbe8bb815400f86e2af4e
  seqStmtUnitTests8 :: Lib.Stmt
  {- Strictness: m7,
     Unfolding: (Lib.SeqStmt UnitTests.seqStmtUnitTests9) -}
5cce82bf899cc042a28979b82949d806
  seqStmtUnitTests9 :: [Lib.Stmt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Lib.Stmt
                   UnitTests.callStmtUnitTests43
                   UnitTests.seqStmtUnitTests10) -}
ebd34a549b3b1983f6bc74c376d88bae
  setStmtUnitTests ::
    [([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.setStmtUnitTests11
                   UnitTests.setStmtUnitTests1) -}
f7aeba65487a87a0b220c6b9aaf0fed7
  setStmtUnitTests1 ::
    [([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.setStmtUnitTests2
                   (GHC.Types.[]
                      @ ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion))) -}
b9c9e94ad62c56a6f7df77e9e38562af
  setStmtUnitTests10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Variable shadowing"#) -}
d6b1a6193cd35bde324213aafe58e36e
  setStmtUnitTests11 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.ifStmtUnitTests26,
                  UnitTests.setStmtUnitTests12
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
0672d1af2c00e58452b796c8155548d4
  setStmtUnitTests12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$wexec
                        UnitTests.setStmtUnitTests8
                        (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt)
                        (Data.HashMap.Base.Empty
                           @ GHC.Base.String
                           @ Lib.Val) of ww { (#,,#) ww1 ww2 ww3 ->
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 0> {- Strictness: x -}
                   = Test.Tasty.HUnit.Orig.assertEqual2
                       @ Lib.Result
                       (GHC.Types.[] @ GHC.Types.Char)
                       UnitTests.$s$fShow(,,)_$cshow
                       (ww1, ww2, ww3)
                       UnitTests.setStmtUnitTests5
                       eta
                       UnitTests.assertEqual'2
                         `cast`
                       (Sym (GHC.Classes.N:IP[0]
                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                 } in
                 case GHC.Classes.$fEqModule_$s$c==
                        ww1
                        (GHC.Types.[] @ GHC.Types.Char) of wild {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case Data.HashMap.Base.equal
                             @ [GHC.Types.Char]
                             @ [GHC.Types.Char]
                             @ Lib.Stmt
                             @ Lib.Stmt
                             GHC.Base.eqString
                             Lib.$fEqStmt_$c==
                             ww2
                             (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt) of wild1 {
                        GHC.Types.False -> $j
                        GHC.Types.True
                        -> case Data.HashMap.Base.equal
                                  @ [GHC.Types.Char]
                                  @ [GHC.Types.Char]
                                  @ Lib.Val
                                  @ Lib.Val
                                  GHC.Base.eqString
                                  Lib.$fEqVal_$c==
                                  ww3
                                  UnitTests.setStmtUnitTests4 of wild2 {
                             GHC.Types.False -> $j
                             GHC.Types.True -> (# eta, GHC.Tuple.() #) } } } }) -}
3031e85c36b223142430606a5d0607fc
  setStmtUnitTests2 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.setStmtUnitTests9,
                  UnitTests.setStmtUnitTests3
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
2b67066c9fd3551f0a3a7f1fad8bec9c
  setStmtUnitTests3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$wexec
                        UnitTests.setStmtUnitTests8
                        (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt)
                        UnitTests.setStmtUnitTests6 of ww { (#,,#) ww1 ww2 ww3 ->
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 0> {- Strictness: x -}
                   = Test.Tasty.HUnit.Orig.assertEqual2
                       @ Lib.Result
                       (GHC.Types.[] @ GHC.Types.Char)
                       UnitTests.$s$fShow(,,)_$cshow
                       (ww1, ww2, ww3)
                       UnitTests.setStmtUnitTests5
                       eta
                       UnitTests.assertEqual'2
                         `cast`
                       (Sym (GHC.Classes.N:IP[0]
                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                 } in
                 case GHC.Classes.$fEqModule_$s$c==
                        ww1
                        (GHC.Types.[] @ GHC.Types.Char) of wild {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case Data.HashMap.Base.equal
                             @ [GHC.Types.Char]
                             @ [GHC.Types.Char]
                             @ Lib.Stmt
                             @ Lib.Stmt
                             GHC.Base.eqString
                             Lib.$fEqStmt_$c==
                             ww2
                             (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt) of wild1 {
                        GHC.Types.False -> $j
                        GHC.Types.True
                        -> case Data.HashMap.Base.equal
                                  @ [GHC.Types.Char]
                                  @ [GHC.Types.Char]
                                  @ Lib.Val
                                  @ Lib.Val
                                  GHC.Base.eqString
                                  Lib.$fEqVal_$c==
                                  ww3
                                  UnitTests.setStmtUnitTests4 of wild2 {
                             GHC.Types.False -> $j
                             GHC.Types.True -> (# eta, GHC.Tuple.() #) } } } }) -}
9a867a6cda81acf85f4f2b01a8e7be15
  setStmtUnitTests4 ::
    Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val
  {- Unfolding: (UnitTests.$sunsafeInsert
                   @ Lib.Val
                   UnitTests.callStmtUnitTests10
                   UnitTests.ifExpUnitTests_expect2
                   (Data.HashMap.Base.Empty @ [GHC.Types.Char] @ Lib.Val)) -}
0cf5d5606bd5210e4b7fe8fae4cc9aae
  setStmtUnitTests5 ::
    ([GHC.Types.Char],
     Data.HashMap.Base.HashMap GHC.Base.String Lib.Stmt,
     Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val)
  {- Strictness: m,
     Unfolding: ((GHC.Types.[] @ GHC.Types.Char,
                  Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Stmt,
                  UnitTests.setStmtUnitTests4)) -}
b59af0aabe678b40fcd61c9b9777762b
  setStmtUnitTests6 ::
    Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val
  {- Unfolding: (UnitTests.$sunsafeInsert
                   @ Lib.Val
                   UnitTests.callStmtUnitTests10
                   UnitTests.setStmtUnitTests7
                   (Data.HashMap.Base.Empty @ [GHC.Types.Char] @ Lib.Val)) -}
5701d78a2b8d0345b4fbeff5d3a8cb94
  setStmtUnitTests7 :: Lib.Val
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntVal UnitTests.callStmtUnitTests49) -}
750c072dad1c8c9a9dee73898732dcac
  setStmtUnitTests8 :: Lib.Stmt
  {- Strictness: m1,
     Unfolding: (Lib.SetStmt
                   UnitTests.callStmtUnitTests10
                   UnitTests.appExpUnitTests39) -}
10094181c994641f51766926b0daf230
  setStmtUnitTests9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.setStmtUnitTests10) -}
8bc8234096407a9204b35e981dab35ea
  testenv1 :: Data.HashMap.Base.HashMap [GHC.Types.Char] Lib.Val
  {- Unfolding: (case UnitTests.$sunsafeInsert
                        @ Lib.Val
                        (GHC.CString.unpackCString# UnitTests.testenv20)
                        UnitTests.testenv18
                        (Data.HashMap.Base.Empty
                           @ [GHC.Types.Char]
                           @ Lib.Val) of z { DEFAULT ->
                 case UnitTests.$sunsafeInsert
                        @ Lib.Val
                        (GHC.CString.unpackCString# UnitTests.testenv17)
                        UnitTests.testenv1_expect
                        z of z1 { DEFAULT ->
                 case UnitTests.$sunsafeInsert
                        @ Lib.Val
                        (GHC.CString.unpackCString# UnitTests.testenv16)
                        UnitTests.testenv13
                        z1 of z2 { DEFAULT ->
                 UnitTests.$sunsafeInsert
                   @ Lib.Val
                   (GHC.CString.unpackCString# UnitTests.testenv12)
                   UnitTests.testenv9
                   z2 } } }) -}
2c44c1dd2ff2a89f1d3edcd26d6c8e52
  testenv10 :: Lib.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntExp UnitTests.testenv11) -}
1acd796b4e0dd7454d75f568b7258813
  testenv11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
d7deb66001cb97a7e55bcaf980245ed9
  testenv12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("f"#) -}
c37f878125a295e10ca36dfb5f424ad4
  testenv13 :: Lib.Val
  {- Strictness: m4, Unfolding: (Lib.ExnVal UnitTests.testenv14) -}
d6ea6d7f74ed2be15c7cc0051b3072b8
  testenv14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# UnitTests.testenv15) -}
29c3578a6ec6c35226aeb895be55e856
  testenv15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ZzZz"#) -}
712b3b19eab71550fb230676656c9e19
  testenv16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("z"#) -}
2a8256aa93fc26a021741c6da0529813
  testenv17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("y"#) -}
d59b0ba7bf475d0eaffc1a39db9cd1b8
  testenv18 :: Lib.Val
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntVal UnitTests.testenv19) -}
843b7a0ff84f72485113114e0393e256
  testenv19 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
8599f3345eb219b8ae7adb2059ce9c94
  testenv1_expect :: Lib.Val
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Lib.BoolVal GHC.Types.True) -}
4a17d05a2d32dbf4b53128856274b6a7
  testenv2 :: Data.HashMap.Base.HashMap GHC.Base.String Lib.Val
  {- Unfolding: (case UnitTests.$sunsafeInsert
                        @ Lib.Val
                        (GHC.CString.unpackCString# UnitTests.testenv27)
                        UnitTests.testenv8
                        (Data.HashMap.Base.Empty
                           @ [GHC.Types.Char]
                           @ Lib.Val) of z { DEFAULT ->
                 UnitTests.$sunsafeInsert
                   @ Lib.Val
                   UnitTests.testenv6
                   UnitTests.testenv4
                   z }) -}
0ca0930bd7eb421e7958eec061511d0e
  testenv20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("x"#) -}
f69381ae8cf2be68a5c234fed2c4351a
  testenv21 :: Lib.Exp
  {- Strictness: m8,
     Unfolding: (Lib.BoolOpExp
                   UnitTests.testenv24
                   UnitTests.testenv23
                   UnitTests.testenv22) -}
f8786b6c84ea52548fec2956662127e5
  testenv22 :: Lib.Exp
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Lib.BoolExp GHC.Types.True) -}
e8d7813b2c91801ba643376fc58a12c4
  testenv23 :: Lib.Exp
  {- Strictness: m10, Unfolding: (Lib.VarExp UnitTests.testenv6) -}
6740f0e2d4101a4650b29614db3a42b0
  testenv24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# UnitTests.testenv25) -}
033edd1986039c0f041de2b94dd166c2
  testenv25 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("and"#) -}
c657739c9e4c5505451ede9607348675
  testenv26 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   UnitTests.testenv6
                   (GHC.Types.[] @ GHC.Base.String)) -}
688bdec64b61b6b07dccfa8306aad790
  testenv27 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("k"#) -}
4889d3634d825f539cd4042dae835136
  testenv4 :: Lib.Val
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntVal UnitTests.testenv5) -}
45d4ecccafb4b53aa37cec61ba27c1da
  testenv5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 42#) -}
0fdb5ee7ddd1268b7c6cd357ddf4cc9d
  testenv6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# UnitTests.testenv7) -}
ba888ee31a57b387665e04070cfbb59e
  testenv7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("a"#) -}
f258c6e8678db27867dca8fcd8e6857c
  testenv8 :: Lib.Val
  {- Strictness: m3,
     Unfolding: (Lib.CloVal
                   UnitTests.testenv26
                   UnitTests.testenv21
                   UnitTests.testenv1) -}
07cd4e9615146791c73a9d433393b3b3
  testenv9 :: Lib.Val
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Lib.CloVal
                   (GHC.Types.[] @ GHC.Base.String)
                   UnitTests.testenv10
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
389440074f9f6ad5711482b963627965
  varExpUnitTests ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.varExpUnitTests13
                   UnitTests.varExpUnitTests1) -}
75fe3c39d9be88a8391a60fce5b1bbae
  varExpUnitTests1 ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.varExpUnitTests8
                   UnitTests.varExpUnitTests2) -}
2ec94d8f501ee19ec29723a2e40f374a
  varExpUnitTests10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
48251f92927e90325ef02c77ea821cf7
  varExpUnitTests11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.varExpUnitTests12) -}
58641f466a20a7a95e3808387684a4d1
  varExpUnitTests12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("VarExp (exception)"#) -}
3ed08c81f77a7122311aaa83f5c6cc43
  varExpUnitTests13 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.varExpUnitTests16,
                  UnitTests.varExpUnitTests14
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
fa6bf498cc26e93202205ea2f1a49598
  varExpUnitTests14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.varExpUnitTests_actual2
                        UnitTests.testenv18 of wild {
                   GHC.Types.False -> UnitTests.varExpUnitTests15 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
2df684df9ed42430c2a98a56be5f18d7
  varExpUnitTests15 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
15063a6d9dccefb64330a52dc5e03b51
  varExpUnitTests16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.varExpUnitTests17) -}
de329685dbfad6a288b3627ce472241a
  varExpUnitTests17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Integer VarExp"#) -}
e0f608fe8980ff615e6e394379a95946
  varExpUnitTests2 ::
    [(GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion)
                   UnitTests.varExpUnitTests3
                   (GHC.Types.[]
                      @ (GHC.Base.String, Test.Tasty.HUnit.Orig.Assertion))) -}
88815d2e118c8e21fdbb3aa603398dd7
  varExpUnitTests3 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.varExpUnitTests6,
                  UnitTests.varExpUnitTests4
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
9531e25102a663f7b11d31330e55cddb
  varExpUnitTests4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.varExpUnitTests_actual
                        UnitTests.testenv9 of wild {
                   GHC.Types.False -> UnitTests.varExpUnitTests5 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
531166e3aaee59b7d7b7867063ada3e5
  varExpUnitTests5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
07749543fd60cbbd4f64366eb9e0449c
  varExpUnitTests6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   UnitTests.varExpUnitTests7) -}
88fc2b64d385d1b82dcee5c6bd24d389
  varExpUnitTests7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Cloval VarExp"#) -}
bbeca7e698a9f6629e458ee91277d2d3
  varExpUnitTests8 ::
    ([GHC.Types.Char], Test.Tasty.HUnit.Orig.Assertion)
  {- Strictness: m,
     Unfolding: ((UnitTests.varExpUnitTests11,
                  UnitTests.varExpUnitTests9
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
9490eace8bc1d2834b8673343103d2ac
  varExpUnitTests9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Lib.$fEqVal_$c==
                        UnitTests.varExpUnitTests_actual1
                        UnitTests.letExpUnitTests_expect of wild {
                   GHC.Types.False -> UnitTests.varExpUnitTests10 eta
                   GHC.Types.True -> (# eta, GHC.Tuple.() #) }) -}
c543f86bba908447becc98a79760c58d
  varExpUnitTests_actual :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.callStmtUnitTests31
                   UnitTests.testenv1) -}
52409844486ea59fb2fdfff8d888cc12
  varExpUnitTests_actual1 :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.callStmtUnitTests9
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Lib.Val)) -}
d0a481942c0b14c1b606b5df69c1e60f
  varExpUnitTests_actual2 :: Lib.Val
  {- Unfolding: (Lib.eval
                   UnitTests.callStmtUnitTests9
                   UnitTests.testenv1) -}
"SPEC/UnitTests $fShow(,,)_$cshow @ [Char] @ (HashMap
                                               String Stmt) @ (HashMap String Val)" [orphan] forall ($dShow2 :: GHC.Show.Show
                                                                                                                                                                        (Data.HashMap.Base.HashMap
                                                                                                                                                                           GHC.Base.String
                                                                                                                                                                           Lib.Val))
                                                                                                                                                          ($dShow1 :: GHC.Show.Show
                                                                                                                                                                        (Data.HashMap.Base.HashMap
                                                                                                                                                                           GHC.Base.String
                                                                                                                                                                           Lib.Stmt))
                                                                                                                                                          ($dShow :: GHC.Show.Show
                                                                                                                                                                       [GHC.Types.Char])
  GHC.Show.$fShow(,,)_$cshow @ [GHC.Types.Char]
                             @ (Data.HashMap.Base.HashMap GHC.Base.String Lib.Stmt)
                             @ (Data.HashMap.Base.HashMap GHC.Base.String Lib.Val)
                             $dShow
                             $dShow1
                             $dShow2
  = UnitTests.$s$fShow(,,)_$cshow
"SPEC/UnitTests $fShowHashMap @ [Char] @ Stmt" [orphan] forall (v2 :: GHC.Show.Show
                                                                        Lib.Stmt)
                                                               (v1 :: GHC.Show.Show
                                                                        [GHC.Types.Char])
  Data.HashMap.Base.$fShowHashMap @ [GHC.Types.Char] @ Lib.Stmt v1 v2
  = UnitTests.$s$fShow(,,)_$s$fShowHashMap1
"SPEC/UnitTests $fShowHashMap @ [Char] @ Val" [orphan] forall (v2 :: GHC.Show.Show
                                                                       Lib.Val)
                                                              (v1 :: GHC.Show.Show [GHC.Types.Char])
  Data.HashMap.Base.$fShowHashMap @ [GHC.Types.Char] @ Lib.Val v1 v2
  = UnitTests.$s$fShow(,,)_$s$fShowHashMap
"SPEC/UnitTests $fShowHashMap_$cshow @ [Char] @ Stmt" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                    Lib.Stmt)
                                                                      ($dShow :: GHC.Show.Show
                                                                                   [GHC.Types.Char])
  Data.HashMap.Base.$fShowHashMap_$cshow @ [GHC.Types.Char]
                                         @ Lib.Stmt
                                         $dShow
                                         $dShow1
  = UnitTests.$s$fShowHashMap_$cshow
"SPEC/UnitTests $fShowHashMap_$cshow @ [Char] @ Val" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                   Lib.Val)
                                                                     ($dShow :: GHC.Show.Show
                                                                                  [GHC.Types.Char])
  Data.HashMap.Base.$fShowHashMap_$cshow @ [GHC.Types.Char]
                                         @ Lib.Val
                                         $dShow
                                         $dShow1
  = UnitTests.$s$fShowHashMap_$cshow1
"SPEC/UnitTests $fShowHashMap_$cshowList @ [Char] @ Stmt" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                        Lib.Stmt)
                                                                          ($dShow :: GHC.Show.Show
                                                                                       [GHC.Types.Char])
  Data.HashMap.Base.$fShowHashMap_$cshowList @ [GHC.Types.Char]
                                             @ Lib.Stmt
                                             $dShow
                                             $dShow1
  = UnitTests.$s$fShowHashMap_$cshowList
"SPEC/UnitTests $fShowHashMap_$cshowList @ [Char] @ Val" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                       Lib.Val)
                                                                         ($dShow :: GHC.Show.Show
                                                                                      [GHC.Types.Char])
  Data.HashMap.Base.$fShowHashMap_$cshowList @ [GHC.Types.Char]
                                             @ Lib.Val
                                             $dShow
                                             $dShow1
  = UnitTests.$s$fShowHashMap_$cshowList1
"SPEC/UnitTests $fShowHashMap_$cshowsPrec @ [Char] @ Stmt" [orphan] [2] forall (w1 :: GHC.Show.Show
                                                                                        Lib.Stmt)
                                                                               (w :: GHC.Show.Show
                                                                                       [GHC.Types.Char])
  Data.HashMap.Base.$fShowHashMap_$cshowsPrec @ [GHC.Types.Char]
                                              @ Lib.Stmt
                                              w
                                              w1
  = UnitTests.$s$fShowHashMap_$cshowsPrec
"SPEC/UnitTests $fShowHashMap_$cshowsPrec @ [Char] @ Val" [orphan] [2] forall (w1 :: GHC.Show.Show
                                                                                       Lib.Val)
                                                                              (w :: GHC.Show.Show
                                                                                      [GHC.Types.Char])
  Data.HashMap.Base.$fShowHashMap_$cshowsPrec @ [GHC.Types.Char]
                                              @ Lib.Val
                                              w
                                              w1
  = UnitTests.$s$fShowHashMap_$cshowsPrec1
"SPEC/UnitTests $wupdateOrSnocWithKey @ [Char] _" [orphan] [2] forall @ v
                                                                      (w :: GHC.Classes.Eq
                                                                              [GHC.Types.Char])
  Data.HashMap.Base.$wupdateOrSnocWithKey @ [GHC.Types.Char] @ v w
  = UnitTests.$s$wupdateOrSnocWithKey @ v
"SPEC/UnitTests insert @ [Char] _" [orphan] forall @ v
                                                   ($dHashable :: Data.Hashable.Class.Hashable
                                                                    [GHC.Types.Char])
                                                   ($dEq :: GHC.Classes.Eq [GHC.Types.Char])
  Data.HashMap.Base.insert @ [GHC.Types.Char] @ v $dEq $dHashable
  = UnitTests.$sinsert @ v
"SPEC/UnitTests unsafeInsert @ [Char] _" [orphan] forall @ v
                                                         ($dHashable :: Data.Hashable.Class.Hashable
                                                                          [GHC.Types.Char])
                                                         ($dEq :: GHC.Classes.Eq [GHC.Types.Char])
  Data.HashMap.Base.unsafeInsert @ [GHC.Types.Char]
                                 @ v
                                 $dEq
                                 $dHashable
  = UnitTests.$sunsafeInsert @ v
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

