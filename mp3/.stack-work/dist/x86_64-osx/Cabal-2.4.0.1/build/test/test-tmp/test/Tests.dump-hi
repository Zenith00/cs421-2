
==================== FINAL INTERFACE ====================
2019-03-05 07:14:12.107561 UTC

interface main:Main [orphan module] [family instance module] 8063
  interface hash: 3f2742054752d5189586580d07fca2a6
  ABI hash: 4bab3d327b154081923f9067c2a4f86a
  export-list hash: 8f3dcf1a9b5de0223fec6e090791602f
  orphan hash: 92ab66d87177eab76e7016e99f7b5297
  flag hash: 2a99451ca353444035da5356771f7f39
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.cpsDecl_test
  Main.cpsExp_test
  Main.evenodd
  Main.fact
  Main.getBack
  Main.getExp2
  Main.isAppExp
  Main.isSimple_test
  Main.main
  Main.prop_eq_evenoddk_evenodd
  Main.prop_evenoddk_usesContinuations1
  Main.prop_evenoddk_usesContinuations2
  Main.prop_factk_eq_fact
  Main.prop_factk_usesContinuation
  Main.tests
  Main.tests_cpsDecl
  Main.tests_cpsExp_ap
  Main.tests_cpsExp_ap_basic
  Main.tests_cpsExp_arbitrary
  Main.tests_cpsExp_if_basic
  Main.tests_cpsExp_intVar
  Main.tests_cpsExp_nonSimpIf
  Main.tests_cpsExp_nonSimpOp
  Main.tests_cpsExp_op_basic
  Main.tests_cpsExp_simpIf
  Main.tests_cpsExp_simpOp
  Main.tests_isSimple
  Main.NonSimpleExpr{Main.EmptyNS Main.NonSimpleExpr}
  Main.Ops{Main.Ops getString}
  Main.SimpleExpr{Main.EmptyS Main.SimpleExpr}
module dependencies: Lib
package dependencies: QuickCheck-2.12.6.1 ansi-terminal-0.8.2
                      ansi-wl-pprint-0.6.8.2 array-0.5.3.0 base-4.12.0.0 binary-0.8.6.0
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.6.0.1 deepseq-1.4.4.0
                      erf-2.0.0.0 ghc-boot-th-8.6.3 ghc-prim-0.5.3 hashable-1.2.7.0
                      hostname-1.0 integer-gmp-1.0.2.0 mtl-2.2.2 parsec-3.1.13.0
                      pretty-1.1.3.6 primitive-0.6.4.0 random-1.1 regex-base-0.93.2
                      regex-posix-0.95.2 template-haskell-2.14.0.0 test-framework-0.8.2.0
                      test-framework-quickcheck2-0.3.0.5 text-1.2.3.1 tf-random-0.5
                      time-1.8.0.2 transformers-0.5.5.0 unordered-containers-0.2.9.0
                      xml-1.3.14
orphans: colour-2.3.4:Data.Colour
         regex-posix-0.95.2:Text.Regex.Posix.String
         regex-base-0.93.2:Text.Regex.Base.Context
         hashable-1.2.7.0:Data.Hashable.Generic
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         text-1.2.3.1:Data.Text.Lazy text-1.2.3.1:Data.Text
         binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         ghc-boot-th-8.6.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         unordered-containers-0.2.9.0:Data.HashMap.Base
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck 38addeb83ca99bb269a5b885eb60712d
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck.Arbitrary 4386ea90f0dc188b70763f62e1371604
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck.Gen 52a2870cae80749de1cdb333c2b81e72
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck.Modifiers 2e8582ede07e12031097a1982677d3b4
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck.Property 53ae7729b399320a6fe2cdf3d26c77c2
import  -/  base-4.12.0.0:Data.Foldable 00188ddf89c975fee76bdfad479443c1
import  -/  base-4.12.0.0:Data.Functor 22aac80fdb6c7b7f60b4aaab86afee64
import  -/  base-4.12.0.0:Data.List ce2c69da408fdc014383cede9e1f9adf
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.Err 28d622b06927ca4c3b335ec5326c34b2
import  -/  base-4.12.0.0:GHC.Generics 7aea30cad019e3a5fc11eb21c8019cc5
import  -/  base-4.12.0.0:GHC.Num 847723f2584d989dac1eada133ac3fb8
import  -/  base-4.12.0.0:GHC.Real f7dad82c1d43d80823865d3e6c6636e0
import  -/  base-4.12.0.0:GHC.Show 4e438f26d903388cc6c2c5d64ed01b98
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 7f56f3d142debd8666df241a1ddc7887
import  -/  Lib f12629ceb5cf1dfb22eb4ce74cfebab9
  exports: 8fd0f6ee9ae2d53d75804f4e2b6b7a89
  AppExp 11dfa6a2c71568e260158bf6adb602be
  Decl b020d810e6fe6717ac39c88099cd1cdb
  Exp acae44353198d97ccc2c4d4b1a83430a
  IfExp c34649a004243978b4a70e3fb0d53fa2
  IntExp 9f5831e1fc16be3eb9685f9e3a1f7c5b
  LamExp 5128c3048f68dcf80e5372366107ab97
  OpExp 576cd122bf2e0b5a3aa9408f9818a50f
  Stmt 443bd580db577f068ac29391828a51aa
  VarExp 0db03d2101ddae1c46afc71c15a32edc
  cpsDecl 911591c2bfb41c3adfdbe43d7cb5bad8
  cpsExp 6d0e1b15d7674eb52ee346207c60a074
  evenoddk 2bd95671f6b5b904bcb83b8244d1afbb
  factk 70e619e6e3c228ad7aba9e1ac210d839
  gensym 2e7311be2cc77de7178af9149377b37d
  isSimple f5fda6a4a62271b71cb37326f2c6cb88
import  -/  test-framework-0.8.2.0:Test.Framework a2c82671184ddd2b4e8c9ca0287b21e7
import  -/  test-framework-0.8.2.0:Test.Framework.Core 61a88e7ac9277b27178af36058d907c1
import  -/  test-framework-0.8.2.0:Test.Framework.Runners.Console 5c30bdba7e927f14d77f70d22f97453f
import  -/  test-framework-quickcheck2-0.3.0.5:Test.Framework.Providers.QuickCheck2 74088e42630bcc514c55d77a7ae677f1
import  -/  unordered-containers-0.2.9.0:Data.HashMap.Strict 382b0fb0c37f914f58f22553760567f2
5b5cb5233f8630dc0cef725b5a871ff7
  $fArbitraryExp :: Test.QuickCheck.Arbitrary.Arbitrary Lib.Exp
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Exp
                  Main.$fArbitraryExp1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Lib.Exp>_R))
                  Main.$fArbitraryExp_$cshrink -}
0c3f187a909d1ec9b2bffad10e690429
  $fArbitraryExp1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Lib.Exp
  {- Arity: 2, Strictness: <L,U><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                 (Main.$fArbitraryExp_randSimpleExp n)
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <Lib.Exp>_R)
                   r
                   n) -}
f0c15b68574d34b0be55ce200457334e
  $fArbitraryExp_$cshrink :: Lib.Exp -> [Lib.Exp]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Lib.Exp) -> GHC.Types.[] @ Lib.Exp) -}
051b21e2498c451764c429736d1a115d
  $fArbitraryExp_randSimpleExp ::
    GHC.Types.Int -> Test.QuickCheck.Gen.Gen Lib.Exp
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 -> Main.$wrandSimpleExp ww1 }) -}
959ddd7450cfd9a9d7577ac72f051445
  $fArbitraryNonSimpleExpr ::
    Test.QuickCheck.Arbitrary.Arbitrary Main.NonSimpleExpr
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.NonSimpleExpr
                  Main.$fArbitraryNonSimpleExpr3
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.NonSimpleExpr>_R))
                  Main.$fArbitraryNonSimpleExpr_$cshrink -}
959ddd7450cfd9a9d7577ac72f051445
  $fArbitraryNonSimpleExpr1 :: [Main.NonSimpleExpr]
  {- Unfolding: (GHC.Base.map
                   @ (GHC.Generics.Rep Main.NonSimpleExpr GHC.Types.Any)
                   @ Main.NonSimpleExpr
                   (Main.$fArbitraryNonSimpleExpr_$cto @ GHC.Types.Any)
                   Main.$fArbitraryNonSimpleExpr2
                     `cast`
                   (Nth:3
                        ((Sym (GHC.Generics.N:M1[0]
                                   <*>_N
                                   <GHC.Generics.D>_P
                                   <'GHC.Generics.MetaData
                                      "NonSimpleExpr" "Main" "main" 'GHC.Types.False>_P
                                   <GHC.Generics.C1
                                      ('GHC.Generics.MetaCons
                                         "NonSimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      (GHC.Generics.S1
                                         ('GHC.Generics.MetaSel
                                            'GHC.Maybe.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.Rec0 Lib.Exp))
                                    GHC.Generics.:+: GHC.Generics.C1
                                                       ('GHC.Generics.MetaCons
                                                          "EmptyNS"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False)
                                                       (GHC.Generics.S1
                                                          ('GHC.Generics.MetaSel
                                                             'GHC.Maybe.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.Rec0
                                                             GHC.Integer.Type.Integer))>_R) ; Sub (Sym (Main.Rep_NonSimpleExpr[0]))) <GHC.Types.Any>_N
                         ->_R ([(Sym (GHC.Generics.N:M1[0]
                                          <*>_N
                                          <GHC.Generics.D>_P
                                          <'GHC.Generics.MetaData
                                             "NonSimpleExpr" "Main" "main" 'GHC.Types.False>_P
                                          <GHC.Generics.C1
                                             ('GHC.Generics.MetaCons
                                                "NonSimpleExpr"
                                                'GHC.Generics.PrefixI
                                                'GHC.Types.False)
                                             (GHC.Generics.S1
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.Rec0 Lib.Exp))
                                           GHC.Generics.:+: GHC.Generics.C1
                                                              ('GHC.Generics.MetaCons
                                                                 "EmptyNS"
                                                                 'GHC.Generics.PrefixI
                                                                 'GHC.Types.False)
                                                              (GHC.Generics.S1
                                                                 ('GHC.Generics.MetaSel
                                                                    'GHC.Maybe.Nothing
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.Rec0
                                                                    GHC.Integer.Type.Integer))>_R) ; Sub (Sym (Main.Rep_NonSimpleExpr[0]))) <GHC.Types.Any>_N])_R))) -}
6cf6da1bcc029ec8667fea79af506ef5
  $fArbitraryNonSimpleExpr2 ::
    [(GHC.Generics.:+:)
       (GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons
             "NonSimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
          (GHC.Generics.S1
             ('GHC.Generics.MetaSel
                'GHC.Maybe.Nothing
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.Rec0 Lib.Exp)))
       (GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons
             "EmptyNS" 'GHC.Generics.PrefixI 'GHC.Types.False)
          (GHC.Generics.S1
             ('GHC.Generics.MetaSel
                'GHC.Maybe.Nothing
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.Rec0 GHC.Integer.Type.Integer)))
       GHC.Types.Any]
  {- Unfolding: (GHC.Base.map
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "NonSimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.S1
                           ('GHC.Generics.MetaSel
                              'GHC.Maybe.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.Rec0 Lib.Exp))
                        GHC.Types.Any)
                   @ ((GHC.Generics.:+:)
                        (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "NonSimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           (GHC.Generics.S1
                              ('GHC.Generics.MetaSel
                                 'GHC.Maybe.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.Rec0 Lib.Exp)))
                        (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "EmptyNS" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           (GHC.Generics.S1
                              ('GHC.Generics.MetaSel
                                 'GHC.Maybe.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.Rec0 GHC.Integer.Type.Integer)))
                        GHC.Types.Any)
                   (GHC.Generics.L1
                      @ *
                      @ (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "NonSimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           (GHC.Generics.S1
                              ('GHC.Generics.MetaSel
                                 'GHC.Maybe.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.Rec0 Lib.Exp)))
                      @ (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "EmptyNS" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           (GHC.Generics.S1
                              ('GHC.Generics.MetaSel
                                 'GHC.Maybe.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.Rec0 GHC.Integer.Type.Integer)))
                      @ GHC.Types.Any)
                   (GHC.Types.[] @ Lib.Exp)
                     `cast`
                   (Nth:3
                        (<GHC.Generics.M1
                            GHC.Generics.C
                            ('GHC.Generics.MetaCons
                               "NonSimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                            (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  'GHC.Maybe.Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.Rec0 Lib.Exp))
                            GHC.Types.Any>_R
                         ->_R ([Nth:0
                                    (Nth:3
                                         (<GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'GHC.Maybe.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1 GHC.Generics.R Lib.Exp)
                                             GHC.Types.Any>_R
                                          ->_R ([Nth:0
                                                     (Nth:3
                                                          (<GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Lib.Exp
                                                              GHC.Types.Any>_R
                                                           ->_R ([Sym (GHC.Generics.N:K1[0]
                                                                           <*>_N
                                                                           <GHC.Generics.R>_P
                                                                           <Lib.Exp>_R
                                                                           <GHC.Types.Any>_P)])_R)) ; Sym (GHC.Generics.N:M1[0]
                                                                                                               <*>_N
                                                                                                               <GHC.Generics.S>_P
                                                                                                               <'GHC.Generics.MetaSel
                                                                                                                  'GHC.Maybe.Nothing
                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                  'GHC.Generics.DecidedLazy>_P
                                                                                                               <GHC.Generics.K1
                                                                                                                  GHC.Generics.R
                                                                                                                  Lib.Exp>_R) <GHC.Types.Any>_N])_R)) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                                                                 <*>_N
                                                                                                                                                                 <GHC.Generics.C>_P
                                                                                                                                                                 <'GHC.Generics.MetaCons
                                                                                                                                                                    "NonSimpleExpr"
                                                                                                                                                                    'GHC.Generics.PrefixI
                                                                                                                                                                    'GHC.Types.False>_P
                                                                                                                                                                 <GHC.Generics.M1
                                                                                                                                                                    GHC.Generics.S
                                                                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                                                                       'GHC.Maybe.Nothing
                                                                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                                                                    (GHC.Generics.Rec0
                                                                                                                                                                       Lib.Exp)>_R) <GHC.Types.Any>_N])_R))) -}
959ddd7450cfd9a9d7577ac72f051445
  $fArbitraryNonSimpleExpr3 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.NonSimpleExpr
  {- Arity: 2, Strictness: <L,U><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                 (Main.$fArbitraryNonSimpleExpr_randomNonSimpleExpr n)
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <Main.NonSimpleExpr>_R)
                   r
                   n) -}
959ddd7450cfd9a9d7577ac72f051445
  $fArbitraryNonSimpleExpr_$cshrink ::
    Main.NonSimpleExpr -> [Main.NonSimpleExpr]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x2 :: Main.NonSimpleExpr) ->
                 case x2 of wild {
                   Main.NonSimpleExpr g1 -> Main.$fArbitraryNonSimpleExpr1
                   Main.EmptyNS g1
                   -> GHC.Base.map
                        @ (GHC.Generics.Rep Main.NonSimpleExpr GHC.Types.Any)
                        @ Main.NonSimpleExpr
                        (Main.$fArbitraryNonSimpleExpr_$cto @ GHC.Types.Any)
                        (GHC.Base.map
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "EmptyNS" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 GHC.Integer.Type.Integer))
                                GHC.Types.Any)
                           @ ((GHC.Generics.:+:)
                                (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "NonSimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 Lib.Exp)))
                                (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "EmptyNS" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 GHC.Integer.Type.Integer)))
                                GHC.Types.Any)
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "NonSimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 Lib.Exp)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "EmptyNS" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 GHC.Integer.Type.Integer)))
                              @ GHC.Types.Any)
                           (Test.QuickCheck.Arbitrary.$fArbitraryInteger_$sshrinkIntegral g1)
                             `cast`
                           (Nth:3
                                (<GHC.Generics.M1
                                    GHC.Generics.C
                                    ('GHC.Generics.MetaCons
                                       "EmptyNS" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    (GHC.Generics.M1
                                       GHC.Generics.S
                                       ('GHC.Generics.MetaSel
                                          'GHC.Maybe.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.Rec0 GHC.Integer.Type.Integer))
                                    GHC.Types.Any>_R
                                 ->_R ([Nth:0
                                            (Nth:3
                                                 (<GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R GHC.Integer.Type.Integer)
                                                     GHC.Types.Any>_R
                                                  ->_R ([Nth:0
                                                             (Nth:3
                                                                  (<GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      GHC.Integer.Type.Integer
                                                                      GHC.Types.Any>_R
                                                                   ->_R ([Sym (GHC.Generics.N:K1[0]
                                                                                   <*>_N
                                                                                   <GHC.Generics.R>_P
                                                                                   <GHC.Integer.Type.Integer>_R
                                                                                   <GHC.Types.Any>_P)])_R)) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                       <*>_N
                                                                                                                       <GHC.Generics.S>_P
                                                                                                                       <'GHC.Generics.MetaSel
                                                                                                                          'GHC.Maybe.Nothing
                                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                                          'GHC.Generics.DecidedLazy>_P
                                                                                                                       <GHC.Generics.K1
                                                                                                                          GHC.Generics.R
                                                                                                                          GHC.Integer.Type.Integer>_R) <GHC.Types.Any>_N])_R)) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                                                                                          <*>_N
                                                                                                                                                                                          <GHC.Generics.C>_P
                                                                                                                                                                                          <'GHC.Generics.MetaCons
                                                                                                                                                                                             "EmptyNS"
                                                                                                                                                                                             'GHC.Generics.PrefixI
                                                                                                                                                                                             'GHC.Types.False>_P
                                                                                                                                                                                          <GHC.Generics.M1
                                                                                                                                                                                             GHC.Generics.S
                                                                                                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                                                                                                'GHC.Maybe.Nothing
                                                                                                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                                                                                                             (GHC.Generics.Rec0
                                                                                                                                                                                                GHC.Integer.Type.Integer)>_R) <GHC.Types.Any>_N])_R)))
                          `cast`
                        (Nth:3
                             ((Sym (GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.D>_P
                                        <'GHC.Generics.MetaData
                                           "NonSimpleExpr" "Main" "main" 'GHC.Types.False>_P
                                        <GHC.Generics.C1
                                           ('GHC.Generics.MetaCons
                                              "NonSimpleExpr"
                                              'GHC.Generics.PrefixI
                                              'GHC.Types.False)
                                           (GHC.Generics.S1
                                              ('GHC.Generics.MetaSel
                                                 'GHC.Maybe.Nothing
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.NoSourceStrictness
                                                 'GHC.Generics.DecidedLazy)
                                              (GHC.Generics.Rec0 Lib.Exp))
                                         GHC.Generics.:+: GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "EmptyNS"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            (GHC.Generics.S1
                                                               ('GHC.Generics.MetaSel
                                                                  'GHC.Maybe.Nothing
                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                  'GHC.Generics.NoSourceStrictness
                                                                  'GHC.Generics.DecidedLazy)
                                                               (GHC.Generics.Rec0
                                                                  GHC.Integer.Type.Integer))>_R) ; Sub (Sym (Main.Rep_NonSimpleExpr[0]))) <GHC.Types.Any>_N
                              ->_R ([(Sym (GHC.Generics.N:M1[0]
                                               <*>_N
                                               <GHC.Generics.D>_P
                                               <'GHC.Generics.MetaData
                                                  "NonSimpleExpr" "Main" "main" 'GHC.Types.False>_P
                                               <GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "NonSimpleExpr"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  (GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0 Lib.Exp))
                                                GHC.Generics.:+: GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "EmptyNS"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   (GHC.Generics.S1
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Maybe.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.Rec0
                                                                         GHC.Integer.Type.Integer))>_R) ; Sub (Sym (Main.Rep_NonSimpleExpr[0]))) <GHC.Types.Any>_N])_R)) }) -}
959ddd7450cfd9a9d7577ac72f051445
  $fArbitraryNonSimpleExpr_$cto ::
    GHC.Generics.Rep Main.NonSimpleExpr x -> Main.NonSimpleExpr
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x2 (ds :: GHC.Generics.Rep Main.NonSimpleExpr x2) ->
                 case ds
                        `cast`
                      ((Sub (Main.Rep_NonSimpleExpr[0]) ; GHC.Generics.N:M1[0]
                                                              <*>_N
                                                              <GHC.Generics.D>_P
                                                              <'GHC.Generics.MetaData
                                                                 "NonSimpleExpr"
                                                                 "Main"
                                                                 "main"
                                                                 'GHC.Types.False>_P
                                                              <GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "NonSimpleExpr"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Maybe.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R Lib.Exp))
                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                  GHC.Generics.C
                                                                                  ('GHC.Generics.MetaCons
                                                                                     "EmptyNS"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'GHC.Types.False)
                                                                                  (GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Maybe.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        GHC.Integer.Type.Integer))>_R) <x2>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> Main.NonSimpleExpr
                        ds1
                          `cast`
                        ((GHC.Generics.N:M1[0]
                              <*>_N
                              <GHC.Generics.C>_P
                              <'GHC.Generics.MetaCons
                                 "NonSimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                              <GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R Lib.Exp)>_R ; GHC.Generics.N:M1[0]
                                                                                   <*>_N
                                                                                   <GHC.Generics.S>_P
                                                                                   <'GHC.Generics.MetaSel
                                                                                      'GHC.Maybe.Nothing
                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                      'GHC.Generics.DecidedLazy>_P
                                                                                   <GHC.Generics.K1
                                                                                      GHC.Generics.R
                                                                                      Lib.Exp>_R) <x2>_N ; GHC.Generics.N:K1[0]
                                                                                                               <*>_N
                                                                                                               <GHC.Generics.R>_P
                                                                                                               <Lib.Exp>_R
                                                                                                               <x2>_P)
                   GHC.Generics.R1 ds1
                   -> Main.EmptyNS
                        ds1
                          `cast`
                        ((GHC.Generics.N:M1[0]
                              <*>_N
                              <GHC.Generics.C>_P
                              <'GHC.Generics.MetaCons
                                 "EmptyNS" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                              <GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    GHC.Integer.Type.Integer)>_R ; GHC.Generics.N:M1[0]
                                                                       <*>_N
                                                                       <GHC.Generics.S>_P
                                                                       <'GHC.Generics.MetaSel
                                                                          'GHC.Maybe.Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy>_P
                                                                       <GHC.Generics.K1
                                                                          GHC.Generics.R
                                                                          GHC.Integer.Type.Integer>_R) <x2>_N ; GHC.Generics.N:K1[0]
                                                                                                                    <*>_N
                                                                                                                    <GHC.Generics.R>_P
                                                                                                                    <GHC.Integer.Type.Integer>_R
                                                                                                                    <x2>_P) }) -}
959ddd7450cfd9a9d7577ac72f051445
  $fArbitraryNonSimpleExpr_randomNonSimpleExpr ::
    GHC.Types.Int -> Test.QuickCheck.Gen.Gen Main.NonSimpleExpr
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Main.$wrandomNonSimpleExpr ww1 }) -}
ff15942e0a15108e096716ca4479d40d
  $fArbitraryOps :: Test.QuickCheck.Arbitrary.Arbitrary Main.Ops
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Ops
                  Main.$fArbitraryOps1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] (Main.N:Ops[0])))
                  Main.$fArbitraryOps_$cshrink -}
7a3f4da754f762dad04a93b949542bc7
  $fArbitraryOps1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, True)
                (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                 Main.$fArbitraryOps_ds
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <GHC.Base.String>_R)
                   r
                   n) -}
4e7515326cad7f1df947b34609714815
  $fArbitraryOps10 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryOps14
                   Main.$fArbitraryOps11) -}
a0963c643e9426cbbd15ddb1bac8c781
  $fArbitraryOps11 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryOps12
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
86cd12a7367a32b116eaaed8e7537753
  $fArbitraryOps12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fArbitraryOps13) -}
5dd8d5a6671429f15d71700f14ad5181
  $fArbitraryOps13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=="#) -}
4d6532a19ca825ab3abc83e39b2caaf1
  $fArbitraryOps14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fArbitraryOps15) -}
a1428dd1dd92d7e415d0b43dd755ddf2
  $fArbitraryOps15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/="#) -}
93a66f9162afe0c885969b131f1ee75c
  $fArbitraryOps16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fArbitraryOps17) -}
17ddb2ec88a7f1c48ba91224b8868d32
  $fArbitraryOps17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (">="#) -}
56b911553f9f9671948b1963cf73796c
  $fArbitraryOps18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fArbitraryOps19) -}
87180d1299d9693780ce1f6e7b1cfd13
  $fArbitraryOps19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<="#) -}
922e53dac0f7a8dd0fcadf0dac151665
  $fArbitraryOps2 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryOps30
                   Main.$fArbitraryOps3) -}
7a0fe8ecca128c522caeb561a438c62e
  $fArbitraryOps20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fArbitraryOps21) -}
58d5b5a0931c1bda418cb01973184172
  $fArbitraryOps21 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (">"#) -}
b450674723c93d208fd12d5d10abd435
  $fArbitraryOps22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fArbitraryOps23) -}
8a5f2957fed822873cc16b8bfae86f53
  $fArbitraryOps23 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<"#) -}
a29dd7d8777cb50e3a6955979a5540f2
  $fArbitraryOps24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fArbitraryOps25) -}
e8fc25b823c7e53a33e72a14e30cdc23
  $fArbitraryOps25 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/"#) -}
9448cb69b2fa069825de3d53362df884
  $fArbitraryOps26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fArbitraryOps27) -}
d4ba46bbc261f594dc5a87ad95e95045
  $fArbitraryOps27 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("*"#) -}
d2ebfaf21df36074462a96b6a7075fc9
  $fArbitraryOps28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fArbitraryOps29) -}
d54583b81bf64283c676fca8f3b7cf32
  $fArbitraryOps29 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("-"#) -}
79a3316bc45781fcd8ef6ec6b262ea5e
  $fArbitraryOps3 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryOps28
                   Main.$fArbitraryOps4) -}
604408dfabbd7d889ad6b6b18aeb67b5
  $fArbitraryOps30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fArbitraryOps31) -}
57627159ade6076363007e0adc68e905
  $fArbitraryOps31 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("+"#) -}
d19111be883b637c2acdce7c105be20d
  $fArbitraryOps4 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryOps26
                   Main.$fArbitraryOps5) -}
04d597256f872683af04033a8ecc4f60
  $fArbitraryOps5 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryOps24
                   Main.$fArbitraryOps6) -}
9bae2a5800385001b6a69d86e608c47b
  $fArbitraryOps6 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryOps22
                   Main.$fArbitraryOps7) -}
8f79d2fb6a72cbe32cb23bca68dd8d51
  $fArbitraryOps7 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryOps20
                   Main.$fArbitraryOps8) -}
4dbfe3636b6355076c2e8313d93e2eb4
  $fArbitraryOps8 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryOps18
                   Main.$fArbitraryOps9) -}
63c0c1225f3b5e39551306a75c03b700
  $fArbitraryOps9 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryOps16
                   Main.$fArbitraryOps10) -}
ff15942e0a15108e096716ca4479d40d
  $fArbitraryOps_$cshrink :: Main.Ops -> [Main.Ops]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.Ops) -> GHC.Types.[] @ Main.Ops) -}
b85684460985e8e6796f5a94d22c790f
  $fArbitraryOps_ds :: Test.QuickCheck.Gen.Gen GHC.Base.String
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ [GHC.Types.Char]
                   Main.$fArbitraryOps2) -}
bd27ecf9372ed7121877564a83e27c87
  $fArbitrarySimpleExpr ::
    Test.QuickCheck.Arbitrary.Arbitrary Main.SimpleExpr
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.SimpleExpr
                  Main.$fArbitrarySimpleExpr3
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.SimpleExpr>_R))
                  Main.$fArbitrarySimpleExpr_$cshrink -}
bd27ecf9372ed7121877564a83e27c87
  $fArbitrarySimpleExpr1 :: [Main.SimpleExpr]
  {- Unfolding: (GHC.Base.map
                   @ (GHC.Generics.Rep Main.SimpleExpr GHC.Types.Any)
                   @ Main.SimpleExpr
                   (Main.$fArbitrarySimpleExpr_$cto @ GHC.Types.Any)
                   Main.$fArbitrarySimpleExpr2
                     `cast`
                   (Nth:3
                        ((Sym (GHC.Generics.N:M1[0]
                                   <*>_N
                                   <GHC.Generics.D>_P
                                   <'GHC.Generics.MetaData
                                      "SimpleExpr" "Main" "main" 'GHC.Types.False>_P
                                   <GHC.Generics.C1
                                      ('GHC.Generics.MetaCons
                                         "SimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      (GHC.Generics.S1
                                         ('GHC.Generics.MetaSel
                                            'GHC.Maybe.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.Rec0 Lib.Exp))
                                    GHC.Generics.:+: GHC.Generics.C1
                                                       ('GHC.Generics.MetaCons
                                                          "EmptyS"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False)
                                                       (GHC.Generics.S1
                                                          ('GHC.Generics.MetaSel
                                                             'GHC.Maybe.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.Rec0
                                                             GHC.Integer.Type.Integer))>_R) ; Sub (Sym (Main.Rep_SimpleExpr[0]))) <GHC.Types.Any>_N
                         ->_R ([(Sym (GHC.Generics.N:M1[0]
                                          <*>_N
                                          <GHC.Generics.D>_P
                                          <'GHC.Generics.MetaData
                                             "SimpleExpr" "Main" "main" 'GHC.Types.False>_P
                                          <GHC.Generics.C1
                                             ('GHC.Generics.MetaCons
                                                "SimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             (GHC.Generics.S1
                                                ('GHC.Generics.MetaSel
                                                   'GHC.Maybe.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.Rec0 Lib.Exp))
                                           GHC.Generics.:+: GHC.Generics.C1
                                                              ('GHC.Generics.MetaCons
                                                                 "EmptyS"
                                                                 'GHC.Generics.PrefixI
                                                                 'GHC.Types.False)
                                                              (GHC.Generics.S1
                                                                 ('GHC.Generics.MetaSel
                                                                    'GHC.Maybe.Nothing
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.Rec0
                                                                    GHC.Integer.Type.Integer))>_R) ; Sub (Sym (Main.Rep_SimpleExpr[0]))) <GHC.Types.Any>_N])_R))) -}
5f5217ee7de7d4662f39f28467871af3
  $fArbitrarySimpleExpr2 ::
    [(GHC.Generics.:+:)
       (GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons
             "SimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
          (GHC.Generics.S1
             ('GHC.Generics.MetaSel
                'GHC.Maybe.Nothing
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.Rec0 Lib.Exp)))
       (GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons
             "EmptyS" 'GHC.Generics.PrefixI 'GHC.Types.False)
          (GHC.Generics.S1
             ('GHC.Generics.MetaSel
                'GHC.Maybe.Nothing
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.Rec0 GHC.Integer.Type.Integer)))
       GHC.Types.Any]
  {- Unfolding: (GHC.Base.map
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "SimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.S1
                           ('GHC.Generics.MetaSel
                              'GHC.Maybe.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.Rec0 Lib.Exp))
                        GHC.Types.Any)
                   @ ((GHC.Generics.:+:)
                        (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "SimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           (GHC.Generics.S1
                              ('GHC.Generics.MetaSel
                                 'GHC.Maybe.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.Rec0 Lib.Exp)))
                        (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "EmptyS" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           (GHC.Generics.S1
                              ('GHC.Generics.MetaSel
                                 'GHC.Maybe.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.Rec0 GHC.Integer.Type.Integer)))
                        GHC.Types.Any)
                   (GHC.Generics.L1
                      @ *
                      @ (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "SimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           (GHC.Generics.S1
                              ('GHC.Generics.MetaSel
                                 'GHC.Maybe.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.Rec0 Lib.Exp)))
                      @ (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "EmptyS" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           (GHC.Generics.S1
                              ('GHC.Generics.MetaSel
                                 'GHC.Maybe.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.Rec0 GHC.Integer.Type.Integer)))
                      @ GHC.Types.Any)
                   (GHC.Types.[] @ Lib.Exp)
                     `cast`
                   (Nth:3
                        (<GHC.Generics.M1
                            GHC.Generics.C
                            ('GHC.Generics.MetaCons
                               "SimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                            (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  'GHC.Maybe.Nothing
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.Rec0 Lib.Exp))
                            GHC.Types.Any>_R
                         ->_R ([Nth:0
                                    (Nth:3
                                         (<GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'GHC.Maybe.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1 GHC.Generics.R Lib.Exp)
                                             GHC.Types.Any>_R
                                          ->_R ([Nth:0
                                                     (Nth:3
                                                          (<GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Lib.Exp
                                                              GHC.Types.Any>_R
                                                           ->_R ([Sym (GHC.Generics.N:K1[0]
                                                                           <*>_N
                                                                           <GHC.Generics.R>_P
                                                                           <Lib.Exp>_R
                                                                           <GHC.Types.Any>_P)])_R)) ; Sym (GHC.Generics.N:M1[0]
                                                                                                               <*>_N
                                                                                                               <GHC.Generics.S>_P
                                                                                                               <'GHC.Generics.MetaSel
                                                                                                                  'GHC.Maybe.Nothing
                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                  'GHC.Generics.DecidedLazy>_P
                                                                                                               <GHC.Generics.K1
                                                                                                                  GHC.Generics.R
                                                                                                                  Lib.Exp>_R) <GHC.Types.Any>_N])_R)) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                                                                 <*>_N
                                                                                                                                                                 <GHC.Generics.C>_P
                                                                                                                                                                 <'GHC.Generics.MetaCons
                                                                                                                                                                    "SimpleExpr"
                                                                                                                                                                    'GHC.Generics.PrefixI
                                                                                                                                                                    'GHC.Types.False>_P
                                                                                                                                                                 <GHC.Generics.M1
                                                                                                                                                                    GHC.Generics.S
                                                                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                                                                       'GHC.Maybe.Nothing
                                                                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                                                                    (GHC.Generics.Rec0
                                                                                                                                                                       Lib.Exp)>_R) <GHC.Types.Any>_N])_R))) -}
bd27ecf9372ed7121877564a83e27c87
  $fArbitrarySimpleExpr3 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.SimpleExpr
  {- Arity: 2, Strictness: <L,U><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                 (Main.$fArbitrarySimpleExpr_randomSimpleExpr n)
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <Main.SimpleExpr>_R)
                   r
                   n) -}
bd27ecf9372ed7121877564a83e27c87
  $fArbitrarySimpleExpr_$cshrink ::
    Main.SimpleExpr -> [Main.SimpleExpr]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x2 :: Main.SimpleExpr) ->
                 case x2 of wild {
                   Main.SimpleExpr g1 -> Main.$fArbitrarySimpleExpr1
                   Main.EmptyS g1
                   -> GHC.Base.map
                        @ (GHC.Generics.Rep Main.SimpleExpr GHC.Types.Any)
                        @ Main.SimpleExpr
                        (Main.$fArbitrarySimpleExpr_$cto @ GHC.Types.Any)
                        (GHC.Base.map
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "EmptyS" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 GHC.Integer.Type.Integer))
                                GHC.Types.Any)
                           @ ((GHC.Generics.:+:)
                                (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "SimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 Lib.Exp)))
                                (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "EmptyS" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 GHC.Integer.Type.Integer)))
                                GHC.Types.Any)
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "SimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 Lib.Exp)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "EmptyS" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Maybe.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0 GHC.Integer.Type.Integer)))
                              @ GHC.Types.Any)
                           (Test.QuickCheck.Arbitrary.$fArbitraryInteger_$sshrinkIntegral g1)
                             `cast`
                           (Nth:3
                                (<GHC.Generics.M1
                                    GHC.Generics.C
                                    ('GHC.Generics.MetaCons
                                       "EmptyS" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    (GHC.Generics.M1
                                       GHC.Generics.S
                                       ('GHC.Generics.MetaSel
                                          'GHC.Maybe.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.Rec0 GHC.Integer.Type.Integer))
                                    GHC.Types.Any>_R
                                 ->_R ([Nth:0
                                            (Nth:3
                                                 (<GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R GHC.Integer.Type.Integer)
                                                     GHC.Types.Any>_R
                                                  ->_R ([Nth:0
                                                             (Nth:3
                                                                  (<GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      GHC.Integer.Type.Integer
                                                                      GHC.Types.Any>_R
                                                                   ->_R ([Sym (GHC.Generics.N:K1[0]
                                                                                   <*>_N
                                                                                   <GHC.Generics.R>_P
                                                                                   <GHC.Integer.Type.Integer>_R
                                                                                   <GHC.Types.Any>_P)])_R)) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                       <*>_N
                                                                                                                       <GHC.Generics.S>_P
                                                                                                                       <'GHC.Generics.MetaSel
                                                                                                                          'GHC.Maybe.Nothing
                                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                                          'GHC.Generics.DecidedLazy>_P
                                                                                                                       <GHC.Generics.K1
                                                                                                                          GHC.Generics.R
                                                                                                                          GHC.Integer.Type.Integer>_R) <GHC.Types.Any>_N])_R)) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                                                                                          <*>_N
                                                                                                                                                                                          <GHC.Generics.C>_P
                                                                                                                                                                                          <'GHC.Generics.MetaCons
                                                                                                                                                                                             "EmptyS"
                                                                                                                                                                                             'GHC.Generics.PrefixI
                                                                                                                                                                                             'GHC.Types.False>_P
                                                                                                                                                                                          <GHC.Generics.M1
                                                                                                                                                                                             GHC.Generics.S
                                                                                                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                                                                                                'GHC.Maybe.Nothing
                                                                                                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                                                                                                             (GHC.Generics.Rec0
                                                                                                                                                                                                GHC.Integer.Type.Integer)>_R) <GHC.Types.Any>_N])_R)))
                          `cast`
                        (Nth:3
                             ((Sym (GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.D>_P
                                        <'GHC.Generics.MetaData
                                           "SimpleExpr" "Main" "main" 'GHC.Types.False>_P
                                        <GHC.Generics.C1
                                           ('GHC.Generics.MetaCons
                                              "SimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                           (GHC.Generics.S1
                                              ('GHC.Generics.MetaSel
                                                 'GHC.Maybe.Nothing
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.NoSourceStrictness
                                                 'GHC.Generics.DecidedLazy)
                                              (GHC.Generics.Rec0 Lib.Exp))
                                         GHC.Generics.:+: GHC.Generics.C1
                                                            ('GHC.Generics.MetaCons
                                                               "EmptyS"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            (GHC.Generics.S1
                                                               ('GHC.Generics.MetaSel
                                                                  'GHC.Maybe.Nothing
                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                  'GHC.Generics.NoSourceStrictness
                                                                  'GHC.Generics.DecidedLazy)
                                                               (GHC.Generics.Rec0
                                                                  GHC.Integer.Type.Integer))>_R) ; Sub (Sym (Main.Rep_SimpleExpr[0]))) <GHC.Types.Any>_N
                              ->_R ([(Sym (GHC.Generics.N:M1[0]
                                               <*>_N
                                               <GHC.Generics.D>_P
                                               <'GHC.Generics.MetaData
                                                  "SimpleExpr" "Main" "main" 'GHC.Types.False>_P
                                               <GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "SimpleExpr"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  (GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Maybe.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0 Lib.Exp))
                                                GHC.Generics.:+: GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "EmptyS"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   (GHC.Generics.S1
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Maybe.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.Rec0
                                                                         GHC.Integer.Type.Integer))>_R) ; Sub (Sym (Main.Rep_SimpleExpr[0]))) <GHC.Types.Any>_N])_R)) }) -}
bd27ecf9372ed7121877564a83e27c87
  $fArbitrarySimpleExpr_$cto ::
    GHC.Generics.Rep Main.SimpleExpr x -> Main.SimpleExpr
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x2 (ds :: GHC.Generics.Rep Main.SimpleExpr x2) ->
                 case ds
                        `cast`
                      ((Sub (Main.Rep_SimpleExpr[0]) ; GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.D>_P
                                                           <'GHC.Generics.MetaData
                                                              "SimpleExpr"
                                                              "Main"
                                                              "main"
                                                              'GHC.Types.False>_P
                                                           <GHC.Generics.M1
                                                              GHC.Generics.C
                                                              ('GHC.Generics.MetaCons
                                                                 "SimpleExpr"
                                                                 'GHC.Generics.PrefixI
                                                                 'GHC.Types.False)
                                                              (GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    'GHC.Maybe.Nothing
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R Lib.Exp))
                                                            GHC.Generics.:+: GHC.Generics.M1
                                                                               GHC.Generics.C
                                                                               ('GHC.Generics.MetaCons
                                                                                  "EmptyS"
                                                                                  'GHC.Generics.PrefixI
                                                                                  'GHC.Types.False)
                                                                               (GHC.Generics.M1
                                                                                  GHC.Generics.S
                                                                                  ('GHC.Generics.MetaSel
                                                                                     'GHC.Maybe.Nothing
                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                     'GHC.Generics.DecidedLazy)
                                                                                  (GHC.Generics.K1
                                                                                     GHC.Generics.R
                                                                                     GHC.Integer.Type.Integer))>_R) <x2>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> Main.SimpleExpr
                        ds1
                          `cast`
                        ((GHC.Generics.N:M1[0]
                              <*>_N
                              <GHC.Generics.C>_P
                              <'GHC.Generics.MetaCons
                                 "SimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                              <GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R Lib.Exp)>_R ; GHC.Generics.N:M1[0]
                                                                                   <*>_N
                                                                                   <GHC.Generics.S>_P
                                                                                   <'GHC.Generics.MetaSel
                                                                                      'GHC.Maybe.Nothing
                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                      'GHC.Generics.DecidedLazy>_P
                                                                                   <GHC.Generics.K1
                                                                                      GHC.Generics.R
                                                                                      Lib.Exp>_R) <x2>_N ; GHC.Generics.N:K1[0]
                                                                                                               <*>_N
                                                                                                               <GHC.Generics.R>_P
                                                                                                               <Lib.Exp>_R
                                                                                                               <x2>_P)
                   GHC.Generics.R1 ds1
                   -> Main.EmptyS
                        ds1
                          `cast`
                        ((GHC.Generics.N:M1[0]
                              <*>_N
                              <GHC.Generics.C>_P
                              <'GHC.Generics.MetaCons
                                 "EmptyS" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                              <GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Maybe.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    GHC.Integer.Type.Integer)>_R ; GHC.Generics.N:M1[0]
                                                                       <*>_N
                                                                       <GHC.Generics.S>_P
                                                                       <'GHC.Generics.MetaSel
                                                                          'GHC.Maybe.Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy>_P
                                                                       <GHC.Generics.K1
                                                                          GHC.Generics.R
                                                                          GHC.Integer.Type.Integer>_R) <x2>_N ; GHC.Generics.N:K1[0]
                                                                                                                    <*>_N
                                                                                                                    <GHC.Generics.R>_P
                                                                                                                    <GHC.Integer.Type.Integer>_R
                                                                                                                    <x2>_P) }) -}
bd27ecf9372ed7121877564a83e27c87
  $fArbitrarySimpleExpr_randomSimpleExpr ::
    GHC.Types.Int -> Test.QuickCheck.Gen.Gen Main.SimpleExpr
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Main.$wrandomSimpleExpr ww1 }) -}
959ddd7450cfd9a9d7577ac72f051445
  $fGenericNonSimpleExpr :: GHC.Generics.Generic Main.NonSimpleExpr
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.NonSimpleExpr
                  Main.$fGenericNonSimpleExpr1
                    `cast`
                  (forall (x2 :: <*>_N).
                   <Main.NonSimpleExpr>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "NonSimpleExpr" "Main" "main" 'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "NonSimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Maybe.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1 GHC.Generics.R Lib.Exp))
                                   GHC.Generics.:+: GHC.Generics.M1
                                                      GHC.Generics.C
                                                      ('GHC.Generics.MetaCons
                                                         "EmptyNS"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      (GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Maybe.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            GHC.Integer.Type.Integer))>_R) ; Sub (Sym (Main.Rep_NonSimpleExpr[0]))) <x2>_N)
                  Main.$fArbitraryNonSimpleExpr_$cto -}
959ddd7450cfd9a9d7577ac72f051445
  $fGenericNonSimpleExpr1 ::
    Main.NonSimpleExpr
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "NonSimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.K1 GHC.Generics.R Lib.Exp)))
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "EmptyNS" 'GHC.Generics.PrefixI 'GHC.Types.False)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.K1 GHC.Generics.R GHC.Integer.Type.Integer)))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x2 (x3 :: Main.NonSimpleExpr) ->
                 case x3 of wild {
                   Main.NonSimpleExpr g1
                   -> GHC.Generics.L1
                        @ *
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "NonSimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R Lib.Exp)))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "EmptyNS" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R GHC.Integer.Type.Integer)))
                        @ x2
                        g1
                          `cast`
                        (Sym (GHC.Generics.N:K1[0]
                                  <*>_N
                                  <GHC.Generics.R>_P
                                  <Lib.Exp>_R
                                  <x2>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         'GHC.Maybe.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         Lib.Exp>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                <*>_N
                                                                                <GHC.Generics.C>_P
                                                                                <'GHC.Generics.MetaCons
                                                                                   "NonSimpleExpr"
                                                                                   'GHC.Generics.PrefixI
                                                                                   'GHC.Types.False>_P
                                                                                <GHC.Generics.M1
                                                                                   GHC.Generics.S
                                                                                   ('GHC.Generics.MetaSel
                                                                                      'GHC.Maybe.Nothing
                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                      'GHC.Generics.DecidedLazy)
                                                                                   (GHC.Generics.K1
                                                                                      GHC.Generics.R
                                                                                      Lib.Exp)>_R)) <x2>_N)
                   Main.EmptyNS g1
                   -> GHC.Generics.R1
                        @ *
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "NonSimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R Lib.Exp)))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "EmptyNS" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R GHC.Integer.Type.Integer)))
                        @ x2
                        g1
                          `cast`
                        (Sym (GHC.Generics.N:K1[0]
                                  <*>_N
                                  <GHC.Generics.R>_P
                                  <GHC.Integer.Type.Integer>_R
                                  <x2>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         'GHC.Maybe.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         GHC.Integer.Type.Integer>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                 <*>_N
                                                                                                 <GHC.Generics.C>_P
                                                                                                 <'GHC.Generics.MetaCons
                                                                                                    "EmptyNS"
                                                                                                    'GHC.Generics.PrefixI
                                                                                                    'GHC.Types.False>_P
                                                                                                 <GHC.Generics.M1
                                                                                                    GHC.Generics.S
                                                                                                    ('GHC.Generics.MetaSel
                                                                                                       'GHC.Maybe.Nothing
                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                    (GHC.Generics.K1
                                                                                                       GHC.Generics.R
                                                                                                       GHC.Integer.Type.Integer)>_R)) <x2>_N) }) -}
bd27ecf9372ed7121877564a83e27c87
  $fGenericSimpleExpr :: GHC.Generics.Generic Main.SimpleExpr
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.SimpleExpr
                  Main.$fGenericSimpleExpr1
                    `cast`
                  (forall (x2 :: <*>_N).
                   <Main.SimpleExpr>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "SimpleExpr" "Main" "main" 'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "SimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Maybe.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1 GHC.Generics.R Lib.Exp))
                                   GHC.Generics.:+: GHC.Generics.M1
                                                      GHC.Generics.C
                                                      ('GHC.Generics.MetaCons
                                                         "EmptyS"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      (GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Maybe.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            GHC.Integer.Type.Integer))>_R) ; Sub (Sym (Main.Rep_SimpleExpr[0]))) <x2>_N)
                  Main.$fArbitrarySimpleExpr_$cto -}
bd27ecf9372ed7121877564a83e27c87
  $fGenericSimpleExpr1 ::
    Main.SimpleExpr
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "SimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.K1 GHC.Generics.R Lib.Exp)))
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "EmptyS" 'GHC.Generics.PrefixI 'GHC.Types.False)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  'GHC.Maybe.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.K1 GHC.Generics.R GHC.Integer.Type.Integer)))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x2 (x3 :: Main.SimpleExpr) ->
                 case x3 of wild {
                   Main.SimpleExpr g1
                   -> GHC.Generics.L1
                        @ *
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "SimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R Lib.Exp)))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "EmptyS" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R GHC.Integer.Type.Integer)))
                        @ x2
                        g1
                          `cast`
                        (Sym (GHC.Generics.N:K1[0]
                                  <*>_N
                                  <GHC.Generics.R>_P
                                  <Lib.Exp>_R
                                  <x2>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         'GHC.Maybe.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         Lib.Exp>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                <*>_N
                                                                                <GHC.Generics.C>_P
                                                                                <'GHC.Generics.MetaCons
                                                                                   "SimpleExpr"
                                                                                   'GHC.Generics.PrefixI
                                                                                   'GHC.Types.False>_P
                                                                                <GHC.Generics.M1
                                                                                   GHC.Generics.S
                                                                                   ('GHC.Generics.MetaSel
                                                                                      'GHC.Maybe.Nothing
                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                      'GHC.Generics.DecidedLazy)
                                                                                   (GHC.Generics.K1
                                                                                      GHC.Generics.R
                                                                                      Lib.Exp)>_R)) <x2>_N)
                   Main.EmptyS g1
                   -> GHC.Generics.R1
                        @ *
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "SimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R Lib.Exp)))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "EmptyS" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Maybe.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R GHC.Integer.Type.Integer)))
                        @ x2
                        g1
                          `cast`
                        (Sym (GHC.Generics.N:K1[0]
                                  <*>_N
                                  <GHC.Generics.R>_P
                                  <GHC.Integer.Type.Integer>_R
                                  <x2>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         'GHC.Maybe.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         GHC.Integer.Type.Integer>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                 <*>_N
                                                                                                 <GHC.Generics.C>_P
                                                                                                 <'GHC.Generics.MetaCons
                                                                                                    "EmptyS"
                                                                                                    'GHC.Generics.PrefixI
                                                                                                    'GHC.Types.False>_P
                                                                                                 <GHC.Generics.M1
                                                                                                    GHC.Generics.S
                                                                                                    ('GHC.Generics.MetaSel
                                                                                                       'GHC.Maybe.Nothing
                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                    (GHC.Generics.K1
                                                                                                       GHC.Generics.R
                                                                                                       GHC.Integer.Type.Integer)>_R)) <x2>_N) }) -}
959ddd7450cfd9a9d7577ac72f051445
  $fShowNonSimpleExpr :: GHC.Show.Show Main.NonSimpleExpr
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.NonSimpleExpr
                  Main.$fShowNonSimpleExpr_$cshowsPrec
                  Main.$fShowNonSimpleExpr_$cshow
                  Main.$fShowNonSimpleExpr_$cshowList -}
959ddd7450cfd9a9d7577ac72f051445
  $fShowNonSimpleExpr1 ::
    Main.NonSimpleExpr -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (x2 :: Main.NonSimpleExpr)
                   (s :: GHC.Base.String)[OneShot] ->
                 case x2 of wild {
                   Main.NonSimpleExpr e
                   -> GHC.Base.++ @ GHC.Types.Char (Lib.$fShowExp_$cshow e) s
                   Main.EmptyNS n
                   -> case GHC.Show.$w$cshowsPrec4
                             0#
                             n
                             (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                      GHC.Base.++_$s++ @ GHC.Types.Char s ww3 ww4 } }) -}
959ddd7450cfd9a9d7577ac72f051445
  $fShowNonSimpleExpr_$cshow :: Main.NonSimpleExpr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.NonSimpleExpr) ->
                 case ds of wild {
                   Main.NonSimpleExpr e -> Lib.$fShowExp_$cshow e
                   Main.EmptyNS n -> GHC.Show.$fShowInteger_$cshow n }) -}
959ddd7450cfd9a9d7577ac72f051445
  $fShowNonSimpleExpr_$cshowList ::
    [Main.NonSimpleExpr] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.NonSimpleExpr]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Main.NonSimpleExpr
                   Main.$fShowNonSimpleExpr1
                   ls
                   s) -}
959ddd7450cfd9a9d7577ac72f051445
  $fShowNonSimpleExpr_$cshowsPrec ::
    GHC.Types.Int -> Main.NonSimpleExpr -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Main.NonSimpleExpr)
                   (w3 :: GHC.Base.String) ->
                 Main.$fShowNonSimpleExpr1 w2 w3) -}
ff15942e0a15108e096716ca4479d40d
  $fShowOps :: GHC.Show.Show Main.Ops
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Ops
                  Main.$fShowOps_$cshowsPrec
                  Main.$fShowOps_$cshow
                  Main.$fShowOps_$cshowList -}
ff15942e0a15108e096716ca4479d40d
  $fShowOps1 :: Main.Ops -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: (\ (w1 :: Main.Ops) (w2 :: GHC.Base.String) ->
                 Main.$w$cshowsPrec 0# w1 w2) -}
bebafd6b555dc8413dedba70d2ed2ae6
  $fShowOps2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
984f6dd989532746cc7231a7af9672d1
  $fShowOps3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("getString = "#) -}
be642b8ff319419bf1f84d2537651169
  $fShowOps4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowOps5) -}
1794004de520fdad5d7919f1044e415a
  $fShowOps5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ops {"#) -}
81758760a7a2d964a89a81d22eec996c
  $fShowOps6 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   Main.$fShowOps7) -}
6e6528daaa56b98ee547d8380dc13479
  $fShowOps7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowOps2) -}
ff15942e0a15108e096716ca4479d40d
  $fShowOps_$cshow :: Main.Ops -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x2 :: Main.Ops) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Main.$fShowOps4
                   (GHC.CString.unpackAppendCString#
                      Main.$fShowOps3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.$fShow(,)3
                         (GHC.Show.showLitString
                            x2 `cast` (Main.N:Ops[0])
                            Main.$fShowOps6)))) -}
ff15942e0a15108e096716ca4479d40d
  $fShowOps_$cshowList :: [Main.Ops] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Ops]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Ops Main.$fShowOps1 ls s) -}
ff15942e0a15108e096716ca4479d40d
  $fShowOps_$cshowsPrec ::
    GHC.Types.Int -> Main.Ops -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Main.Ops)
                   (w3 :: GHC.Base.String) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec ww1 w2 w3 }) -}
bd27ecf9372ed7121877564a83e27c87
  $fShowSimpleExpr :: GHC.Show.Show Main.SimpleExpr
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.SimpleExpr
                  Main.$fShowSimpleExpr_$cshowsPrec
                  Main.$fShowSimpleExpr_$cshow
                  Main.$fShowSimpleExpr_$cshowList -}
bd27ecf9372ed7121877564a83e27c87
  $fShowSimpleExpr1 ::
    Main.SimpleExpr -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (x2 :: Main.SimpleExpr)
                   (s :: GHC.Base.String)[OneShot] ->
                 case x2 of wild {
                   Main.SimpleExpr e
                   -> GHC.Base.++ @ GHC.Types.Char (Lib.$fShowExp_$cshow e) s
                   Main.EmptyS n
                   -> case GHC.Show.$w$cshowsPrec4
                             0#
                             n
                             (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                      GHC.Base.++_$s++ @ GHC.Types.Char s ww3 ww4 } }) -}
bd27ecf9372ed7121877564a83e27c87
  $fShowSimpleExpr_$cshow :: Main.SimpleExpr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.SimpleExpr) ->
                 case ds of wild {
                   Main.SimpleExpr e -> Lib.$fShowExp_$cshow e
                   Main.EmptyS n -> GHC.Show.$fShowInteger_$cshow n }) -}
bd27ecf9372ed7121877564a83e27c87
  $fShowSimpleExpr_$cshowList :: [Main.SimpleExpr] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.SimpleExpr]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Main.SimpleExpr
                   Main.$fShowSimpleExpr1
                   ls
                   s) -}
bd27ecf9372ed7121877564a83e27c87
  $fShowSimpleExpr_$cshowsPrec ::
    GHC.Types.Int -> Main.SimpleExpr -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Main.SimpleExpr)
                   (w3 :: GHC.Base.String) ->
                 Main.$fShowSimpleExpr1 w2 w3) -}
15611557e4d02962628a148c9b2e181d
  $s$fArbitraryNonEmptyList ::
    Test.QuickCheck.Arbitrary.Arbitrary
      (Test.QuickCheck.Modifiers.NonEmptyList GHC.Integer.Type.Integer)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Test.QuickCheck.Modifiers.NonEmptyList GHC.Integer.Type.Integer)
                  (Test.QuickCheck.Modifiers.$fArbitraryNonEmptyList2
                     @ GHC.Integer.Type.Integer
                     Test.QuickCheck.Arbitrary.$fArbitraryInteger)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                            (Test.QuickCheck.Modifiers.N:NonEmptyList[0] <GHC.Integer.Type.Integer>_N)))
                  (\ (ds :: Test.QuickCheck.Modifiers.NonEmptyList
                              GHC.Integer.Type.Integer) ->
                   Test.QuickCheck.Modifiers.$fArbitraryNonEmptyList1
                     @ GHC.Integer.Type.Integer
                     (Test.QuickCheck.Arbitrary.shrinkList
                        @ GHC.Integer.Type.Integer
                        Test.QuickCheck.Arbitrary.$fArbitraryInteger_$sshrinkIntegral
                        ds
                          `cast`
                        (Test.QuickCheck.Modifiers.N:NonEmptyList[0] <GHC.Integer.Type.Integer>_N))) -}
d4a3819166c3552bef12582a6d707c8c
  $s$fArbitraryPositive ::
    Test.QuickCheck.Arbitrary.Arbitrary
      (Test.QuickCheck.Modifiers.Positive
         (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Test.QuickCheck.Modifiers.Positive
                       (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer))
                  (Test.QuickCheck.Modifiers.$fArbitraryPositive_$carbitrary
                     @ (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
                     Main.$s$fArbitraryPositive_$s$fNumSmall
                     Main.$s$fArbitraryPositive_$s$fOrdSmall
                     Main.$s$fArbitraryPositive_$s$fArbitrarySmall)
                  (Test.QuickCheck.Modifiers.$fArbitraryPositive_$cshrink
                     @ (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
                     Main.$s$fArbitraryPositive_$s$fNumSmall
                     Main.$s$fArbitraryPositive_$s$fOrdSmall
                     Main.$s$fArbitraryPositive_$s$fArbitrarySmall) -}
51185f0ae46bc3a94178abee06166bac
  $s$fArbitraryPositive_$s$fArbitrarySmall ::
    Test.QuickCheck.Arbitrary.Arbitrary
      (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
                  Test.QuickCheck.Arbitrary.$fArbitraryInteger_$sarbitrarySizedIntegral
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                            (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R)))
                  (Test.QuickCheck.Modifiers.$fArbitrarySmall_$cshrink
                     @ GHC.Integer.Type.Integer
                     GHC.Real.$fIntegralInteger) -}
4076bcdde1dad4dc0a42ae880c1ef603
  $s$fArbitraryPositive_$s$fEqSmall ::
    GHC.Classes.Eq
      (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
                  GHC.Integer.Type.eqInteger
                    `cast`
                  (Sym (Test.QuickCheck.Modifiers.N:Small[0]
                            <GHC.Integer.Type.Integer>_R)
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R)
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Integer.Type.neqInteger
                    `cast`
                  (Sym (Test.QuickCheck.Modifiers.N:Small[0]
                            <GHC.Integer.Type.Integer>_R)
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R)
                   ->_R <GHC.Types.Bool>_R) -}
f5a5bbbdbbe125319efd349e4c564150
  $s$fArbitraryPositive_$s$fNumSmall ::
    GHC.Num.Num
      (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
                  GHC.Integer.Type.plusInteger
                    `cast`
                  (Sym (Test.QuickCheck.Modifiers.N:Small[0]
                            <GHC.Integer.Type.Integer>_R)
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R)
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R))
                  GHC.Integer.Type.minusInteger
                    `cast`
                  (Sym (Test.QuickCheck.Modifiers.N:Small[0]
                            <GHC.Integer.Type.Integer>_R)
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R)
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R))
                  GHC.Integer.Type.timesInteger
                    `cast`
                  (Sym (Test.QuickCheck.Modifiers.N:Small[0]
                            <GHC.Integer.Type.Integer>_R)
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R)
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R))
                  GHC.Integer.Type.negateInteger
                    `cast`
                  (Sym (Test.QuickCheck.Modifiers.N:Small[0]
                            <GHC.Integer.Type.Integer>_R)
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R))
                  GHC.Integer.Type.absInteger
                    `cast`
                  (Sym (Test.QuickCheck.Modifiers.N:Small[0]
                            <GHC.Integer.Type.Integer>_R)
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R))
                  GHC.Integer.Type.signumInteger
                    `cast`
                  (Sym (Test.QuickCheck.Modifiers.N:Small[0]
                            <GHC.Integer.Type.Integer>_R)
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R))
                  GHC.Num.$fNumInteger_$cfromInteger
                    `cast`
                  (<GHC.Integer.Type.Integer>_R
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R)) -}
5c54d95366d35faff04f240f0ae6604c
  $s$fArbitraryPositive_$s$fOrdSmall ::
    GHC.Classes.Ord
      (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
                  Main.$s$fArbitraryPositive_$s$fEqSmall
                  GHC.Integer.Type.compareInteger
                    `cast`
                  (Sym (Test.QuickCheck.Modifiers.N:Small[0]
                            <GHC.Integer.Type.Integer>_R)
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R)
                   ->_R <GHC.Types.Ordering>_R)
                  GHC.Integer.Type.ltInteger
                    `cast`
                  (Sym (Test.QuickCheck.Modifiers.N:Small[0]
                            <GHC.Integer.Type.Integer>_R)
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R)
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Integer.Type.leInteger
                    `cast`
                  (Sym (Test.QuickCheck.Modifiers.N:Small[0]
                            <GHC.Integer.Type.Integer>_R)
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R)
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Integer.Type.gtInteger
                    `cast`
                  (Sym (Test.QuickCheck.Modifiers.N:Small[0]
                            <GHC.Integer.Type.Integer>_R)
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R)
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Integer.Type.geInteger
                    `cast`
                  (Sym (Test.QuickCheck.Modifiers.N:Small[0]
                            <GHC.Integer.Type.Integer>_R)
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R)
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Integer.Type.$fOrdInteger_$cmax
                    `cast`
                  (Sym (Test.QuickCheck.Modifiers.N:Small[0]
                            <GHC.Integer.Type.Integer>_R)
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R)
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R))
                  GHC.Integer.Type.$fOrdInteger_$cmin
                    `cast`
                  (Sym (Test.QuickCheck.Modifiers.N:Small[0]
                            <GHC.Integer.Type.Integer>_R)
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R)
                   ->_R Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R)) -}
318f10b4ce167eefa25207d833eabb06
  $s$fArbitrarySet2 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: Test.QuickCheck.Random.QCGen) (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w2 of ww7 { GHC.Types.I# ww8 ->
                 Test.QuickCheck.Gen.$wlistOf
                   @ GHC.Types.Char
                   Test.QuickCheck.Arbitrary.$fArbitraryChar_$carbitrary
                   ww1
                   ww2
                   ww3
                   ww4
                   ww8 } }) -}
697877124cd3aba1cf57240b4f03d671
  $s$fArbitrarySmall_$cshrink ::
    Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer
    -> [Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer]
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: Test.QuickCheck.Modifiers.Small
                            GHC.Integer.Type.Integer) ->
                 Test.QuickCheck.Arbitrary.$wshrinkIntegral
                   @ GHC.Integer.Type.Integer
                   GHC.Num.$fNumInteger
                   GHC.Integer.Type.$fEqInteger
                   GHC.Integer.Type.ltInteger
                   GHC.Integer.Type.gtInteger
                   GHC.Integer.Type.geInteger
                   GHC.Real.$fIntegralInteger_$cquot
                   w1
                     `cast`
                   (Test.QuickCheck.Modifiers.N:Small[0]
                        <GHC.Integer.Type.Integer>_R))
                  `cast`
                (<Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer>_R
                 ->_R ([Sym (Test.QuickCheck.Modifiers.N:Small[0]
                                 <GHC.Integer.Type.Integer>_R)])_R) -}
5e6a1f348151fa2c372d68a872509b90
  $s$fArbitrary[] ::
    Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Char]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Char]
                  (Test.QuickCheck.Arbitrary.$fArbitrarySet2
                     @ GHC.Types.Char
                     Test.QuickCheck.Arbitrary.$fArbitraryChar)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Char]>_R))
                  (\ (eta :: [GHC.Types.Char]) ->
                   Test.QuickCheck.Arbitrary.shrinkList
                     @ GHC.Types.Char
                     Test.QuickCheck.Arbitrary.$fArbitraryChar_$cshrink
                     eta) -}
de9d97dde796556690f3b0f70d5763a2
  $s$fArbitrary[]_$cshrink :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [GHC.Types.Char]) ->
                 Test.QuickCheck.Arbitrary.shrinkList
                   @ GHC.Types.Char
                   Test.QuickCheck.Arbitrary.$fArbitraryChar_$cshrink
                   eta) -}
6ac80a157655f402765c40cf0712706e
  $s$fShowNonEmptyList ::
    GHC.Show.Show
      (Test.QuickCheck.Modifiers.NonEmptyList GHC.Integer.Type.Integer)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Test.QuickCheck.Modifiers.NonEmptyList GHC.Integer.Type.Integer)
                  (Test.QuickCheck.Modifiers.$fShowNonEmptyList_$cshowsPrec
                     @ GHC.Integer.Type.Integer
                     GHC.Show.$fShowInteger)
                  (\ (x2 :: Test.QuickCheck.Modifiers.NonEmptyList
                              GHC.Integer.Type.Integer) ->
                   GHC.CString.unpackAppendCString#
                     Test.QuickCheck.Modifiers.$fShowNonEmptyList2
                     (GHC.CString.unpackAppendCString#
                        Test.QuickCheck.Modifiers.$fShowNonEmptyList1
                        (GHC.Show.$fShowInteger_$cshowList
                           x2
                             `cast`
                           (Test.QuickCheck.Modifiers.N:NonEmptyList[0] <GHC.Integer.Type.Integer>_N)
                           Test.QuickCheck.Modifiers.$fReadASCIIString7)))
                  (\ (ls :: [Test.QuickCheck.Modifiers.NonEmptyList
                               GHC.Integer.Type.Integer])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Test.QuickCheck.Modifiers.NonEmptyList GHC.Integer.Type.Integer)
                     (Test.QuickCheck.Modifiers.$fShowNonEmptyList_$cshowsPrec
                        @ GHC.Integer.Type.Integer
                        GHC.Show.$fShowInteger
                        Test.QuickCheck.Modifiers.$fShowFixed1)
                     ls
                     s) -}
16319e8c55b6abba70277a22e445fc11
  $s$fShowNonEmptyList_$cshowList ::
    [Test.QuickCheck.Modifiers.NonEmptyList GHC.Integer.Type.Integer]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Test.QuickCheck.Modifiers.NonEmptyList
                             GHC.Integer.Type.Integer])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Test.QuickCheck.Modifiers.NonEmptyList GHC.Integer.Type.Integer)
                   (Test.QuickCheck.Modifiers.$fShowNonEmptyList_$cshowsPrec
                      @ GHC.Integer.Type.Integer
                      GHC.Show.$fShowInteger
                      Test.QuickCheck.Modifiers.$fShowFixed1)
                   ls
                   s) -}
eb90c3bfc53e6dd40b9d6e8970ff26bf
  $s$fShowNonEmptyList_$cshowsPrec ::
    GHC.Types.Int
    -> Test.QuickCheck.Modifiers.NonEmptyList GHC.Integer.Type.Integer
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Test.QuickCheck.Modifiers.NonEmptyList
                            GHC.Integer.Type.Integer) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Test.QuickCheck.Modifiers.$w$cshowsPrec4
                   @ GHC.Integer.Type.Integer
                   GHC.Show.$fShowInteger
                   ww1
                   w2 }) -}
4d69c2ca72cd25961b41e0a31368e1ee
  $s$fShowPositive ::
    GHC.Show.Show
      (Test.QuickCheck.Modifiers.Positive
         (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Test.QuickCheck.Modifiers.Positive
                       (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer))
                  (Test.QuickCheck.Modifiers.$fShowPositive_$cshowsPrec
                     @ (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
                     Main.$s$fShowPositive_$s$fShowSmall)
                  (\ (x2 :: Test.QuickCheck.Modifiers.Positive
                              (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)) ->
                   GHC.CString.unpackAppendCString#
                     Test.QuickCheck.Modifiers.$fShowPositive2
                     (GHC.CString.unpackAppendCString#
                        Test.QuickCheck.Modifiers.$fShowPositive1
                        (Test.QuickCheck.Modifiers.$fShowSmall_$cshowsPrec
                           @ GHC.Integer.Type.Integer
                           GHC.Show.$fShowInteger
                           Test.QuickCheck.Modifiers.$fShowFixed1
                           x2
                             `cast`
                           (Test.QuickCheck.Modifiers.N:Positive[0]
                                <Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer>_R)
                           Test.QuickCheck.Modifiers.$fReadASCIIString7)))
                  (\ (ls :: [Test.QuickCheck.Modifiers.Positive
                               (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Test.QuickCheck.Modifiers.Positive
                          (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer))
                     (Test.QuickCheck.Modifiers.$fShowPositive_$cshowsPrec
                        @ (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
                        Main.$s$fShowPositive_$s$fShowSmall
                        Test.QuickCheck.Modifiers.$fShowFixed1)
                     ls
                     s) -}
d2648403709edfc1e64a518e6110aebe
  $s$fShowPositive_$cshowList ::
    [Test.QuickCheck.Modifiers.Positive
       (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Test.QuickCheck.Modifiers.Positive
                             (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Test.QuickCheck.Modifiers.Positive
                        (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer))
                   (Test.QuickCheck.Modifiers.$fShowPositive_$cshowsPrec
                      @ (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
                      Main.$s$fShowPositive_$s$fShowSmall
                      Test.QuickCheck.Modifiers.$fShowFixed1)
                   ls
                   s) -}
30a72b061db2aa4eda0adab3f85b541d
  $s$fShowPositive_$cshowsPrec ::
    GHC.Types.Int
    -> Test.QuickCheck.Modifiers.Positive
         (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Test.QuickCheck.Modifiers.Positive
                            (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Test.QuickCheck.Modifiers.$w$cshowsPrec8
                   @ (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
                   Main.$s$fShowPositive_$s$fShowSmall
                   ww1
                   w2 }) -}
1a383f8e49d56432525e443181f1ae92
  $s$fShowPositive_$s$fShowSmall ::
    GHC.Show.Show
      (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
                  (Test.QuickCheck.Modifiers.$fShowSmall_$cshowsPrec
                     @ GHC.Integer.Type.Integer
                     GHC.Show.$fShowInteger)
                  (\ (x2 :: Test.QuickCheck.Modifiers.Small
                              GHC.Integer.Type.Integer) ->
                   GHC.CString.unpackAppendCString#
                     Test.QuickCheck.Modifiers.$fShowSmall2
                     (GHC.CString.unpackAppendCString#
                        Test.QuickCheck.Modifiers.$fShowSmall1
                        (GHC.Show.$fShowInteger_$cshowsPrec
                           Test.QuickCheck.Modifiers.$fShowFixed1
                           x2
                             `cast`
                           (Test.QuickCheck.Modifiers.N:Small[0] <GHC.Integer.Type.Integer>_R)
                           Test.QuickCheck.Modifiers.$fReadASCIIString7)))
                  (\ (ls :: [Test.QuickCheck.Modifiers.Small
                               GHC.Integer.Type.Integer])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
                     (Test.QuickCheck.Modifiers.$fShowSmall_$cshowsPrec
                        @ GHC.Integer.Type.Integer
                        GHC.Show.$fShowInteger
                        Test.QuickCheck.Modifiers.$fShowFixed1)
                     ls
                     s) -}
93599f3b137dd85b681adb18aefaa291
  $s$fShowSmall_$cshowList ::
    [Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Test.QuickCheck.Modifiers.Small
                             GHC.Integer.Type.Integer])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
                   (Test.QuickCheck.Modifiers.$fShowSmall_$cshowsPrec
                      @ GHC.Integer.Type.Integer
                      GHC.Show.$fShowInteger
                      Test.QuickCheck.Modifiers.$fShowFixed1)
                   ls
                   s) -}
8d870c3ae737abf57edf3440f844461e
  $s$fShowSmall_$cshowsPrec ::
    GHC.Types.Int
    -> Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Test.QuickCheck.Modifiers.$w$cshowsPrec11
                   @ GHC.Integer.Type.Integer
                   GHC.Show.$fShowInteger
                   ww1
                   w2 }) -}
4fc159bab2942b8209c2ffe670879919
  $s$fTestable->12 ::
    (Main.Ops
     -> Main.Ops
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: Main.Ops
                          -> Main.Ops
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$ww2 w1 ww1 ww2 ww3 ww4 w3 }) -}
f3fee1b7606c38c95fd686d901f5a98e
  $s$fTestable->13 ::
    (Main.Ops
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: Main.Ops
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wlvl1 w1 ww1 ww2 ww3 ww4 w3 }) -}
e68848cb9fcfec4583ed1368534c3f10
  $s$fTestable->16 ::
    (Main.Ops
     -> Main.Ops
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: Main.Ops
                          -> Main.Ops
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$ww1 w1 ww1 ww2 ww3 ww4 w3 }) -}
cc650f9738abbb94f806d29bab0f0e10
  $s$fTestable->17 ::
    (Main.Ops
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: Main.Ops
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wlvl2 w1 ww1 ww2 ww3 ww4 w3 }) -}
8c7abb34b212ca433da77edcf8af07dd
  $s$fTestable->18 ::
    (GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wlvl3 w1 ww1 ww2 ww3 ww4 w3 }) -}
1c00a8712ef43b353ce821c2961ad940
  $s$fTestable->2 ::
    (GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wlvl w1 ww1 ww2 ww3 ww4 w3 }) -}
b920714cfac778d297a1ae85ac73d989
  $s$fTestable->27 ::
    ([GHC.Types.Char] -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: [GHC.Types.Char] -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable4 w1 ww1 ww2 ww3 ww4 w3 }) -}
52207a26642aa9ebb3565700e62d917d
  $s$fTestable->29 ::
    (GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Base.String
     -> GHC.Base.String
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Base.String
                          -> GHC.Base.String
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$ww3 w1 ww1 ww2 ww3 ww4 w3 }) -}
f0ece8ee44b1a14855fccc0e7aca2135
  $s$fTestable->3 ::
    (GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable w1 ww1 ww2 ww3 ww4 w3 }) -}
b4f0b51e11ab8148e59db5578892623b
  $s$fTestable->30 ::
    (GHC.Integer.Type.Integer
     -> GHC.Base.String
     -> GHC.Base.String
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: GHC.Integer.Type.Integer
                          -> GHC.Base.String
                          -> GHC.Base.String
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wlvl4 w1 ww1 ww2 ww3 ww4 w3 }) -}
3fbbb266139636eff669a83b2f22b5ba
  $s$fTestable->31 ::
    ([GHC.Types.Char]
     -> GHC.Base.String -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: [GHC.Types.Char]
                          -> GHC.Base.String -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wlvl5 w1 ww1 ww2 ww3 ww4 w3 }) -}
ac614f068839392612458341535c44ef
  $s$fTestable->37 ::
    (Main.Ops
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: Main.Ops
                          -> GHC.Base.String
                          -> GHC.Base.String
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$ww4 w1 ww1 ww2 ww3 ww4 w3 }) -}
9768c0ab654717c691e47ea417f3e002
  $s$fTestable->38 ::
    ([GHC.Types.Char]
     -> GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: [GHC.Types.Char]
                          -> GHC.Base.String
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable5 w1 ww1 ww2 ww3 ww4 w3 }) -}
4da329ae524682951a2c527b5a7e2f26
  $s$fTestable->39 ::
    ([GHC.Types.Char]
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: [GHC.Types.Char]
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable6 w1 ww1 ww2 ww3 ww4 w3 }) -}
b83c6c9ab7b3703fe25a30ceceb65831
  $s$fTestable->4 ::
    (GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable1 w1 ww1 ww2 ww3 ww4 w3 }) -}
f3c49a9fad1f5fde4b3345ef5c5e7edb
  $s$fTestable->42 ::
    ([GHC.Types.Char]
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: [GHC.Types.Char]
                          -> GHC.Base.String
                          -> GHC.Base.String
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$ww5 w1 ww1 ww2 ww3 ww4 w3 }) -}
b7a3ffcabebcdb0e23b75d7bb5fe6cac
  $s$fTestable->47 ::
    (Main.Ops
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: Main.Ops
                          -> GHC.Base.String
                          -> GHC.Base.String
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$ww6 w1 ww1 ww2 ww3 ww4 w3 }) -}
713ac47c6a62b5d722f009106e61f4f0
  $s$fTestable->48 ::
    ([GHC.Types.Char]
     -> GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: [GHC.Types.Char]
                          -> GHC.Base.String
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wlvl6 w1 ww1 ww2 ww3 ww4 w3 }) -}
c98f1a55f240453a19d05ef744c5a1f7
  $s$fTestable->49 ::
    ([GHC.Types.Char]
     -> GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: [GHC.Types.Char]
                          -> GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable7 w1 ww1 ww2 ww3 ww4 w3 }) -}
8bf2f47425ab122dc1bc9b18627f2230
  $s$fTestable->5 ::
    (GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable2 w1 ww1 ww2 ww3 ww4 w3 }) -}
da32d284e319be6d967e82eb5cf34c57
  $s$fTestable->6 ::
    (GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable3 w1 ww1 ww2 ww3 ww4 w3 }) -}
2eb50699e94b758302258d67e3ad8f74
  $tc'EmptyNS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16134196912201227611##
                   15707501730052633635##
                   Main.$trModule
                   Main.$tc'EmptyNS2
                   0#
                   Main.$tc'EmptyNS1) -}
2088430c631e96025aaae83a8193b1d4
  $tc'EmptyNS1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
926653bbf0606bfa3ad73ddda35c18e4
  $tc'EmptyNS2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'EmptyNS3) -}
b4184123782efeeb98bad60b99ff9058
  $tc'EmptyNS3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EmptyNS"#) -}
fef97c5ff98754db33efbab4261e221d
  $tc'EmptyS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6537190005283868316##
                   15513577603277903628##
                   Main.$trModule
                   Main.$tc'EmptyS2
                   0#
                   Main.$tc'EmptyS1) -}
d22e3e3f1d0d289f66d43eb2f9067caa
  $tc'EmptyS1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
886631b43d273bfee83e2c2537befd3d
  $tc'EmptyS2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'EmptyS3) -}
8cc89fe29a46a446eafef25e22e9fd76
  $tc'EmptyS3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EmptyS"#) -}
57048d0ae36c3839469dbd0fb8b89ed7
  $tc'NonSimpleExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9839246206356970037##
                   9875714206377541167##
                   Main.$trModule
                   Main.$tc'NonSimpleExpr2
                   0#
                   Main.$tc'NonSimpleExpr1) -}
f46ac5c5bf11cea9fcea0488b8e6788b
  $tc'NonSimpleExpr1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1e3ae5a58b78d52639b09158a11ba392
  $tc'NonSimpleExpr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'NonSimpleExpr3) -}
666615b05df17f59b210192a2916749b
  $tc'NonSimpleExpr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NonSimpleExpr"#) -}
4603a2448009198b9021e4629ddf4bab
  $tc'Ops :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3944019856467178792##
                   16573038805599908911##
                   Main.$trModule
                   Main.$tc'Ops2
                   0#
                   Main.$tc'Ops1) -}
cc59a8467d580df4c8a50c9f5acdcb47
  $tc'Ops1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
84fea406d35eedd34f9855c1e952339f
  $tc'Ops2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Ops3) -}
6cbfe759da1effaf550722cdf2268cc1
  $tc'Ops3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Ops"#) -}
e7b20e5cbb2fcc4dbe97d99c4e3c13da
  $tc'SimpleExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17323627238363641027##
                   6018703845969865137##
                   Main.$trModule
                   Main.$tc'SimpleExpr2
                   0#
                   Main.$tc'SimpleExpr1) -}
390e33af79f4d1c6f5e5ea073d5daad4
  $tc'SimpleExpr1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e95564b3f38b2c9f72544290449f6554
  $tc'SimpleExpr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'SimpleExpr3) -}
26199a5b42b00676461d9107b2ee88ad
  $tc'SimpleExpr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SimpleExpr"#) -}
edd7cd13d8640cab4b13f66db726ca5f
  $tcNonSimpleExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13267534402021395785##
                   11680678516325334233##
                   Main.$trModule
                   Main.$tcNonSimpleExpr1
                   0#
                   GHC.Types.krep$*) -}
0920c5cc34b83af85c11eb85e5b62cea
  $tcNonSimpleExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcNonSimpleExpr2) -}
f5cd3c376b6f9bd664eb9ebf88639e45
  $tcNonSimpleExpr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NonSimpleExpr"#) -}
2e9286527844ac99fcbca0d84be6126f
  $tcOps :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9594674588266937521##
                   6256896831774824357##
                   Main.$trModule
                   Main.$tcOps1
                   0#
                   GHC.Types.krep$*) -}
8687e51752f7f3a73d0dd6bf58fd1db5
  $tcOps1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcOps2) -}
4df35ba6edd4b1328cfcb619798cf019
  $tcOps2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ops"#) -}
1f274a672e304e64e48e9c6bdb3248bb
  $tcSimpleExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   88679925665669474##
                   7236511753571751375##
                   Main.$trModule
                   Main.$tcSimpleExpr1
                   0#
                   GHC.Types.krep$*) -}
c1623992f8068a1cb1f289d9776b1385
  $tcSimpleExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcSimpleExpr2) -}
14edaadaa7b54222ab1cf5ae9a96618d
  $tcSimpleExpr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SimpleExpr"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
ff15942e0a15108e096716ca4479d40d
  $w$cshowsPrec ::
    GHC.Prim.Int# -> Main.Ops -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w1 :: Main.Ops)
                   (w2 :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Main.$fShowOps4
                        (GHC.CString.unpackAppendCString#
                           Main.$fShowOps3
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.$fShow(,)3
                              (GHC.Show.showLitString
                                 w1 `cast` (Main.N:Ops[0])
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.$fShow(,)3
                                    (GHC.CString.unpackAppendCString# Main.$fShowOps2 w2)))))
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowOps4
                           (GHC.CString.unpackAppendCString#
                              Main.$fShowOps3
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.$fShow(,)3
                                 (GHC.Show.showLitString
                                    w1 `cast` (Main.N:Ops[0])
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.$fShow(,)3
                                       (GHC.CString.unpackAppendCString#
                                          Main.$fShowOps2
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.$fShow(,)2
                                             w2))))))) }) -}
d90936ec08d71c7f2f762ef779032c26
  $w$dTestable ::
    (GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ GHC.Integer.Type.Integer
                   @ (GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Test.QuickCheck.Arbitrary.$fArbitraryInteger
                   GHC.Show.$fShowInteger
                   Main.$s$fTestable->4
                     `cast`
                   ((<GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
2f31d348e59ca76be74544c12759d8e3
  $w$dTestable1 ::
    (GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ GHC.Integer.Type.Integer
                   @ (GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property)
                   Test.QuickCheck.Arbitrary.$fArbitraryInteger
                   GHC.Show.$fShowInteger
                   Main.$s$fTestable->5
                     `cast`
                   ((<GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
2a44db7b556a1a8c871f761ce0540902
  $w$dTestable2 ::
    (GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ GHC.Integer.Type.Integer
                   @ (GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property)
                   Test.QuickCheck.Arbitrary.$fArbitraryInteger
                   GHC.Show.$fShowInteger
                   Main.$s$fTestable->6
                     `cast`
                   ((<GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
d8e8611e231d13b05a0509b30e57f517
  $w$dTestable3 ::
    (GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ GHC.Integer.Type.Integer
                   @ Test.QuickCheck.Property.Property
                   Test.QuickCheck.Arbitrary.$fArbitraryInteger
                   GHC.Show.$fShowInteger
                   Test.QuickCheck.Property.$fTestableProperty1
                     `cast`
                   ((<Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                 <Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
c69494aee6b4e16d7281db7fe2ef8993
  $w$dTestable4 ::
    ([GHC.Types.Char] -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: [GHC.Types.Char]
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ [GHC.Types.Char]
                   @ Test.QuickCheck.Property.Property
                   Main.$s$fArbitrary[]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   Test.QuickCheck.Property.$fTestableProperty1
                     `cast`
                   ((<Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                 <Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
260b5d4953b6730ff811e9e8df6fd412
  $w$dTestable5 ::
    ([GHC.Types.Char]
     -> GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: [GHC.Types.Char]
                          -> GHC.Base.String
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ [GHC.Types.Char]
                   @ (GHC.Base.String
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Main.$s$fArbitrary[]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   Main.$s$fTestable->39
                     `cast`
                   ((<[GHC.Types.Char]
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <[GHC.Types.Char]
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
b6ed40c6827d4c27c60919c9f0682c07
  $w$dTestable6 ::
    ([GHC.Types.Char]
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: [GHC.Types.Char]
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ [GHC.Types.Char]
                   @ (GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property)
                   Main.$s$fArbitrary[]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   Main.$s$fTestable->5
                     `cast`
                   ((<GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
bfc673b783b457efdf8bd3136dc20340
  $w$dTestable7 ::
    ([GHC.Types.Char]
     -> GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: [GHC.Types.Char]
                          -> GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ [GHC.Types.Char]
                   @ (GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property)
                   Main.$s$fArbitrary[]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   Main.$s$fTestable->6
                     `cast`
                   ((<GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
a214bc7f7b968bade59123fdba9f8a4f
  $w$dTestable8 ::
    (Lib.Exp -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: Lib.Exp -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Lib.Exp
                   @ Test.QuickCheck.Property.Property
                   Main.$fArbitraryExp
                   Lib.$fShowExp
                   Test.QuickCheck.Property.$fTestableProperty1
                     `cast`
                   ((<Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                 <Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
6074d43e3c00ee57a017b81247edd4d5
  $wcpsExp_test ::
    Lib.Exp
    -> Lib.Exp
    -> GHC.Integer.Type.Integer
    -> (# Lib.Exp, GHC.Integer.Type.Integer #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [2] -}
7e5549e4d32e813565995a845e9007bc
  $wlvl ::
    (GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ GHC.Integer.Type.Integer
                   @ (GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Test.QuickCheck.Arbitrary.$fArbitraryInteger
                   GHC.Show.$fShowInteger
                   Main.$s$fTestable->3
                     `cast`
                   ((<GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
6158279b7899772931ddb1b273751496
  $wlvl1 ::
    (Main.Ops
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: Main.Ops
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.Ops
                   @ (GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryOps
                   Main.$fShowOps
                   Main.$s$fTestable->3
                     `cast`
                   ((<GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
9b401b2af9b578f58f1046113b887e7c
  $wlvl2 ::
    (Main.Ops
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: Main.Ops
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.Ops
                   @ (GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryOps
                   Main.$fShowOps
                   Main.$s$fTestable->18
                     `cast`
                   ((<GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
4de2b51f05feccc2c2a0ba9821dfe5b8
  $wlvl3 ::
    (GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ GHC.Integer.Type.Integer
                   @ (GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Test.QuickCheck.Arbitrary.$fArbitraryInteger
                   GHC.Show.$fShowInteger
                   Main.$s$fTestable->2
                     `cast`
                   ((<GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
d8485466b8eef26b3ee2d3ec1679b4d6
  $wlvl4 ::
    (GHC.Integer.Type.Integer
     -> GHC.Base.String
     -> GHC.Base.String
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: GHC.Integer.Type.Integer
                          -> GHC.Base.String
                          -> GHC.Base.String
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ GHC.Integer.Type.Integer
                   @ (GHC.Base.String
                      -> GHC.Base.String -> Test.QuickCheck.Property.Property)
                   Test.QuickCheck.Arbitrary.$fArbitraryInteger
                   GHC.Show.$fShowInteger
                   Main.$s$fTestable->31
                     `cast`
                   ((<[GHC.Types.Char]
                      -> GHC.Base.String -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <[GHC.Types.Char]
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
25f61083dca2fb3cbfc24faf965120e6
  $wlvl5 ::
    ([GHC.Types.Char]
     -> GHC.Base.String -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: [GHC.Types.Char]
                          -> GHC.Base.String -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ [GHC.Types.Char]
                   @ (GHC.Base.String -> Test.QuickCheck.Property.Property)
                   Main.$s$fArbitrary[]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   Main.$s$fTestable->27
                     `cast`
                   ((<[GHC.Types.Char] -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <[GHC.Types.Char]
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
cafd81e4556fd0c08ebd04c1d3e2679f
  $wlvl6 ::
    ([GHC.Types.Char]
     -> GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: [GHC.Types.Char]
                          -> GHC.Base.String
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ [GHC.Types.Char]
                   @ (GHC.Base.String
                      -> GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property)
                   Main.$s$fArbitrary[]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   Main.$s$fTestable->49
                     `cast`
                   ((<[GHC.Types.Char]
                      -> GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <[GHC.Types.Char]
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
ef546577ff677b0a72fb3aa59a29ad59
  $wlvl7 :: GHC.Prim.Void# -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <B,A>x, Inline: [2] -}
e35d22b881319a6fb18f43645403abef
  $wlvl8 :: GHC.Prim.Void# -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <B,A>x, Inline: [2] -}
40dbcfe7a6232d8fe38b4d8f8d8106df
  $wlvl9 :: GHC.Prim.Void# -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <B,A>x, Inline: [2] -}
1a2f346e036940704d93ce111cbbb7de
  $wrandSimpleExp :: GHC.Prim.Int# -> Test.QuickCheck.Gen.Gen Lib.Exp
  {- Arity: 1, Strictness: <S,U>, Inline: [2] -}
959ddd7450cfd9a9d7577ac72f051445
  $wrandomNonSimpleExpr ::
    GHC.Prim.Int# -> Test.QuickCheck.Gen.Gen Main.NonSimpleExpr
  {- Arity: 1, Strictness: <S,U>, Inline: [2] -}
bd27ecf9372ed7121877564a83e27c87
  $wrandomSimpleExpr ::
    GHC.Prim.Int# -> Test.QuickCheck.Gen.Gen Main.SimpleExpr
  {- Arity: 1, Strictness: <S,U>, Inline: [2] -}
21597305b0c05bc6a7e1d20b8b603ed8
  $wtests ::
    ([GHC.Types.Char]
     -> Main.Ops
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: [GHC.Types.Char]
                          -> Main.Ops
                          -> GHC.Base.String
                          -> GHC.Base.String
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ [GHC.Types.Char]
                   @ (Main.Ops
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Main.$s$fArbitrary[]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   Main.$s$fTestable->47
                     `cast`
                   ((<Main.Ops
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Ops
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
424e7a3db55a12a6aac0814da3784de1
  $wtests1 ::
    (Main.Ops
     -> Main.Ops
     -> Main.Ops
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: Main.Ops
                          -> Main.Ops
                          -> Main.Ops
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.Ops
                   @ (Main.Ops
                      -> Main.Ops
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryOps
                   Main.$fShowOps
                   Main.$s$fTestable->16
                     `cast`
                   ((<Main.Ops
                      -> Main.Ops
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Ops
                                                                                                                                     -> Main.Ops
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
ee5ba0c0d89c1cd9684198ef0a53fa33
  $wtests10 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fApplicativeRose_$cfmap
                   @ Test.QuickCheck.Property.Result
                   @ Test.QuickCheck.Property.Result
                   Test.QuickCheck.Property.expectFailure_f
                   (Test.QuickCheck.Property.$w$cproperty
                      @ (Test.QuickCheck.Modifiers.NonEmptyList GHC.Integer.Type.Integer)
                      @ Test.QuickCheck.Property.Property
                      Main.$s$fArbitraryNonEmptyList
                      Main.$s$fShowNonEmptyList
                      Test.QuickCheck.Property.$fTestableProperty1
                        `cast`
                      ((<Test.QuickCheck.Property.Property>_R
                        ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                      <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Test.QuickCheck.Property.Property>_N))
                      Main.prop_evenoddk_usesContinuations1
                      ww
                      ww1
                      ww2
                      ww3
                      w1)) -}
e1ef88f53c59b419407d0919029c15f8
  $wtests11 ::
    (Test.QuickCheck.Modifiers.NonEmptyList GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: Test.QuickCheck.Modifiers.NonEmptyList
                            GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Test.QuickCheck.Modifiers.NonEmptyList GHC.Integer.Type.Integer)
                   @ Test.QuickCheck.Property.Property
                   Main.$s$fArbitraryNonEmptyList
                   Main.$s$fShowNonEmptyList
                   Test.QuickCheck.Property.$fTestableProperty1
                     `cast`
                   ((<Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                 <Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
88488469700622233cf4b85105076c3c
  $wtests2 ::
    (Main.Ops
     -> Main.Ops
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: Main.Ops
                          -> Main.Ops
                          -> GHC.Base.String
                          -> GHC.Base.String
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.Ops
                   @ (Main.Ops
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryOps
                   Main.$fShowOps
                   Main.$s$fTestable->37
                     `cast`
                   ((<Main.Ops
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Ops
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
5c76565a0ca4a3ac6d4eac424253d50d
  $wtests3 ::
    (Main.Ops
     -> Main.Ops
     -> Main.Ops
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: Main.Ops
                          -> Main.Ops
                          -> Main.Ops
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.Ops
                   @ (Main.Ops
                      -> Main.Ops
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryOps
                   Main.$fShowOps
                   Main.$s$fTestable->12
                     `cast`
                   ((<Main.Ops
                      -> Main.Ops
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Ops
                                                                                                                                     -> Main.Ops
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
0c1f4d5792620306f5eca64321817cf3
  $wtests4 ::
    (Main.Ops
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Base.String
     -> GHC.Base.String
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: Main.Ops
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Base.String
                          -> GHC.Base.String
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.Ops
                   @ (GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryOps
                   Main.$fShowOps
                   Main.$s$fTestable->29
                     `cast`
                   ((<GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
da0f811c912c992c46dec6f77436101a
  $wtests5 ::
    (Main.Ops
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: Main.Ops
                          -> GHC.Base.String
                          -> GHC.Base.String
                          -> GHC.Base.String
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.Ops
                   @ (GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryOps
                   Main.$fShowOps
                   Main.$s$fTestable->42
                     `cast`
                   ((<[GHC.Types.Char]
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <[GHC.Types.Char]
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
748997de074e55870381e12c6a51d2d9
  $wtests6 ::
    (GHC.Integer.Type.Integer
     -> GHC.Base.String -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: GHC.Integer.Type.Integer
                          -> GHC.Base.String -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ GHC.Integer.Type.Integer
                   @ (GHC.Base.String -> Test.QuickCheck.Property.Property)
                   Test.QuickCheck.Arbitrary.$fArbitraryInteger
                   GHC.Show.$fShowInteger
                   Main.$s$fTestable->27
                     `cast`
                   ((<[GHC.Types.Char] -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <[GHC.Types.Char]
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
c2592c99f487749bea70e95f5e0ff6d4
  $wtests7 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fApplicativeRose_$cfmap
                   @ Test.QuickCheck.Property.Result
                   @ Test.QuickCheck.Property.Result
                   Test.QuickCheck.Property.expectFailure_f
                   (Test.QuickCheck.Property.$w$cproperty
                      @ GHC.Integer.Type.Integer
                      @ Test.QuickCheck.Property.Property
                      Test.QuickCheck.Arbitrary.$fArbitraryInteger
                      GHC.Show.$fShowInteger
                      Test.QuickCheck.Property.$fTestableProperty1
                        `cast`
                      ((<Test.QuickCheck.Property.Property>_R
                        ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                      <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Test.QuickCheck.Property.Property>_N))
                      Main.prop_factk_usesContinuation
                      ww
                      ww1
                      ww2
                      ww3
                      w1)) -}
728c67eb6514d715175b876cdb34a258
  $wtests8 ::
    (Test.QuickCheck.Modifiers.Positive
       (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: Test.QuickCheck.Modifiers.Positive
                            (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Test.QuickCheck.Modifiers.Positive
                        (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer))
                   @ Test.QuickCheck.Property.Property
                   Main.$s$fArbitraryPositive
                   Main.$s$fShowPositive
                   Test.QuickCheck.Property.$fTestableProperty1
                     `cast`
                   ((<Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                 <Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
cd617840ecaa402c9bc995b2f3fff1fd
  $wtests9 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$fApplicativeRose_$cfmap
                   @ Test.QuickCheck.Property.Result
                   @ Test.QuickCheck.Property.Result
                   Test.QuickCheck.Property.expectFailure_f
                   (Test.QuickCheck.Property.$w$cproperty
                      @ (Test.QuickCheck.Modifiers.NonEmptyList GHC.Integer.Type.Integer)
                      @ Test.QuickCheck.Property.Property
                      Main.$s$fArbitraryNonEmptyList
                      Main.$s$fShowNonEmptyList
                      Test.QuickCheck.Property.$fTestableProperty1
                        `cast`
                      ((<Test.QuickCheck.Property.Property>_R
                        ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                      <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Test.QuickCheck.Property.Property>_N))
                      Main.prop_evenoddk_usesContinuations2
                      ww
                      ww1
                      ww2
                      ww3
                      w1)) -}
73ff2dbb713bad3eda2b011757fc31f1
  $ww1 ::
    (Main.Ops
     -> Main.Ops
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: Main.Ops
                          -> Main.Ops
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.Ops
                   @ (Main.Ops
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryOps
                   Main.$fShowOps
                   Main.$s$fTestable->17
                     `cast`
                   ((<Main.Ops
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Ops
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
0f1a2a23fcbd4ecbc09312ecb3d90aa9
  $ww2 ::
    (Main.Ops
     -> Main.Ops
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: Main.Ops
                          -> Main.Ops
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.Ops
                   @ (Main.Ops
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryOps
                   Main.$fShowOps
                   Main.$s$fTestable->13
                     `cast`
                   ((<Main.Ops
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Ops
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
5436243234e2f39cacfcc2c19b66ee50
  $ww3 ::
    (GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Base.String
     -> GHC.Base.String
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Base.String
                          -> GHC.Base.String
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ GHC.Integer.Type.Integer
                   @ (GHC.Integer.Type.Integer
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> Test.QuickCheck.Property.Property)
                   Test.QuickCheck.Arbitrary.$fArbitraryInteger
                   GHC.Show.$fShowInteger
                   Main.$s$fTestable->30
                     `cast`
                   ((<GHC.Integer.Type.Integer
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
feda8ad8e935e280dd62cd950c1b7c1d
  $ww4 ::
    (Main.Ops
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: Main.Ops
                          -> GHC.Base.String
                          -> GHC.Base.String
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.Ops
                   @ (GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryOps
                   Main.$fShowOps
                   Main.$s$fTestable->38
                     `cast`
                   ((<[GHC.Types.Char]
                      -> GHC.Base.String
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <[GHC.Types.Char]
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
08f658af0150899407cce6451f048f7c
  $ww5 ::
    ([GHC.Types.Char]
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: [GHC.Types.Char]
                          -> GHC.Base.String
                          -> GHC.Base.String
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ [GHC.Types.Char]
                   @ (GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Main.$s$fArbitrary[]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   Main.$s$fTestable->38
                     `cast`
                   ((<[GHC.Types.Char]
                      -> GHC.Base.String
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <[GHC.Types.Char]
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
c540b178b7c0c03ebb6f25acf5b06025
  $ww6 ::
    (Main.Ops
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w1 :: Main.Ops
                          -> GHC.Base.String
                          -> GHC.Base.String
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.Ops
                   @ (GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryOps
                   Main.$fShowOps
                   Main.$s$fTestable->48
                     `cast`
                   ((<[GHC.Types.Char]
                      -> GHC.Base.String
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <[GHC.Types.Char]
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w1
                   ww
                   ww1
                   ww2
                   ww3
                   w2) -}
959ddd7450cfd9a9d7577ac72f051445
  data NonSimpleExpr
    = NonSimpleExpr Lib.Exp | EmptyNS GHC.Integer.Type.Integer
ff15942e0a15108e096716ca4479d40d
  newtype Ops = Ops {getString :: GHC.Base.String}
959ddd7450cfd9a9d7577ac72f051445
  axiom Main.Rep_NonSimpleExpr::
      GHC.Generics.Rep Main.NonSimpleExpr
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "NonSimpleExpr" "Main" "main" 'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "NonSimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Maybe.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 Lib.Exp))
             GHC.Generics.:+: GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "EmptyNS" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 GHC.Integer.Type.Integer)))
bd27ecf9372ed7121877564a83e27c87
  axiom Main.Rep_SimpleExpr::
      GHC.Generics.Rep Main.SimpleExpr
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "SimpleExpr" "Main" "main" 'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "SimpleExpr" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Maybe.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 Lib.Exp))
             GHC.Generics.:+: GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "EmptyS" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Maybe.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 GHC.Integer.Type.Integer)))
bd27ecf9372ed7121877564a83e27c87
  data SimpleExpr
    = SimpleExpr Lib.Exp | EmptyS GHC.Integer.Type.Integer
03d4957ce465b4ba27024bbfa621a2e3
  cpsDecl_test :: Lib.Stmt -> Lib.Stmt
  {- Arity: 1, Strictness: <S,1*U(U,1*U,1*U)>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: Lib.Stmt) ->
                 case w1 of ww { Lib.Decl ww1 ww2 ww3 ->
                 Lib.Decl
                   ww1
                   (GHC.Base.augment
                      @ [GHC.Types.Char]
                      (\ @ b
                         (c :: [GHC.Types.Char] -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr @ [GHC.Types.Char] @ b c n ww2)
                      (GHC.Types.:
                         @ [GHC.Types.Char]
                         Main.cpsDecl_test3
                         (GHC.Types.[] @ [GHC.Types.Char])))
                   (case Main.$wcpsExp_test
                           ww3
                           Main.cpsDecl_test2
                           Main.cpsDecl_test1 of ww4 { (#,#) ww5 ww6 ->
                    ww5 }) }) -}
35a95da86e80d4ab716e27fed90c526a
  cpsDecl_test1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
f060e66809bdda98f3ce7aad09e55984
  cpsDecl_test2 :: Lib.Exp
  {- Strictness: m2, Unfolding: (Lib.VarExp Main.cpsDecl_test3) -}
db1807315db08f86b6cfe73e4843f872
  cpsDecl_test3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.cpsDecl_test4) -}
c94a6ce0b537bdb4cea2468990b7fdfa
  cpsDecl_test4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("k"#) -}
d2c8ac55d977d21414329cdbb83dda5b
  cpsExp_test ::
    Lib.Exp
    -> Lib.Exp
    -> GHC.Integer.Type.Integer
    -> (Lib.Exp, GHC.Integer.Type.Integer)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>m, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: Lib.Exp)
                   (w2 :: Lib.Exp)
                   (w3 :: GHC.Integer.Type.Integer) ->
                 case Main.$wcpsExp_test w1 w2 w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
51cff4c2cd11f319c82e09b19e49219d
  evenodd :: [GHC.Integer.Type.Integer] -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (lst :: [GHC.Integer.Type.Integer]) ->
                 Main.evenodd_aux lst Main.evenodd1 Main.evenodd1) -}
a91246dbca1974c6d074cecb8dadbde8
  evenodd1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
f597bdbd8f6fa437cb6bc9bbb72b87b7
  evenodd_aux ::
    [GHC.Integer.Type.Integer]
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
  {- Arity: 3, Strictness: <S,1*U><L,1*U><L,1*U> -}
ea80bb5632e6a08476c1c570b4407d8c
  fact :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,U> -}
3737356f4ab7684b6125d60d5346bc5b
  getBack :: Main.SimpleExpr -> Lib.Exp
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.SimpleExpr) ->
                 case ds of wild {
                   Main.SimpleExpr k
                   -> case k of wild1 { DEFAULT -> wild1 Lib.AppExp ds1 ds2 -> ds1 }
                   Main.EmptyS ds1 -> Main.getBack1 }) -}
b86deee3977fa8724bc60d2e424a43ea
  getBack1 :: Lib.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Lib.IntExp Main.cpsDecl_test1) -}
1ffd3c2aa2a6589969bec05984baba71
  getExp1 :: Lib.Exp
  {- Strictness: m6,
     Unfolding: (Lib.AppExp Main.cpsDecl_test2 Main.getBack1) -}
79ee457883f1df92d716f88aec0497ac
  getExp2 :: Main.NonSimpleExpr -> Lib.Exp
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.NonSimpleExpr) ->
                 case ds of wild {
                   Main.NonSimpleExpr k -> k Main.EmptyNS ds1 -> Main.getExp1 }) -}
ff15942e0a15108e096716ca4479d40d
  getString :: Main.Ops -> GHC.Base.String
  RecSel Left Main.Ops
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Main.getString1 `cast` (<Main.Ops>_R ->_R Main.N:Ops[0]) -}
ff15942e0a15108e096716ca4479d40d
  getString1 :: Main.Ops -> Main.Ops
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True) (\ (ds :: Main.Ops) -> ds) -}
336376c8a167e9ed2c3cc9a2b6f49acb
  isAppExp :: Lib.Exp -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.Exp) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Lib.AppExp ds1 ds2 -> GHC.Types.True }) -}
fbff2bc5e3dc3e810428f82490e4cbb7
  isSimple_test :: Lib.Exp -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Lib.Exp) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.True
                   Lib.IfExp e1 e2 e3
                   -> case Lib.isSimple e1 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case Lib.isSimple e2 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> Lib.isSimple e3 } }
                   Lib.OpExp op e1 e2
                   -> case Lib.isSimple e1 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> Lib.isSimple e2 }
                   Lib.AppExp ds1 ds2 -> GHC.Types.False }) -}
54bb88262dec5e3fe40a838ad96023fd
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
517f263bb9a5dbb4326e98e0059a9927
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds2 { (#,#) ipv ipv1 ->
                 case Test.Framework.Runners.Console.defaultMain4
                        ipv1
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case ipv3 of ww { Test.Framework.Runners.Options.RunnerOptions ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Test.Framework.Runners.Console.$wdefaultMainWithOpts
                   Main.tests
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ipv2 } } }) -}
d79a340d21a75486263cf0d1aafe352e
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
bdac202b74f7129b457710c74564b8a1
  prop_eq_evenoddk_evenodd ::
    Test.QuickCheck.Modifiers.NonEmptyList GHC.Integer.Type.Integer
    -> Test.QuickCheck.Property.Property
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests151
                  `cast`
                (<Test.QuickCheck.Modifiers.NonEmptyList
                    GHC.Integer.Type.Integer>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) -}
db138002297ca94004f8e725140f58c9
  prop_evenoddk_usesContinuations1 ::
    Test.QuickCheck.Modifiers.NonEmptyList GHC.Integer.Type.Integer
    -> Test.QuickCheck.Property.Property
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (ds :: Test.QuickCheck.Modifiers.NonEmptyList
                            GHC.Integer.Type.Integer) ->
                 let {
                   x2 :: GHC.Integer.Type.Integer
                   = Lib.evenoddk
                       @ GHC.Integer.Type.Integer
                       ds
                         `cast`
                       (Test.QuickCheck.Modifiers.N:NonEmptyList[0] <GHC.Integer.Type.Integer>_N)
                       Main.prop_evenoddk_usesContinuations5
                       (GHC.Base.id @ GHC.Integer.Type.Integer)
                 } in
                 let {
                   y :: GHC.Integer.Type.Integer
                   = Main.evenodd_aux
                       ds
                         `cast`
                       (Test.QuickCheck.Modifiers.N:NonEmptyList[0] <GHC.Integer.Type.Integer>_N)
                       Main.evenodd1
                       Main.evenodd1
                 } in
                 let {
                   res :: GHC.Types.Bool
                   = case GHC.Integer.Type.eqInteger# x2 y of wild { DEFAULT ->
                     GHC.Prim.tagToEnum# @ GHC.Types.Bool wild }
                 } in
                 Test.QuickCheck.Property.counterexample_$scounterexample
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           x2
                           (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (case res of wild {
                         GHC.Types.False
                         -> GHC.Base.++
                              @ GHC.Types.Char
                              Test.QuickCheck.Property.=/=1
                              (case GHC.Show.$w$cshowsPrec4
                                      0#
                                      y
                                      (GHC.Types.[] @ GHC.Types.Char) of ww1 { (#,#) ww5 ww6 ->
                               GHC.Types.: @ GHC.Types.Char ww5 ww6 })
                         GHC.Types.True
                         -> GHC.Base.++
                              @ GHC.Types.Char
                              Test.QuickCheck.Property.=/=3
                              (case GHC.Show.$w$cshowsPrec4
                                      0#
                                      y
                                      (GHC.Types.[] @ GHC.Types.Char) of ww1 { (#,#) ww5 ww6 ->
                               GHC.Types.: @ GHC.Types.Char ww5 ww6 }) })
                      ww3
                      ww4 })
                   res) -}
5e4331fc073099a2ca48404be579a369
  prop_evenoddk_usesContinuations2 ::
    Test.QuickCheck.Modifiers.NonEmptyList GHC.Integer.Type.Integer
    -> Test.QuickCheck.Property.Property
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (ds :: Test.QuickCheck.Modifiers.NonEmptyList
                            GHC.Integer.Type.Integer) ->
                 let {
                   x2 :: GHC.Integer.Type.Integer
                   = Lib.evenoddk
                       @ GHC.Integer.Type.Integer
                       ds
                         `cast`
                       (Test.QuickCheck.Modifiers.N:NonEmptyList[0] <GHC.Integer.Type.Integer>_N)
                       (GHC.Base.id @ GHC.Integer.Type.Integer)
                       Main.prop_evenoddk_usesContinuations4
                 } in
                 let {
                   y :: GHC.Integer.Type.Integer
                   = Main.evenodd_aux
                       ds
                         `cast`
                       (Test.QuickCheck.Modifiers.N:NonEmptyList[0] <GHC.Integer.Type.Integer>_N)
                       Main.evenodd1
                       Main.evenodd1
                 } in
                 let {
                   res :: GHC.Types.Bool
                   = case GHC.Integer.Type.eqInteger# x2 y of wild { DEFAULT ->
                     GHC.Prim.tagToEnum# @ GHC.Types.Bool wild }
                 } in
                 Test.QuickCheck.Property.counterexample_$scounterexample
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           x2
                           (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (case res of wild {
                         GHC.Types.False
                         -> GHC.Base.++
                              @ GHC.Types.Char
                              Test.QuickCheck.Property.=/=1
                              (case GHC.Show.$w$cshowsPrec4
                                      0#
                                      y
                                      (GHC.Types.[] @ GHC.Types.Char) of ww1 { (#,#) ww5 ww6 ->
                               GHC.Types.: @ GHC.Types.Char ww5 ww6 })
                         GHC.Types.True
                         -> GHC.Base.++
                              @ GHC.Types.Char
                              Test.QuickCheck.Property.=/=3
                              (case GHC.Show.$w$cshowsPrec4
                                      0#
                                      y
                                      (GHC.Types.[] @ GHC.Types.Char) of ww1 { (#,#) ww5 ww6 ->
                               GHC.Types.: @ GHC.Types.Char ww5 ww6 }) })
                      ww3
                      ww4 })
                   res) -}
eb465c328a12dfd4b0ef6bfcee08ab4a
  prop_evenoddk_usesContinuations4 ::
    GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <B,A>x, Inline: [2],
     Unfolding: InlineRule (1, True, True)
                (\ (w1 :: GHC.Integer.Type.Integer) ->
                 Main.$wlvl8 GHC.Prim.void#) -}
b9c44426068cbfa75b693ef6c14dbb6f
  prop_evenoddk_usesContinuations5 ::
    GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <B,A>x, Inline: [2],
     Unfolding: InlineRule (1, True, True)
                (\ (w1 :: GHC.Integer.Type.Integer) ->
                 Main.$wlvl9 GHC.Prim.void#) -}
6925510c92ae8abd87a6de29d674a5bd
  prop_factk_eq_fact ::
    Test.QuickCheck.Modifiers.Positive
      (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
    -> Test.QuickCheck.Property.Property
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests126
                  `cast`
                (<Test.QuickCheck.Modifiers.Positive
                    (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) -}
04425f552724cc45d11e03c914b5ae42
  prop_factk_usesContinuation ::
    GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (x2 :: GHC.Integer.Type.Integer) ->
                 let {
                   x3 :: GHC.Integer.Type.Integer
                   = Lib.factk
                       @ GHC.Integer.Type.Integer
                       x2
                       Main.prop_factk_usesContinuation1
                 } in
                 let {
                   y :: GHC.Integer.Type.Integer = Main.fact x2
                 } in
                 let {
                   res :: GHC.Types.Bool
                   = case GHC.Integer.Type.eqInteger# x3 y of wild { DEFAULT ->
                     GHC.Prim.tagToEnum# @ GHC.Types.Bool wild }
                 } in
                 Test.QuickCheck.Property.counterexample_$scounterexample
                   (case GHC.Show.$w$cshowsPrec4
                           0#
                           x3
                           (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                    GHC.Base.++_$s++
                      @ GHC.Types.Char
                      (case res of wild {
                         GHC.Types.False
                         -> GHC.Base.++
                              @ GHC.Types.Char
                              Test.QuickCheck.Property.=/=1
                              (case GHC.Show.$w$cshowsPrec4
                                      0#
                                      y
                                      (GHC.Types.[] @ GHC.Types.Char) of ww1 { (#,#) ww5 ww6 ->
                               GHC.Types.: @ GHC.Types.Char ww5 ww6 })
                         GHC.Types.True
                         -> GHC.Base.++
                              @ GHC.Types.Char
                              Test.QuickCheck.Property.=/=3
                              (case GHC.Show.$w$cshowsPrec4
                                      0#
                                      y
                                      (GHC.Types.[] @ GHC.Types.Char) of ww1 { (#,#) ww5 ww6 ->
                               GHC.Types.: @ GHC.Types.Char ww5 ww6 }) })
                      ww3
                      ww4 })
                   res) -}
5f0aa108e5961544ea662b5a0194f0a0
  prop_factk_usesContinuation1 ::
    GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <B,A>x, Inline: [2],
     Unfolding: InlineRule (1, True, True)
                (\ (w1 :: GHC.Integer.Type.Integer) ->
                 Main.$wlvl7 GHC.Prim.void#) -}
4fb9812fc7d1a4197526f6a69316b90b
  tests :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests147
                   Main.tests1) -}
c2d012494f7a53586fd3f83ff0716b33
  tests1 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests132
                   Main.tests2) -}
7cbb047a9d7bf9d89f9d2fc59755190d
  tests10 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests50
                   Main.tests11) -}
da46828ef593e135ad61bbec2571afbf
  tests100 ::
    (GHC.Integer.Type.Integer
     -> GHC.Base.String -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: GHC.Integer.Type.Integer
                          -> GHC.Base.String -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wtests6 w1 ww1 ww2 ww3 ww4 w3 }) -}
060e373d00e24a53e5f8c98ef6c75c5e
  tests101 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests102) -}
98e168747d5321f40328231a1d630926
  tests102 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("cpsExp: Integer and Variable expressions (5 points)"#) -}
100eb63663a9d88882814274ba408134
  tests103 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests104) -}
0f671031ef92fbe62db5eab8f23ab003
  tests104 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("cpsExp: Integer and Variable expressions"#) -}
210a7fb60ede4a5a678239ef1541cd75
  tests105 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests111
                   Main.tests106) -}
4dde06f44e2dd16f3b49c137aa62c825
  tests106 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests107
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
778008abcfdd5f4b3d922750252e9697
  tests107 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.tests109
                   Main.tests108) -}
faee9193da2b91867f1ce7a7c42c6745
  tests108 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Lib.Exp -> Test.QuickCheck.Property.Property)
                   Main.tests28
                     `cast`
                   ((<Lib.Exp -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Lib.Exp
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.tests_isSimple) -}
ede3989b3415d37ad5916910e463843e
  tests109 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests110) -}
3e4258fcf6ba026803dbbafe775e00c2
  tests11 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests42
                   Main.tests12) -}
8c9a8402c3a6a3227a0c4a6a6535ff6f
  tests110 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("isSimple tests (5 points)"#) -}
b80be1851175f21998e99401e3fce63d
  tests111 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests112) -}
36cc9215ed97a929036be29b3e18ebd7
  tests112 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("isSimple tests"#) -}
15299b0b51cc8125e9edfbdfda038bfb
  tests113 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests120
                   Main.tests114) -}
69cc04a99b86aeb2720f9dfe62219d78
  tests114 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests115
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
20048daa4bfc48226f45fe48d4f16518
  tests115 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.tests118
                   Main.tests116) -}
82a34866bff0a2823bd788cff64921bd
  tests116 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ Test.QuickCheck.Property.Property
                   Test.QuickCheck.Property.$fTestableProperty1
                     `cast`
                   ((<Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                 <Test.QuickCheck.Property.Property>_N))
                   Main.tests117
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))) -}
1be7f3a189bc59ccfdd631ea2c3660f3
  tests117 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: Test.QuickCheck.Random.QCGen) (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wtests7 ww1 ww2 ww3 ww4 w2 }) -}
f263973e01af7184ae7e282a5b82a283
  tests118 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests119) -}
8be4bb873beaffb2e086c482c12177a3
  tests119 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Factk use continuation (5 points)"#) -}
ac8c8f89b3e3d852ab781514b26773d9
  tests12 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests33
                   Main.tests13) -}
4eead8976f8609423612cbff9b90d76a
  tests120 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests121) -}
510d3dccce69fa8f6cd359a65f19eaa6
  tests121 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("factk Function use continuation"#) -}
5842a1ab95158acdc69cba9c2dad9f40
  tests122 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests130
                   Main.tests123) -}
c9bd41e007e7e64d1903fde5007bdc98
  tests123 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests124
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
884c3a70dc5cc4bdbbe44221a560f723
  tests124 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.tests128
                   Main.tests125) -}
551f8bbe1be7dfc169ea1f73ad220f41
  tests125 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Test.QuickCheck.Modifiers.Positive
                        (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
                      -> Test.QuickCheck.Property.Property)
                   Main.tests127
                     `cast`
                   ((<Test.QuickCheck.Modifiers.Positive
                        (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Test.QuickCheck.Modifiers.Positive
                                                                                                                                       (Test.QuickCheck.Modifiers.Small
                                                                                                                                          GHC.Integer.Type.Integer)
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.tests126
                     `cast`
                   (<Test.QuickCheck.Modifiers.Positive
                       (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)>_R
                    ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))) -}
da8222704807cd92cd2dc32b9b23232b
  tests126 ::
    Test.QuickCheck.Modifiers.Positive
      (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 1, Strictness: <L,U> -}
8d3f397bddf03804654962da82e9b127
  tests127 ::
    (Test.QuickCheck.Modifiers.Positive
       (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: Test.QuickCheck.Modifiers.Positive
                            (Test.QuickCheck.Modifiers.Small GHC.Integer.Type.Integer)
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wtests8 w1 ww1 ww2 ww3 ww4 w3 }) -}
a6202e8d89974151d412bfeaa2adeb71
  tests128 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests129) -}
0ea091a41c5b6b48c825fbfa6b13d59a
  tests129 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Factk works correctly (5 points)"#) -}
3da6d0d42d9e7b3eb38661ce14ae8601
  tests13 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests24
                   Main.tests14) -}
e6a8aefc2a9060bfabd943f272816bc1
  tests130 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests131) -}
deb78c3a0c5c01c753bd852db979b986
  tests131 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("factk Function"#) -}
ecfcced13faf7d9198aad1bcefaff6fb
  tests132 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests145
                   Main.tests133) -}
a2286d9d780be6552bcb499c900d8b58
  tests133 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests140
                   Main.tests134) -}
331bb9b69243ebd6a4f2c790abfe452c
  tests134 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests135
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
22cf99e40b0328e97986b8daea968587
  tests135 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.tests138
                   Main.tests136) -}
dbe7f996b4c41a2245c61f931d7de726
  tests136 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ Test.QuickCheck.Property.Property
                   Test.QuickCheck.Property.$fTestableProperty1
                     `cast`
                   ((<Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                 <Test.QuickCheck.Property.Property>_N))
                   Main.tests137
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))) -}
1c17c0ad6b0e08c1244478f04810a74e
  tests137 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: Test.QuickCheck.Random.QCGen) (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wtests9 ww1 ww2 ww3 ww4 w2 }) -}
7c09dc99a30f8e1c3c6b5e9ba6c093d6
  tests138 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests139) -}
2ef18d5348e6af28b7581ea421b67bee
  tests139 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Evenoddk use continuation 2 (5 points)"#) -}
3c4ddddc08c83cc98a7c4601e19021fd
  tests14 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests15
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
02b4c80f0ff11de057924ee961f4332a
  tests140 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.tests143
                   Main.tests141) -}
041b4cb5a4cc0514715fbd4728ed8361
  tests141 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ Test.QuickCheck.Property.Property
                   Test.QuickCheck.Property.$fTestableProperty1
                     `cast`
                   ((<Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                 <Test.QuickCheck.Property.Property>_N))
                   Main.tests142
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))) -}
afbcfd6f517b1c4e2b3e34d6480749a1
  tests142 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: Test.QuickCheck.Random.QCGen) (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wtests10 ww1 ww2 ww3 ww4 w2 }) -}
b8751a95fd538d2d3008fd8e116b46c6
  tests143 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests144) -}
ed7bd3a61d81339593a698eb4ad37c12
  tests144 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Evenoddk use continuation 1 (5 points)"#) -}
edf1dbc3c49f23830403d534c94efe74
  tests145 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests146) -}
0c67dea27a05dac88dbc07c27342e47f
  tests146 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Evenoddk Function use two continuations"#) -}
0e48839a8580a34e712cb0fa967c081a
  tests147 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests155
                   Main.tests148) -}
fc6d1be20f3e9de148ad1b3a2aefade8
  tests148 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests149
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
b3d641f91cc643d78b34e1d8ba26118c
  tests149 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.tests153
                   Main.tests150) -}
880b22112d29190b82fc851bbc68943b
  tests15 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests22
                   Main.tests16) -}
2f1f6a399ec43cd9ce3b55716413edf3
  tests150 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Test.QuickCheck.Modifiers.NonEmptyList GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Main.tests152
                     `cast`
                   ((<Test.QuickCheck.Modifiers.NonEmptyList GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Test.QuickCheck.Modifiers.NonEmptyList
                                                                                                                                       GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.tests151
                     `cast`
                   (<Test.QuickCheck.Modifiers.NonEmptyList
                       GHC.Integer.Type.Integer>_R
                    ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))) -}
d8d062605aecf13cfdfb8a92c83c0cbb
  tests151 ::
    Test.QuickCheck.Modifiers.NonEmptyList GHC.Integer.Type.Integer
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 1, Strictness: <L,U> -}
03ea4bcd4d2238dfb250a8d2332e4f78
  tests152 ::
    (Test.QuickCheck.Modifiers.NonEmptyList GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: Test.QuickCheck.Modifiers.NonEmptyList
                            GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wtests11 w1 ww1 ww2 ww3 ww4 w3 }) -}
f108462d0b4af1683e2db8a9d55e25aa
  tests153 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests154) -}
f71fa8ac2d066c46258f636daa8335fb
  tests154 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Evenoddk works correctly (5 points)"#) -}
305bd5419a2a844c3a94c3edadf2e5b8
  tests155 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests156) -}
370322f9ea5878e236afcd0291416ef5
  tests156 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Evenoddk Function"#) -}
5026ad4e5c353e9d85dfa7abb2ecb07d
  tests16 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests17
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
86497c1357d16110ce743fd00230ae1c
  tests17 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.tests20
                   Main.tests18) -}
2fb0c1feb0781d3f06696d3ad1e3bab2
  tests18 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (GHC.Base.String
                      -> Main.Ops
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Main.tests19
                     `cast`
                   ((<[GHC.Types.Char]
                      -> Main.Ops
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <[GHC.Types.Char]
                                                                                                                                     -> Main.Ops
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.tests_cpsDecl) -}
5857287f5c767ce1287f23473b619402
  tests19 ::
    ([GHC.Types.Char]
     -> Main.Ops
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: [GHC.Types.Char]
                          -> Main.Ops
                          -> GHC.Base.String
                          -> GHC.Base.String
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wtests w1 ww1 ww2 ww3 ww4 w3 }) -}
4bbc40de8ad2c5db75ab1707d1afa6d8
  tests2 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests122
                   Main.tests3) -}
b3bfd4cd552c559a491cee11c392aaaf
  tests20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests21) -}
08f509cb79b22603acaff8f5f6e4d257
  tests21 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("cpsDecl tests (5 points)"#) -}
ab703883dcc3cdd4b326a83379f6b277
  tests22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests23) -}
6fe112282c5ea2cef02854abe098d499
  tests23 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("cpsDecl tests"#) -}
3e41cfadc4bd39ca736a48787d2801a3
  tests24 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests31
                   Main.tests25) -}
aad12f4e82a61d81d79d9bb91613542a
  tests25 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests26
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
2bdbdb3d085fc6b918159fc3739f79ae
  tests26 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.tests29
                   Main.tests27) -}
cb095143cb055274805c8d3433b48899
  tests27 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Lib.Exp -> Test.QuickCheck.Property.Property)
                   Main.tests28
                     `cast`
                   ((<Lib.Exp -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Lib.Exp
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.tests_cpsExp_arbitrary) -}
5724b9fe34307b8db91f39f8f3dca397
  tests28 ::
    (Lib.Exp -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: Lib.Exp -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable8 w1 ww1 ww2 ww3 ww4 w3 }) -}
a32433e53de3f5ef614b6009532be964
  tests29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests30) -}
853cf57ffaefe0dc67fad458aca9de03
  tests3 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests113
                   Main.tests4) -}
5d8368f7b421f3615e829f83169e02d9
  tests30 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("cpsExp: totally arbitrary expressions (5 points)"#) -}
35d741569ba24dd067a4eb421da25bcf
  tests31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests32) -}
2d948ababfeda01579f3645ee167d58b
  tests32 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("cpsExp: totally arbitrary expressions"#) -}
470459c06f7a0eef06a929f797fbbfad
  tests33 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests40
                   Main.tests34) -}
c03ae763351499e6523b63fe093c9824
  tests34 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests35
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
27fe5dd7ddde239c521ff9219e97f594
  tests35 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.tests38
                   Main.tests36) -}
9ffb2b7d7c10a37f2434218e9a025e39
  tests36 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Main.Ops
                      -> Main.Ops
                      -> Main.Ops
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Main.tests37
                     `cast`
                   ((<Main.Ops
                      -> Main.Ops
                      -> Main.Ops
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Ops
                                                                                                                                     -> Main.Ops
                                                                                                                                     -> Main.Ops
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.tests_cpsExp_simpIf) -}
322efe1ef7c8bec45fa1c8a267cb653f
  tests37 ::
    (Main.Ops
     -> Main.Ops
     -> Main.Ops
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: Main.Ops
                          -> Main.Ops
                          -> Main.Ops
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wtests1 w1 ww1 ww2 ww3 ww4 w3 }) -}
8349a39e79f47fee8da91dc6cab7d744
  tests38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests39) -}
6701cf74523ee0c43dff347ff1275094
  tests39 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("cpsExp: Simple If expressions (5 points)"#) -}
b1edf09ba5cf3a6373cbefeaa471ff24
  tests4 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests105
                   Main.tests5) -}
554125a51fb59ec9c4804e9aa7d450be
  tests40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests41) -}
e9d25395dd95078d5bf90ee32dca2891
  tests41 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("cpsExp: Simple If expressions"#) -}
b420d1bbbe8c4bd873292e18780ea543
  tests42 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests48
                   Main.tests43) -}
3fa2ce8fa58b2d4f98f8be6dab46b55c
  tests43 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests44
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
14691d3186784a959d7ecff371768de3
  tests44 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.tests46
                   Main.tests45) -}
727114e32222f8c4f7818588da31897b
  tests45 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (GHC.Base.String
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Main.$s$fTestable->39
                     `cast`
                   ((<[GHC.Types.Char]
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <[GHC.Types.Char]
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.tests_cpsExp_if_basic) -}
080b1265e3ded9b31b3c658f8ee93236
  tests46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests47) -}
1704a8308092cee7635124e0346f4c4b
  tests47 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Basic If expressions with only VarExp and IntExp (5 points)"#) -}
b572a62643726a9e1f8db773ae110b22
  tests48 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests49) -}
ab57090f43f54f54201857b0b4f3069a
  tests49 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Basic If expressions"#) -}
6cf3d883c0e4984e89b42a445f6235f6
  tests5 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests95
                   Main.tests6) -}
df328906002aa3cfb9c6fd051d657bbc
  tests50 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests57
                   Main.tests51) -}
0dcd85a8f3e439e781ef0ed40aa937bf
  tests51 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests52
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
0c4492e4a28dd1ef37c4d78a00580bb7
  tests52 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.tests55
                   Main.tests53) -}
5dea846d46835a94104eff81fccadfc8
  tests53 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Main.Ops
                      -> Main.Ops
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Main.tests54
                     `cast`
                   ((<Main.Ops
                      -> Main.Ops
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Ops
                                                                                                                                     -> Main.Ops
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.tests_cpsExp_nonSimpOp) -}
a98da7314a116a95cbd002b98ed65859
  tests54 ::
    (Main.Ops
     -> Main.Ops
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: Main.Ops
                          -> Main.Ops
                          -> GHC.Base.String
                          -> GHC.Base.String
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wtests2 w1 ww1 ww2 ww3 ww4 w3 }) -}
7475284871f91f957a85d5dce66eaf46
  tests55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests56) -}
925431dc70f2fa7f895a1cd3b8caee76
  tests56 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("cpsExp: Non-Simple Operator expressions (5 points)"#) -}
c8f183da06d17b4aa26bea6afed881c5
  tests57 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests58) -}
ab6393fe5abb49115695b33a3bf5dcd4
  tests58 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("cpsExp: Non-Simple Operator expressions"#) -}
a0b22a98aa50022562c6b357a8fd09bb
  tests59 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests66
                   Main.tests60) -}
2d501466d36b65bc85a1f24ca9470b73
  tests6 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests87
                   Main.tests7) -}
6c2abe04198b733bf310b8790ef0d475
  tests60 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests61
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
5e7b82468427a2a6633283aaf711c0fe
  tests61 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.tests64
                   Main.tests62) -}
debe9336e748f382294f924926e8bd0a
  tests62 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Main.Ops
                      -> Main.Ops
                      -> Main.Ops
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Main.tests63
                     `cast`
                   ((<Main.Ops
                      -> Main.Ops
                      -> Main.Ops
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Ops
                                                                                                                                     -> Main.Ops
                                                                                                                                     -> Main.Ops
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.tests_cpsExp_simpOp) -}
e0a5bd66aefb24fb37d0b84a50940187
  tests63 ::
    (Main.Ops
     -> Main.Ops
     -> Main.Ops
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: Main.Ops
                          -> Main.Ops
                          -> Main.Ops
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wtests3 w1 ww1 ww2 ww3 ww4 w3 }) -}
f98465087ceef8c97dd09092be11d507
  tests64 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests65) -}
bd8b9225b58d1bf49ea445e344112a61
  tests65 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Simple Operator expressions (5 points)"#) -}
c8b50cb7dd5a5202442ac5f512d125dc
  tests66 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests67) -}
af3b33a334123bee1983bfd37eba03bf
  tests67 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Simple Operator expressions"#) -}
333e565855ee58ba03494f3602e063d7
  tests68 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests76
                   Main.tests69) -}
b91d1396e573dce4beecf66f2cedb844
  tests69 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests70
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
ad4fbfa62d017c5fe22ec7ad48474d47
  tests7 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests78
                   Main.tests8) -}
8fa0312233b51b20d06f6203c2105643
  tests70 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.tests74
                   Main.tests71) -}
98ac2fad3722b1f696517e4cd31d2e50
  tests71 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Main.Ops
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> Test.QuickCheck.Property.Property)
                   Main.tests73
                     `cast`
                   ((<Main.Ops
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Ops
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.tests72
                     `cast`
                   (<Main.Ops>_R
                    ->_R <GHC.Integer.Type.Integer>_R
                    ->_R <GHC.Integer.Type.Integer>_R
                    ->_R <GHC.Base.String>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))) -}
f165fa743a048caf1d8d1f6c5a7d237f
  tests72 ::
    Main.Ops
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Base.String
    -> GHC.Base.String
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U> -}
04ffa1d5010197e8d0df29f455ee581f
  tests73 ::
    (Main.Ops
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Base.String
     -> GHC.Base.String
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: Main.Ops
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> GHC.Base.String
                          -> GHC.Base.String
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wtests4 w1 ww1 ww2 ww3 ww4 w3 }) -}
380b9677a070567445877b5b8196209e
  tests74 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests75) -}
8c12546c22e4eb24dc73f33960e17e33
  tests75 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Basic Operator expressions with only VarExp and IntExp (5 points)"#) -}
76a0c06717124452f7428cbcd07488c2
  tests76 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests77) -}
d6785a41fe5c78b298a0029790ddc363
  tests77 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Basic Operator expressions"#) -}
ccab09d918d477d296887a042cee220a
  tests78 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests85
                   Main.tests79) -}
38f940062373e6256abd95b568e6f720
  tests79 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests80
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
88dc55f272862c2422cacb2ca3152737
  tests8 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests68
                   Main.tests9) -}
8c4c3b64ce218f502a17000833c2f8bc
  tests80 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.tests83
                   Main.tests81) -}
35ddc20d2bc980faa70ddb29ebdbad20
  tests81 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Main.Ops
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property)
                   Main.tests82
                     `cast`
                   ((<Main.Ops
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Ops
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.tests_cpsExp_ap) -}
0acd92bc7196be6f0432b5de69962c64
  tests82 ::
    (Main.Ops
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: Main.Ops
                          -> GHC.Base.String
                          -> GHC.Base.String
                          -> GHC.Base.String
                          -> GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer
                          -> Test.QuickCheck.Property.Property)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$wtests5 w1 ww1 ww2 ww3 ww4 w3 }) -}
393605d656bde141462aeef98d693518
  tests83 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests84) -}
c0e15af3f178bed9f93a9f93e944a728
  tests84 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("cpsExp: Application expressions (5 points)"#) -}
d620b9739fbcc38491a8379a8997a56e
  tests85 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests86) -}
0f5e34d84435e5c802b7fec6a9620233
  tests86 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("cpsExp: Application expressions"#) -}
8d0601f2f4fa765c7e4739e742e6991a
  tests87 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests93
                   Main.tests88) -}
25da37844cf2be63110e23605f26959c
  tests88 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests89
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
d1c1fdc765c6f0f36af4c410aa3af9f6
  tests89 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.tests91
                   Main.tests90) -}
7f8952f20c775a7f19aed22c79cf5585
  tests9 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests59
                   Main.tests10) -}
ce3670dcd45af0adf2316b690000bee4
  tests90 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (GHC.Base.String
                      -> GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property)
                   Main.$s$fTestable->49
                     `cast`
                   ((<[GHC.Types.Char]
                      -> GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <[GHC.Types.Char]
                                                                                                                                     -> GHC.Integer.Type.Integer
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.tests_cpsExp_ap_basic) -}
31d6413d488034a3588186f9d0bbeafb
  tests91 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests92) -}
15d460fd02f81e05e5ef1a2bf34577cd
  tests92 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Basic ap expressions with only VarExp and IntExp (5 points)"#) -}
5cf4dab60b91097f75150b030d344c50
  tests93 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests94) -}
8c1c32f564e684db78a0f60cb6eeae1a
  tests94 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Basic ap expressions"#) -}
d190d3e5914db031dafc79de5c72d094
  tests95 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests103
                   Main.tests96) -}
a1b4b78aedfde3c3a9737ef73e234ed1
  tests96 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests97
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
d42f822ed21e758d7837826343a66b03
  tests97 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.tests101
                   Main.tests98) -}
56362d49aa0f3697ecb587be5bf79b0a
  tests98 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (GHC.Integer.Type.Integer
                      -> GHC.Base.String -> Test.QuickCheck.Property.Property)
                   Main.tests100
                     `cast`
                   ((<GHC.Integer.Type.Integer
                      -> GHC.Base.String -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Base.String
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.tests99
                     `cast`
                   (<GHC.Integer.Type.Integer>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))) -}
8cef0b301725054c44b5b848ef7f89a9
  tests99 ::
    GHC.Integer.Type.Integer
    -> GHC.Base.String
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <L,U><L,U> -}
3a0da5c6289491d728459f7e64ff5184
  tests_cpsDecl ::
    GHC.Base.String
    -> Main.Ops
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> Test.QuickCheck.Property.Property
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U> -}
de5d34b710eef1c35d8e758f04cf33a9
  tests_cpsExp_ap ::
    Main.Ops
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Test.QuickCheck.Property.Property
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U> -}
09429576e64bfe1dab151231c7316521
  tests_cpsExp_ap_basic ::
    GHC.Base.String
    -> GHC.Integer.Type.Integer -> Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,U><L,U> -}
95b330f620b19cb0a9ffe72a7689743f
  tests_cpsExp_arbitrary ::
    Lib.Exp -> Test.QuickCheck.Property.Property
  {- Arity: 1, Strictness: <L,U> -}
4d0e40f2b285d84bef66487f61f26ff7
  tests_cpsExp_if_basic ::
    GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Test.QuickCheck.Property.Property
  {- Arity: 3, Strictness: <L,U><L,U><L,U> -}
83454f016d7dc3be0979b5fc5b1f8803
  tests_cpsExp_intVar ::
    GHC.Integer.Type.Integer
    -> GHC.Base.String -> Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests99
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) -}
fca1fa6246250b706d63b802da1eab3b
  tests_cpsExp_nonSimpIf ::
    Main.Ops
    -> Main.Ops
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Test.QuickCheck.Property.Property
  {- Arity: 10,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U> -}
86eae36a1a20354a301ec2fe17862eef
  tests_cpsExp_nonSimpOp ::
    Main.Ops
    -> Main.Ops
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Test.QuickCheck.Property.Property
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U> -}
24c46a89330949f38fce3e772419b538
  tests_cpsExp_op_basic ::
    Main.Ops
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Base.String
    -> GHC.Base.String
    -> Test.QuickCheck.Property.Property
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests72
                  `cast`
                (<Main.Ops>_R
                 ->_R <GHC.Integer.Type.Integer>_R
                 ->_R <GHC.Integer.Type.Integer>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) -}
7659e45463a71cf20ff1fe8a857fd030
  tests_cpsExp_simpIf ::
    Main.Ops
    -> Main.Ops
    -> Main.Ops
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Test.QuickCheck.Property.Property
  {- Arity: 9,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U> -}
3dbf3fe6f8e127794fd6f71e2cbb1844
  tests_cpsExp_simpOp ::
    Main.Ops
    -> Main.Ops
    -> Main.Ops
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Test.QuickCheck.Property.Property
  {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U> -}
4d924070a0208cc7e98a801a0f50fee2
  tests_isSimple :: Lib.Exp -> Test.QuickCheck.Property.Property
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (e :: Lib.Exp) ->
                 let {
                   x2 :: GHC.Types.Bool = Lib.isSimple e
                 } in
                 let {
                   y :: GHC.Types.Bool = Main.isSimple_test e
                 } in
                 Test.QuickCheck.Property.counterexample_$scounterexample
                   (case x2 of wild {
                      GHC.Types.False
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           GHC.Show.$fShowBool4
                           (case y of wild1 {
                              GHC.Types.False -> Main.tests_isSimple4
                              GHC.Types.True -> Main.tests_isSimple3 })
                      GHC.Types.True
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           GHC.Show.$fShowBool2
                           (case y of wild1 {
                              GHC.Types.False -> Main.tests_isSimple2
                              GHC.Types.True -> Main.tests_isSimple1 }) })
                   (case x2 of wild {
                      GHC.Types.False
                      -> case y of wild1 {
                           GHC.Types.False -> GHC.Types.True
                           GHC.Types.True -> GHC.Types.False }
                      GHC.Types.True -> y })) -}
7fecd9ff8d317d8af2bdb6f514f4b9ab
  tests_isSimple1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Test.QuickCheck.Property.=/=3
                   GHC.Show.$fShowBool2) -}
2cb678db8d49b3722bb817a0626476aa
  tests_isSimple2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Test.QuickCheck.Property.=/=1
                   GHC.Show.$fShowBool4) -}
70889732114279cc5a8b5b3e43a9c4f5
  tests_isSimple3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Test.QuickCheck.Property.=/=1
                   GHC.Show.$fShowBool2) -}
24bdfbdeef1f63a25f799d52d05017f5
  tests_isSimple4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Test.QuickCheck.Property.=/=3
                   GHC.Show.$fShowBool4) -}
instance [orphan] Test.QuickCheck.Arbitrary.Arbitrary [Lib.Exp]
  = Main.$fArbitraryExp
instance Test.QuickCheck.Arbitrary.Arbitrary [Main.NonSimpleExpr]
  = Main.$fArbitraryNonSimpleExpr
instance Test.QuickCheck.Arbitrary.Arbitrary [Main.Ops]
  = Main.$fArbitraryOps
instance Test.QuickCheck.Arbitrary.Arbitrary [Main.SimpleExpr]
  = Main.$fArbitrarySimpleExpr
instance GHC.Generics.Generic [Main.NonSimpleExpr]
  = Main.$fGenericNonSimpleExpr
instance GHC.Generics.Generic [Main.SimpleExpr]
  = Main.$fGenericSimpleExpr
instance GHC.Show.Show [Main.NonSimpleExpr]
  = Main.$fShowNonSimpleExpr
instance GHC.Show.Show [Main.Ops] = Main.$fShowOps
instance GHC.Show.Show [Main.SimpleExpr] = Main.$fShowSimpleExpr
family instance GHC.Generics.Rep [Main.SimpleExpr]
  = Main.Rep_SimpleExpr
family instance GHC.Generics.Rep [Main.NonSimpleExpr]
  = Main.Rep_NonSimpleExpr
"SPEC/Main $fArbitraryNonEmptyList @ Integer" [orphan] forall (v :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                      GHC.Integer.Type.Integer)
  Test.QuickCheck.Modifiers.$fArbitraryNonEmptyList @ GHC.Integer.Type.Integer
                                                    v
  = Main.$s$fArbitraryNonEmptyList
"SPEC/Main $fArbitraryPositive @ (Small Integer)" [orphan] forall (v2 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                           (Test.QuickCheck.Modifiers.Small
                                                                              GHC.Integer.Type.Integer))
                                                                  (v1 :: GHC.Classes.Ord
                                                                           (Test.QuickCheck.Modifiers.Small
                                                                              GHC.Integer.Type.Integer))
                                                                  (v :: GHC.Num.Num
                                                                          (Test.QuickCheck.Modifiers.Small
                                                                             GHC.Integer.Type.Integer))
  Test.QuickCheck.Modifiers.$fArbitraryPositive @ (Test.QuickCheck.Modifiers.Small
                                                     GHC.Integer.Type.Integer)
                                                v
                                                v1
                                                v2
  = Main.$s$fArbitraryPositive
"SPEC/Main $fArbitrarySet2 @ Char" [orphan] [2] forall (w1 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                GHC.Types.Char)
  Test.QuickCheck.Arbitrary.$fArbitrarySet2 @ GHC.Types.Char w1
  = Main.$s$fArbitrarySet2
"SPEC/Main $fArbitrarySmall @ Integer" [orphan] forall (v :: GHC.Real.Integral
                                                               GHC.Integer.Type.Integer)
  Test.QuickCheck.Modifiers.$fArbitrarySmall @ GHC.Integer.Type.Integer
                                             v
  = Main.$s$fArbitraryPositive_$s$fArbitrarySmall
"SPEC/Main $fArbitrarySmall_$cshrink @ Integer" [orphan] [2] forall (w1 :: GHC.Real.Integral
                                                                             GHC.Integer.Type.Integer)
  Test.QuickCheck.Modifiers.$fArbitrarySmall_$cshrink @ GHC.Integer.Type.Integer
                                                      w1
  = Main.$s$fArbitrarySmall_$cshrink
"SPEC/Main $fArbitrary[] @ Char" [orphan] forall (v :: Test.QuickCheck.Arbitrary.Arbitrary
                                                         GHC.Types.Char)
  Test.QuickCheck.Arbitrary.$fArbitrary[] @ GHC.Types.Char v
  = Main.$s$fArbitrary[]
"SPEC/Main $fArbitrary[]_$cshrink @ Char" [orphan] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                            GHC.Types.Char)
  Test.QuickCheck.Arbitrary.$fArbitrary[]_$cshrink @ GHC.Types.Char
                                                   $dArbitrary
  = Main.$s$fArbitrary[]_$cshrink
"SPEC/Main $fEqSmall @ Integer" [orphan] forall (v :: GHC.Classes.Eq
                                                        GHC.Integer.Type.Integer)
  Test.QuickCheck.Modifiers.$fEqSmall @ GHC.Integer.Type.Integer v
  = Main.$s$fArbitraryPositive_$s$fEqSmall
"SPEC/Main $fNumSmall @ Integer" [orphan] forall (v :: GHC.Num.Num
                                                         GHC.Integer.Type.Integer)
  Test.QuickCheck.Modifiers.$fNumSmall @ GHC.Integer.Type.Integer v
  = Main.$s$fArbitraryPositive_$s$fNumSmall
"SPEC/Main $fOrdSmall @ Integer" [orphan] forall (v :: GHC.Classes.Ord
                                                         GHC.Integer.Type.Integer)
  Test.QuickCheck.Modifiers.$fOrdSmall @ GHC.Integer.Type.Integer v
  = Main.$s$fArbitraryPositive_$s$fOrdSmall
"SPEC/Main $fShowNonEmptyList @ Integer" [orphan] forall (v :: GHC.Show.Show
                                                                 GHC.Integer.Type.Integer)
  Test.QuickCheck.Modifiers.$fShowNonEmptyList @ GHC.Integer.Type.Integer
                                               v
  = Main.$s$fShowNonEmptyList
"SPEC/Main $fShowNonEmptyList_$cshowList @ Integer" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                 GHC.Integer.Type.Integer)
  Test.QuickCheck.Modifiers.$fShowNonEmptyList_$cshowList @ GHC.Integer.Type.Integer
                                                          $dShow
  = Main.$s$fShowNonEmptyList_$cshowList
"SPEC/Main $fShowNonEmptyList_$cshowsPrec @ Integer" [orphan] [2] forall (w1 :: GHC.Show.Show
                                                                                  GHC.Integer.Type.Integer)
  Test.QuickCheck.Modifiers.$fShowNonEmptyList_$cshowsPrec @ GHC.Integer.Type.Integer
                                                           w1
  = Main.$s$fShowNonEmptyList_$cshowsPrec
"SPEC/Main $fShowPositive @ (Small Integer)" [orphan] forall (v :: GHC.Show.Show
                                                                     (Test.QuickCheck.Modifiers.Small
                                                                        GHC.Integer.Type.Integer))
  Test.QuickCheck.Modifiers.$fShowPositive @ (Test.QuickCheck.Modifiers.Small
                                                GHC.Integer.Type.Integer)
                                           v
  = Main.$s$fShowPositive
"SPEC/Main $fShowPositive_$cshowList @ (Small Integer)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                     (Test.QuickCheck.Modifiers.Small
                                                                                        GHC.Integer.Type.Integer))
  Test.QuickCheck.Modifiers.$fShowPositive_$cshowList @ (Test.QuickCheck.Modifiers.Small
                                                           GHC.Integer.Type.Integer)
                                                      $dShow
  = Main.$s$fShowPositive_$cshowList
"SPEC/Main $fShowPositive_$cshowsPrec @ (Small Integer)" [orphan] [2] forall (w1 :: GHC.Show.Show
                                                                                      (Test.QuickCheck.Modifiers.Small
                                                                                         GHC.Integer.Type.Integer))
  Test.QuickCheck.Modifiers.$fShowPositive_$cshowsPrec @ (Test.QuickCheck.Modifiers.Small
                                                            GHC.Integer.Type.Integer)
                                                       w1
  = Main.$s$fShowPositive_$cshowsPrec
"SPEC/Main $fShowSmall @ Integer" [orphan] forall (v :: GHC.Show.Show
                                                          GHC.Integer.Type.Integer)
  Test.QuickCheck.Modifiers.$fShowSmall @ GHC.Integer.Type.Integer v
  = Main.$s$fShowPositive_$s$fShowSmall
"SPEC/Main $fShowSmall_$cshowList @ Integer" [orphan] forall ($dShow :: GHC.Show.Show
                                                                          GHC.Integer.Type.Integer)
  Test.QuickCheck.Modifiers.$fShowSmall_$cshowList @ GHC.Integer.Type.Integer
                                                   $dShow
  = Main.$s$fShowSmall_$cshowList
"SPEC/Main $fShowSmall_$cshowsPrec @ Integer" [orphan] [2] forall (w1 :: GHC.Show.Show
                                                                           GHC.Integer.Type.Integer)
  Test.QuickCheck.Modifiers.$fShowSmall_$cshowsPrec @ GHC.Integer.Type.Integer
                                                    w1
  = Main.$s$fShowSmall_$cshowsPrec
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

