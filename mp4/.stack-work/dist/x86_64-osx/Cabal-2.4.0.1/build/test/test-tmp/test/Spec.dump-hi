
==================== FINAL INTERFACE ====================
2019-03-20 20:52:12.420413 UTC

interface main:Main 8063
  interface hash: 3eddeb1a1c84106dcb0e8da8238b5c1c
  ABI hash: 93e3c9f920af2c402481251dad23dad4
  export-list hash: 9f99c64de98cd286f5ccecf52caf16f1
  orphan hash: 4e663fe95f7128c3f80904282caa3a22
  flag hash: 9b2c3188db30278f572183e2ff68344f
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: QuickCheck-2.12.6.1 ansi-terminal-0.8.2
                      ansi-wl-pprint-0.6.8.2 array-0.5.3.0 base-4.12.0.0 binary-0.8.6.0
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.6.0.1 deepseq-1.4.4.0
                      erf-2.0.0.0 ghc-boot-th-8.6.3 ghc-prim-0.5.3 hostname-1.0
                      integer-gmp-1.0.2.0 mp4-forth-0.1.0.0 pretty-1.1.3.6
                      primitive-0.6.4.0 random-1.1 regex-base-0.93.2 regex-posix-0.95.2
                      template-haskell-2.14.0.0 test-framework-0.8.2.0
                      test-framework-quickcheck2-0.3.0.5 text-1.2.3.1 tf-random-0.5
                      time-1.8.0.2 transformers-0.5.5.0 xml-1.3.14
orphans: colour-2.3.4:Data.Colour text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         regex-posix-0.95.2:Text.Regex.Posix.String
         regex-base-0.93.2:Text.Regex.Base.Context
         transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         ghc-boot-th-8.6.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck 38addeb83ca99bb269a5b885eb60712d
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck.Arbitrary 4386ea90f0dc188b70763f62e1371604
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck.Exception b051989402c5d6c2b30c42c3e3a8e729
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck.Gen 52a2870cae80749de1cdb333c2b81e72
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck.Property 53ae7729b399320a6fe2cdf3d26c77c2
import  -/  base-4.12.0.0:Data.Either 946a3435d06773e1dbcad1ba5dc18a2c
import  -/  base-4.12.0.0:Data.Foldable 00188ddf89c975fee76bdfad479443c1
import  -/  base-4.12.0.0:Data.Functor 22aac80fdb6c7b7f60b4aaab86afee64
import  -/  base-4.12.0.0:Data.List ce2c69da408fdc014383cede9e1f9adf
import  -/  base-4.12.0.0:Data.OldList c2cab40fed7d27b5e717779f9a3c09ea
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.List 734a72beb76d276fb4a0ba2689a5711f
import  -/  base-4.12.0.0:GHC.Num 847723f2584d989dac1eada133ac3fb8
import  -/  base-4.12.0.0:GHC.Real f7dad82c1d43d80823865d3e6c6636e0
import  -/  base-4.12.0.0:GHC.Show 4e438f26d903388cc6c2c5d64ed01b98
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  base-4.12.0.0:Text.Read e428ad664707f4e90693a55e6a6b4b1a
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 7f56f3d142debd8666df241a1ddc7887
import  -/  mp4-forth-0.1.0.0:Lib 2db60731fd181f5aa8be20ebd0ddcb49
import  -/  test-framework-0.8.2.0:Test.Framework a2c82671184ddd2b4e8c9ca0287b21e7
import  -/  test-framework-0.8.2.0:Test.Framework.Core 61a88e7ac9277b27178af36058d907c1
import  -/  test-framework-0.8.2.0:Test.Framework.Runners.Console 5c30bdba7e927f14d77f70d22f97453f
import  -/  test-framework-quickcheck2-0.3.0.5:Test.Framework.Providers.QuickCheck2 74088e42630bcc514c55d77a7ae677f1
fc70cb0589ab620f4c4c10ab66765fe8
  $fArbitraryArbBooleanIStack ::
    Test.QuickCheck.Arbitrary.Arbitrary Main.ArbBooleanIStack
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.ArbBooleanIStack
                  Main.$fArbitraryArbBooleanIStack1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] (Main.N:ArbBooleanIStack[0])))
                  Main.$fArbitraryArbBooleanIStack_$cshrink -}
112d0c0678c364f5aba94bf84e37f01e
  $fArbitraryArbBooleanIStack1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> [GHC.Integer.Type.Integer]
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                 case n of wild { GHC.Types.I# x ->
                 Test.QuickCheck.Gen.$s$wreplicateM1
                   @ GHC.Integer.Type.Integer
                   (GHC.Prim.+# x 1#)
                   Main.$fArbitraryArbBooleanIStack2
                   r
                   wild }) -}
03193955033159e462869adf1fb46b49
  $fArbitraryArbBooleanIStack2 ::
    Test.QuickCheck.Gen.Gen GHC.Integer.Type.Integer
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ GHC.Integer.Type.Integer
                   Main.$fArbitraryArbBooleanIStack3) -}
18d2bfc8b18add8690ce729045ff6a30
  $fArbitraryArbBooleanIStack3 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.$fArbitraryArbBooleanIStack6
                   Main.$fArbitraryArbBooleanIStack4) -}
cf9977888004243c453a5f443666f7b8
  $fArbitraryArbBooleanIStack4 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.$fArbitraryArbBooleanIStack5
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)) -}
ad80e47605028eaf2bb7958bb545450d
  $fArbitraryArbBooleanIStack5 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
3b18f2fad044e9bd6a9bf693e3fdbcfb
  $fArbitraryArbBooleanIStack6 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (-1) -}
fc70cb0589ab620f4c4c10ab66765fe8
  $fArbitraryArbBooleanIStack_$cshrink ::
    Main.ArbBooleanIStack -> [Main.ArbBooleanIStack]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.ArbBooleanIStack) ->
                 GHC.Types.[] @ Main.ArbBooleanIStack) -}
672d489e136b38c2a04b42a17c785b57
  $fArbitraryArbIStack ::
    Test.QuickCheck.Arbitrary.Arbitrary Main.ArbIStack
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.ArbIStack
                  Main.$fArbitraryArbIStack_$s$fArbitrarySet2
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] (Main.N:ArbIStack[0])))
                  Main.$fArbitraryArbIStack_$cshrink -}
672d489e136b38c2a04b42a17c785b57
  $fArbitraryArbIStack_$cshrink :: Main.ArbIStack -> [Main.ArbIStack]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.ArbIStack) -> GHC.Types.[] @ Main.ArbIStack) -}
c78da044208892d0b100972c8cf044b7
  $fArbitraryArbIStack_$s$fArbitrarySet2 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> [GHC.Integer.Type.Integer]
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: Test.QuickCheck.Random.QCGen) (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w2 of ww7 { GHC.Types.I# ww8 ->
                 Test.QuickCheck.Gen.$wlistOf
                   @ GHC.Integer.Type.Integer
                   Test.QuickCheck.Arbitrary.$fArbitraryInteger_$sarbitrarySizedIntegral
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Integer.Type.Integer>_R))
                   ww1
                   ww2
                   ww3
                   ww4
                   ww8 } }) -}
8be1ce8183cc3c09c9ae19deb3e52269
  $fArbitraryArbSafePrimCode ::
    Test.QuickCheck.Arbitrary.Arbitrary Main.ArbSafePrimCode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.ArbSafePrimCode
                  Main.$fArbitraryArbSafePrimCode1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.ArbSafePrimCode>_R))
                  Main.$fArbitraryArbSafePrimCode_$cshrink -}
8be1ce8183cc3c09c9ae19deb3e52269
  $fArbitraryArbSafePrimCode1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Main.ArbSafePrimCode
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 Main.$w$carbitrary ww1 ww2 ww3 ww4 ww8 } }) -}
740c8e34cdf6895c4126132ab8fd1275
  $fArbitraryArbSafePrimCode10 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryArbSafePrimCode32
                   Main.$fArbitraryArbSafePrimCode11) -}
278df5f8e1120928a6f6c2793f482d5e
  $fArbitraryArbSafePrimCode11 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryArbSafePrimCode30
                   Main.$fArbitraryArbSafePrimCode12) -}
5567903d026992228564768c553df0e8
  $fArbitraryArbSafePrimCode12 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryArbSafePrimCode28
                   Main.$fArbitraryArbSafePrimCode13) -}
72f2103faac774f080d4e304c5561cb3
  $fArbitraryArbSafePrimCode13 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryArbSafePrimCode26
                   Main.$fArbitraryArbSafePrimCode14) -}
791e2a636e88a1c4843619732036a653
  $fArbitraryArbSafePrimCode14 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryArbSafePrimCode24
                   Main.$fArbitraryArbSafePrimCode15) -}
f51499abfafec212212f4b6f8ded3d54
  $fArbitraryArbSafePrimCode15 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryArbSafePrimCode22
                   Main.$fArbitraryArbSafePrimCode16) -}
6f3b2663f0de6f8bbda5a49c935695dd
  $fArbitraryArbSafePrimCode16 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryArbSafePrimCode20
                   Main.$fArbitraryArbSafePrimCode17) -}
67dce96bd70dd1097dbc5efe4e5e3440
  $fArbitraryArbSafePrimCode17 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryArbSafePrimCode18
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
3ef5179aaefc4aaa48a4e2548b572859
  $fArbitraryArbSafePrimCode18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.$fArbitraryArbSafePrimCode19) -}
571d3fdc5f35a4ec861dd1e4f280bdbd
  $fArbitraryArbSafePrimCode19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (".S"#) -}
8e758af5818d8c51247bf937bebbf69f
  $fArbitraryArbSafePrimCode2 ::
    Test.QuickCheck.Gen.Gen [GHC.Types.Char]
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ [GHC.Types.Char]
                   Main.$fArbitraryArbSafePrimCode3) -}
fa6d12c297337c6fa64154ab35237b2a
  $fArbitraryArbSafePrimCode20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.$fArbitraryArbSafePrimCode21) -}
a1e0472b08583ae866fd3caf67217ca1
  $fArbitraryArbSafePrimCode21 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("."#) -}
59c5a52f9bb62097b8052da9517f9ce7
  $fArbitraryArbSafePrimCode22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.$fArbitraryArbSafePrimCode23) -}
6e2b0c128d5dab299ab7c5c18195d838
  $fArbitraryArbSafePrimCode23 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("rot"#) -}
b71d644943b5c6bcbbe128addb82e7a9
  $fArbitraryArbSafePrimCode24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.$fArbitraryArbSafePrimCode25) -}
7ce79055967b71fd9177074a6529e281
  $fArbitraryArbSafePrimCode25 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("drop"#) -}
9538cc2cfb36f71378002a7ba17b81ef
  $fArbitraryArbSafePrimCode26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.$fArbitraryArbSafePrimCode27) -}
ed575b224d19c534a8666bc71da44a9a
  $fArbitraryArbSafePrimCode27 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("swap"#) -}
a9e28a639723ded6ea3fbd36f5c6e394
  $fArbitraryArbSafePrimCode28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.$fArbitraryArbSafePrimCode29) -}
e1a7c95af989cb0eef2e3694c9084f44
  $fArbitraryArbSafePrimCode29 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("dup"#) -}
eb3f4f5db56c0acd8550f46986985494
  $fArbitraryArbSafePrimCode3 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryArbSafePrimCode46
                   Main.$fArbitraryArbSafePrimCode4) -}
6103742fd6dc369ddfc13443197893ce
  $fArbitraryArbSafePrimCode30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.$fArbitraryArbSafePrimCode31) -}
211c916e58783e1baef2bc8680eedab8
  $fArbitraryArbSafePrimCode31 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("!="#) -}
83a850d90d709fc36906f25f0f555f99
  $fArbitraryArbSafePrimCode32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.$fArbitraryArbSafePrimCode33) -}
61e1b7e2cb3161a8ae0ea85b5c4b88a6
  $fArbitraryArbSafePrimCode33 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("="#) -}
ee261dbef920da52e0ca30356165f09b
  $fArbitraryArbSafePrimCode34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.$fArbitraryArbSafePrimCode35) -}
ec8dde21f3b33971e877afe4228b3348
  $fArbitraryArbSafePrimCode35 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (">="#) -}
1d1b5faaaf8ff1e1212e854dbb6c4edf
  $fArbitraryArbSafePrimCode36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.$fArbitraryArbSafePrimCode37) -}
dad9489d79253acffb1b09a1b226ea36
  $fArbitraryArbSafePrimCode37 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<="#) -}
b55bf4adeec9ae3eec31b6abf766b391
  $fArbitraryArbSafePrimCode38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.$fArbitraryArbSafePrimCode39) -}
e2d40c282a34f8345ecfc3b78eb25c56
  $fArbitraryArbSafePrimCode39 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (">"#) -}
342274edba5dc4ef85c90545cd1ad397
  $fArbitraryArbSafePrimCode4 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryArbSafePrimCode44
                   Main.$fArbitraryArbSafePrimCode5) -}
a8d7a340174722b41e78c91122a0996d
  $fArbitraryArbSafePrimCode40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.$fArbitraryArbSafePrimCode41) -}
c21e99e9dd92a4bfdf078fb5007b38af
  $fArbitraryArbSafePrimCode41 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<"#) -}
e6c5e5522262df0a31df14e7d93f2a0e
  $fArbitraryArbSafePrimCode42 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.$fArbitraryArbSafePrimCode43) -}
9936cd3368b3b6a50749067b91199bbd
  $fArbitraryArbSafePrimCode43 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("*"#) -}
905ea646191c6f265f9ae6af3fa6f1bc
  $fArbitraryArbSafePrimCode44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.$fArbitraryArbSafePrimCode45) -}
eda0eb5015ba3949d9612e3c967ab783
  $fArbitraryArbSafePrimCode45 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("-"#) -}
4cc64231a7de808357a94c148025a98c
  $fArbitraryArbSafePrimCode46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.$fArbitraryArbSafePrimCode47) -}
f3027cecccf3748a336ad4f43a1e1ff8
  $fArbitraryArbSafePrimCode47 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("+"#) -}
8a6d6c24196850f71eab5cb04dddd342
  $fArbitraryArbSafePrimCode48 ::
    Test.QuickCheck.Gen.Gen GHC.Base.String
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ GHC.Base.String
                   (Main.$fArbitraryArbSafePrimCode_go
                      Main.$fArbitraryArbBooleanIStack5)) -}
88325ec1ebfb4b72a63673bd60b9266a
  $fArbitraryArbSafePrimCode5 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryArbSafePrimCode42
                   Main.$fArbitraryArbSafePrimCode6) -}
f431b6fe1131cd20d447bd76b6208da2
  $fArbitraryArbSafePrimCode6 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryArbSafePrimCode40
                   Main.$fArbitraryArbSafePrimCode7) -}
45d5326c7f3fcb81381d0def75a0cf73
  $fArbitraryArbSafePrimCode7 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryArbSafePrimCode38
                   Main.$fArbitraryArbSafePrimCode8) -}
566a522daccb78aef67a578857c1f553
  $fArbitraryArbSafePrimCode8 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryArbSafePrimCode36
                   Main.$fArbitraryArbSafePrimCode9) -}
5ff4e38604e46d037ffecda4e809622a
  $fArbitraryArbSafePrimCode9 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.$fArbitraryArbSafePrimCode34
                   Main.$fArbitraryArbSafePrimCode10) -}
8be1ce8183cc3c09c9ae19deb3e52269
  $fArbitraryArbSafePrimCode_$cshrink ::
    Main.ArbSafePrimCode -> [Main.ArbSafePrimCode]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.ArbSafePrimCode) ->
                 GHC.Types.[] @ Main.ArbSafePrimCode) -}
b75da9238573927eb71594687c35f030
  $fArbitraryArbSafePrimCode_go ::
    GHC.Integer.Type.Integer -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,U> -}
c04055ff0f14993c6af4f9b54a4e8def
  $fArbitraryArbStructuredITECode ::
    Test.QuickCheck.Arbitrary.Arbitrary Main.ArbStructuredITECode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.ArbStructuredITECode
                  Main.$fArbitraryArbStructuredITECode1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.ArbStructuredITECode>_R))
                  Main.$fArbitraryArbStructuredITECode_$cshrink -}
c04055ff0f14993c6af4f9b54a4e8def
  $fArbitraryArbStructuredITECode1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Main.ArbStructuredITECode
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 Main.$w$carbitrary1 ww1 ww2 ww3 ww4 ww8 } }) -}
c04055ff0f14993c6af4f9b54a4e8def
  $fArbitraryArbStructuredITECode_$cshrink ::
    Main.ArbStructuredITECode -> [Main.ArbStructuredITECode]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.ArbStructuredITECode) ->
                 GHC.Types.[] @ Main.ArbStructuredITECode) -}
0d97180930ad5abe1750c16e82c6fdd7
  $fArbitraryArbStructuredITECode_aux ::
    Main.ITE -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,1*U> -}
dcabe495a3d74831bcd970b2a8964f2b
  $fArbitraryArbStructuredLoopCode ::
    Test.QuickCheck.Arbitrary.Arbitrary Main.ArbStructuredLoopCode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.ArbStructuredLoopCode
                  Main.$fArbitraryArbStructuredLoopCode1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.ArbStructuredLoopCode>_R))
                  Main.$fArbitraryArbStructuredLoopCode_$cshrink -}
dcabe495a3d74831bcd970b2a8964f2b
  $fArbitraryArbStructuredLoopCode1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Main.ArbStructuredLoopCode
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 Main.$w$carbitrary2 ww1 ww2 ww3 ww4 ww8 } }) -}
dcabe495a3d74831bcd970b2a8964f2b
  $fArbitraryArbStructuredLoopCode_$cshrink ::
    Main.ArbStructuredLoopCode -> [Main.ArbStructuredLoopCode]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.ArbStructuredLoopCode) ->
                 GHC.Types.[] @ Main.ArbStructuredLoopCode) -}
866ae4533e602410a173ed29d4fea5c7
  $fArbitraryArbStructuredLoopCode_aux ::
    Main.Loop -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,1*U> -}
a60d096b2958af70dad9e9c1a1b6a6d6
  $fArbitraryArithOp ::
    Test.QuickCheck.Arbitrary.Arbitrary Main.ArithOp
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.ArithOp
                  Main.$fArbitraryArithOp1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] (Main.N:ArithOp[0])))
                  Main.$fArbitraryArithOp_$cshrink -}
6eb42363429e9e4e888a134f755960b4
  $fArbitraryArithOp1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> (GHC.Base.String,
        GHC.Integer.Type.Integer
        -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, True)
                (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                 Main.$fArbitraryArithOp_ds
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0]
                      <(GHC.Base.String,
                        GHC.Integer.Type.Integer
                        -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)>_R)
                   r
                   n) -}
4e42c626b7151d1f03a8918f25484da3
  $fArbitraryArithOp10 ::
    ([GHC.Types.Char],
     GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)
  {- Strictness: m,
     Unfolding: ((Main.$fArbitraryArbSafePrimCode44,
                  GHC.Integer.Type.minusInteger)) -}
0925f5ba4198ff4dac0d7116a178e05d
  $fArbitraryArithOp11 ::
    ([GHC.Types.Char],
     GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)
  {- Strictness: m,
     Unfolding: ((Main.$fArbitraryArbSafePrimCode46,
                  GHC.Integer.Type.plusInteger)) -}
428dc47180fedc1c4707f2795e101025
  $fArbitraryArithOp2 ::
    [([GHC.Types.Char],
      GHC.Integer.Type.Integer
      -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char],
                      GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)
                   Main.$fArbitraryArithOp11
                   Main.$fArbitraryArithOp3) -}
3afd7466b4c8eb2856cd1fc01b2170bd
  $fArbitraryArithOp3 ::
    [([GHC.Types.Char],
      GHC.Integer.Type.Integer
      -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char],
                      GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)
                   Main.$fArbitraryArithOp10
                   Main.$fArbitraryArithOp4) -}
b9b26299ad11afa68f5488ef22174e91
  $fArbitraryArithOp4 ::
    [([GHC.Types.Char],
      GHC.Integer.Type.Integer
      -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char],
                      GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)
                   Main.$fArbitraryArithOp9
                   Main.$fArbitraryArithOp5) -}
8b348aa57bd08f162cccc06d6ff6a258
  $fArbitraryArithOp5 ::
    [([GHC.Types.Char],
      GHC.Integer.Type.Integer
      -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char],
                      GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)
                   Main.$fArbitraryArithOp6
                   (GHC.Types.[]
                      @ ([GHC.Types.Char],
                         GHC.Integer.Type.Integer
                         -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer))) -}
ff6f9d341d0b3138786398f65df46d15
  $fArbitraryArithOp6 ::
    ([GHC.Types.Char],
     GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)
  {- Strictness: m,
     Unfolding: ((Main.$fArbitraryArithOp7,
                  GHC.Real.$fIntegralInteger_$cdiv)) -}
070637282f47d2b99b8c847c1592061f
  $fArbitraryArithOp7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.$fArbitraryArithOp8) -}
18cf152b7d70fb75cfd37da29cbf7637
  $fArbitraryArithOp8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/"#) -}
1df6d4f0b5d2a4be6d16330aac2bed23
  $fArbitraryArithOp9 ::
    ([GHC.Types.Char],
     GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)
  {- Strictness: m,
     Unfolding: ((Main.$fArbitraryArbSafePrimCode42,
                  GHC.Integer.Type.timesInteger)) -}
a60d096b2958af70dad9e9c1a1b6a6d6
  $fArbitraryArithOp_$cshrink :: Main.ArithOp -> [Main.ArithOp]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.ArithOp) -> GHC.Types.[] @ Main.ArithOp) -}
435bf8708b5496442afd4c1464a8b4ff
  $fArbitraryArithOp_ds ::
    Test.QuickCheck.Gen.Gen
      (GHC.Base.String,
       GHC.Integer.Type.Integer
       -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ ([GHC.Types.Char],
                      GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)
                   Main.$fArbitraryArithOp2) -}
b42b10fd2a903dccf048c237fb432c28
  $fArbitraryCompOp ::
    Test.QuickCheck.Arbitrary.Arbitrary Main.CompOp
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.CompOp
                  Main.$fArbitraryCompOp1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] (Main.N:CompOp[0])))
                  Main.$fArbitraryCompOp_$cshrink -}
07ecc8c49b5e11bf0bd3d8455488aef1
  $fArbitraryCompOp1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> (GHC.Base.String,
        GHC.Integer.Type.Integer
        -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, True)
                (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                 Main.$fArbitraryCompOp_ds
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0]
                      <(GHC.Base.String,
                        GHC.Integer.Type.Integer
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool)>_R)
                   r
                   n) -}
b8730062da30be71607e2427b41e0e27
  $fArbitraryCompOp10 ::
    ([GHC.Types.Char],
     GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
  {- Strictness: m,
     Unfolding: ((Main.$fArbitraryArbSafePrimCode34,
                  GHC.Integer.Type.geInteger)) -}
9ee05348ed094c6c75ecd1e9e7b2b6c1
  $fArbitraryCompOp11 ::
    ([GHC.Types.Char],
     GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
  {- Strictness: m,
     Unfolding: ((Main.$fArbitraryArbSafePrimCode36,
                  GHC.Integer.Type.leInteger)) -}
d485d5a3a69e05812a675115d8aa9a9e
  $fArbitraryCompOp12 ::
    ([GHC.Types.Char],
     GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
  {- Strictness: m,
     Unfolding: ((Main.$fArbitraryArbSafePrimCode38,
                  GHC.Integer.Type.gtInteger)) -}
1eb6dd545b149112a94119e45eb34cde
  $fArbitraryCompOp13 ::
    ([GHC.Types.Char],
     GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
  {- Strictness: m,
     Unfolding: ((Main.$fArbitraryArbSafePrimCode40,
                  GHC.Integer.Type.ltInteger)) -}
858c0fcfcfe0b42b587f866314d8bc2f
  $fArbitraryCompOp2 ::
    [([GHC.Types.Char],
      GHC.Integer.Type.Integer
      -> GHC.Integer.Type.Integer -> GHC.Types.Bool)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char],
                      GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
                   Main.$fArbitraryCompOp13
                   Main.$fArbitraryCompOp3) -}
3dc6d90c3ae3948e6e68fe1e9edec98e
  $fArbitraryCompOp3 ::
    [([GHC.Types.Char],
      GHC.Integer.Type.Integer
      -> GHC.Integer.Type.Integer -> GHC.Types.Bool)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char],
                      GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
                   Main.$fArbitraryCompOp12
                   Main.$fArbitraryCompOp4) -}
fa6e4606f8a6a11999c0299c7fe70e32
  $fArbitraryCompOp4 ::
    [([GHC.Types.Char],
      GHC.Integer.Type.Integer
      -> GHC.Integer.Type.Integer -> GHC.Types.Bool)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char],
                      GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
                   Main.$fArbitraryCompOp11
                   Main.$fArbitraryCompOp5) -}
09c782b736e6466a05e6b2a4b5aed60f
  $fArbitraryCompOp5 ::
    [([GHC.Types.Char],
      GHC.Integer.Type.Integer
      -> GHC.Integer.Type.Integer -> GHC.Types.Bool)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char],
                      GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
                   Main.$fArbitraryCompOp10
                   Main.$fArbitraryCompOp6) -}
b8001da970a1b4d1ffa769065ea1e579
  $fArbitraryCompOp6 ::
    [([GHC.Types.Char],
      GHC.Integer.Type.Integer
      -> GHC.Integer.Type.Integer -> GHC.Types.Bool)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char],
                      GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
                   Main.$fArbitraryCompOp9
                   Main.$fArbitraryCompOp7) -}
5ee504fc159cb1f90855bf64e4b9c7ab
  $fArbitraryCompOp7 ::
    [([GHC.Types.Char],
      GHC.Integer.Type.Integer
      -> GHC.Integer.Type.Integer -> GHC.Types.Bool)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char],
                      GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
                   Main.$fArbitraryCompOp8
                   (GHC.Types.[]
                      @ ([GHC.Types.Char],
                         GHC.Integer.Type.Integer
                         -> GHC.Integer.Type.Integer -> GHC.Types.Bool))) -}
2aae7f2640a4057ed0b5b0939415e1f1
  $fArbitraryCompOp8 ::
    ([GHC.Types.Char],
     GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
  {- Strictness: m,
     Unfolding: ((Main.$fArbitraryArbSafePrimCode32,
                  GHC.Integer.Type.eqInteger)) -}
dc65ab39c347fae9116673783f8692a2
  $fArbitraryCompOp9 ::
    ([GHC.Types.Char],
     GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
  {- Strictness: m,
     Unfolding: ((Main.$fArbitraryArbSafePrimCode30,
                  GHC.Integer.Type.neqInteger)) -}
b42b10fd2a903dccf048c237fb432c28
  $fArbitraryCompOp_$cshrink :: Main.CompOp -> [Main.CompOp]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.CompOp) -> GHC.Types.[] @ Main.CompOp) -}
6b866a25bff18b2f2a5023d548da26ee
  $fArbitraryCompOp_ds ::
    Test.QuickCheck.Gen.Gen
      (GHC.Base.String,
       GHC.Integer.Type.Integer
       -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ ([GHC.Types.Char],
                      GHC.Integer.Type.Integer
                      -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
                   Main.$fArbitraryCompOp2) -}
ce47fc30895ad2a451b6c23d7779864c
  $fArbitraryFactorialCode ::
    Test.QuickCheck.Arbitrary.Arbitrary Main.FactorialCode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.FactorialCode
                  Main.$fArbitraryFactorialCode1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                            (Nth:3
                                 (Nth:3
                                      (<Test.QuickCheck.Random.QCGen>_R
                                       ->_R <GHC.Types.Int>_R
                                       ->_R Main.N:FactorialCode[0])))))
                  Main.$fArbitraryFactorialCode_$cshrink -}
68cecc94ccbf103a20335141aa755a60
  $fArbitraryFactorialCode1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Base.String]
  {- Arity: 2, Strictness: <L,A><L,1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                 GHC.Types.:
                   @ GHC.Base.String
                   (case n of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt
                           0#
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   Main.$fArbitraryFactorialCode2) -}
7369733dc8caec68e5837a8a216fa328
  $fArbitraryFactorialCode2 :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.words
                   (GHC.CString.unpackCString# Main.$fArbitraryFactorialCode3)) -}
6f189e3c097cbc45b28fc3be1000a7b9
  $fArbitraryFactorialCode3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: (": fact  dup 1 <= if  drop 1  else  dup  begin  1 - dup rot * swap  dup 1 <= until  drop  then ; fact"#) -}
ce47fc30895ad2a451b6c23d7779864c
  $fArbitraryFactorialCode_$cshrink ::
    Main.FactorialCode -> [Main.FactorialCode]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.FactorialCode) ->
                 GHC.Types.[] @ Main.FactorialCode) -}
315f45fa6b075417dfe229a20cf513ca
  $fArbitraryGEQ3IStack ::
    Test.QuickCheck.Arbitrary.Arbitrary Main.GEQ3IStack
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.GEQ3IStack
                  Main.$fArbitraryGEQ3IStack1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] (Main.N:GEQ3IStack[0])))
                  Main.$fArbitraryGEQ3IStack_$cshrink -}
f1bf0c567f03459cdfbea4411725da20
  $fArbitraryGEQ3IStack1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> [GHC.Integer.Type.Integer]
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 Main.$w$carbitrary3 ww1 ww2 ww3 ww4 ww8 } }) -}
678364499da11e4ac303003f00bee957
  $fArbitraryGEQ3IStack2 ::
    [GHC.Integer.Type.Integer] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (xs :: [GHC.Integer.Type.Integer]) ->
                 case GHC.List.$wlenAcc
                        @ GHC.Integer.Type.Integer
                        xs
                        0# of ww2 { DEFAULT ->
                 case GHC.Prim.>=# ww2 3# of lwild {
                   DEFAULT -> GHC.Types.False
                   1# -> Main.$fArbitraryGEQ3IStack_go xs } }) -}
315f45fa6b075417dfe229a20cf513ca
  $fArbitraryGEQ3IStack_$cshrink ::
    Main.GEQ3IStack -> [Main.GEQ3IStack]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.GEQ3IStack) -> GHC.Types.[] @ Main.GEQ3IStack) -}
9b18308987ecf83b73f1e5b46d32e508
  $fArbitraryGEQ3IStack_go ::
    [GHC.Integer.Type.Integer] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
ec7218de797c8c01fd7908c10c0487e3
  $fArbitraryIStackOp ::
    Test.QuickCheck.Arbitrary.Arbitrary Main.IStackOp
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.IStackOp
                  Main.$fArbitraryIStackOp1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] (Main.N:IStackOp[0])))
                  Main.$fArbitraryIStackOp_$cshrink -}
337d9be4d42bad38b3cea635854ff2c1
  $fArbitraryIStackOp1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> (GHC.Base.String,
        Lib.IStack -> Lib.IStack -> Test.QuickCheck.Property.Property)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, True)
                (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                 Main.$fArbitraryIStackOp_ds
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0]
                      <(GHC.Base.String,
                        Lib.IStack -> Lib.IStack -> Test.QuickCheck.Property.Property)>_R)
                   r
                   n) -}
fbf0d027ead739e02defcaae8c53fe7e
  $fArbitraryIStackOp10 ::
    [GHC.Integer.Type.Integer]
    -> [GHC.Integer.Type.Integer] -> Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (is' :: [GHC.Integer.Type.Integer])
                   (ds :: [GHC.Integer.Type.Integer]) ->
                 case ds of wild {
                   [] -> Main.$fArbitraryIStackOp11
                   : i is
                   -> let {
                        res :: GHC.Types.Bool
                        = GHC.Classes.$fEq[]_$c==
                            @ GHC.Integer.Type.Integer
                            GHC.Integer.Type.$fEqInteger
                            is'
                            is
                      } in
                      Test.QuickCheck.Property.counterexample_$scounterexample
                        (GHC.Base.++
                           @ GHC.Types.Char
                           (GHC.Show.$fShowInteger_$cshowList
                              is'
                              (GHC.Types.[] @ GHC.Types.Char))
                           (case res of wild1 {
                              GHC.Types.False
                              -> GHC.Base.++
                                   @ GHC.Types.Char
                                   Test.QuickCheck.Property.=/=1
                                   (GHC.Show.$fShowInteger_$cshowList
                                      is
                                      (GHC.Types.[] @ GHC.Types.Char))
                              GHC.Types.True
                              -> GHC.Base.++
                                   @ GHC.Types.Char
                                   Test.QuickCheck.Property.=/=3
                                   (GHC.Show.$fShowInteger_$cshowList
                                      is
                                      (GHC.Types.[] @ GHC.Types.Char)) }))
                        res }) -}
79bba84b426b704497fb056172c44b6c
  $fArbitraryIStackOp11 :: Test.QuickCheck.Property.Property
  {- Strictness: x -}
d6962dbf6bb0bb9c03eafc6bd8f96596
  $fArbitraryIStackOp12 ::
    ([GHC.Types.Char],
     [GHC.Integer.Type.Integer]
     -> [GHC.Integer.Type.Integer] -> Test.QuickCheck.Property.Property)
  {- Strictness: m,
     Unfolding: ((Main.$fArbitraryArbSafePrimCode26,
                  Main.$fArbitraryIStackOp13)) -}
6d215bc4a3c4b25a53cf364d2027ead2
  $fArbitraryIStackOp13 ::
    [GHC.Integer.Type.Integer]
    -> [GHC.Integer.Type.Integer] -> Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (is' :: [GHC.Integer.Type.Integer])
                   (ds :: [GHC.Integer.Type.Integer]) ->
                 case ds of wild {
                   [] -> Main.$fArbitraryIStackOp14
                   : i2 ds1
                   -> case ds1 of wild1 {
                        [] -> Main.$fArbitraryIStackOp14
                        : i1 is
                        -> let {
                             y :: [GHC.Integer.Type.Integer]
                             = GHC.Types.: @ GHC.Integer.Type.Integer i2 is
                           } in
                           let {
                             y1 :: [GHC.Integer.Type.Integer]
                             = GHC.Types.: @ GHC.Integer.Type.Integer i1 y
                           } in
                           let {
                             res :: GHC.Types.Bool
                             = GHC.Classes.$fEq[]_$c==
                                 @ GHC.Integer.Type.Integer
                                 GHC.Integer.Type.$fEqInteger
                                 is'
                                 y1
                           } in
                           Test.QuickCheck.Property.counterexample_$scounterexample
                             (GHC.Base.++
                                @ GHC.Types.Char
                                (GHC.Show.$fShowInteger_$cshowList
                                   is'
                                   (GHC.Types.[] @ GHC.Types.Char))
                                (case res of wild2 {
                                   GHC.Types.False
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Test.QuickCheck.Property.=/=1
                                        (GHC.Show.$fShowInteger_$cshowList
                                           y1
                                           (GHC.Types.[] @ GHC.Types.Char))
                                   GHC.Types.True
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        Test.QuickCheck.Property.=/=3
                                        (GHC.Show.$fShowInteger_$cshowList
                                           y1
                                           (GHC.Types.[] @ GHC.Types.Char)) }))
                             res } }) -}
0db7ae90c2e88df74ced46d53349d774
  $fArbitraryIStackOp14 :: Test.QuickCheck.Property.Property
  {- Strictness: x -}
124acdf9b276717a186cc55561c6a3be
  $fArbitraryIStackOp15 ::
    ([GHC.Types.Char],
     [GHC.Integer.Type.Integer]
     -> [GHC.Integer.Type.Integer] -> Test.QuickCheck.Property.Property)
  {- Strictness: m,
     Unfolding: ((Main.$fArbitraryArbSafePrimCode28,
                  Main.$fArbitraryIStackOp16)) -}
36ccdeb00364ad8c1a74a91a686f5667
  $fArbitraryIStackOp16 ::
    [GHC.Integer.Type.Integer]
    -> [GHC.Integer.Type.Integer] -> Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (is' :: [GHC.Integer.Type.Integer])
                   (ds :: [GHC.Integer.Type.Integer]) ->
                 case ds of wild {
                   [] -> Main.$fArbitraryIStackOp17
                   : i is
                   -> let {
                        y :: [GHC.Integer.Type.Integer]
                        = GHC.Types.: @ GHC.Integer.Type.Integer i wild
                      } in
                      let {
                        res :: GHC.Types.Bool
                        = GHC.Classes.$fEq[]_$c==
                            @ GHC.Integer.Type.Integer
                            GHC.Integer.Type.$fEqInteger
                            is'
                            y
                      } in
                      Test.QuickCheck.Property.counterexample_$scounterexample
                        (GHC.Base.++
                           @ GHC.Types.Char
                           (GHC.Show.$fShowInteger_$cshowList
                              is'
                              (GHC.Types.[] @ GHC.Types.Char))
                           (case res of wild1 {
                              GHC.Types.False
                              -> GHC.Base.++
                                   @ GHC.Types.Char
                                   Test.QuickCheck.Property.=/=1
                                   (GHC.Show.$fShowInteger_$cshowList
                                      y
                                      (GHC.Types.[] @ GHC.Types.Char))
                              GHC.Types.True
                              -> GHC.Base.++
                                   @ GHC.Types.Char
                                   Test.QuickCheck.Property.=/=3
                                   (GHC.Show.$fShowInteger_$cshowList
                                      y
                                      (GHC.Types.[] @ GHC.Types.Char)) }))
                        res }) -}
a6ad9caddaa5174a662253aefa5f8263
  $fArbitraryIStackOp17 :: Test.QuickCheck.Property.Property
  {- Strictness: x -}
30a5993e54063c60f5361e0ed15a254c
  $fArbitraryIStackOp2 ::
    [([GHC.Types.Char],
      [GHC.Integer.Type.Integer]
      -> [GHC.Integer.Type.Integer]
      -> Test.QuickCheck.Property.Property)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char],
                      [GHC.Integer.Type.Integer]
                      -> [GHC.Integer.Type.Integer] -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryIStackOp15
                   Main.$fArbitraryIStackOp3) -}
d5f8f84bfd0ac566280028a1e36a1330
  $fArbitraryIStackOp3 ::
    [([GHC.Types.Char],
      [GHC.Integer.Type.Integer]
      -> [GHC.Integer.Type.Integer]
      -> Test.QuickCheck.Property.Property)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char],
                      [GHC.Integer.Type.Integer]
                      -> [GHC.Integer.Type.Integer] -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryIStackOp12
                   Main.$fArbitraryIStackOp4) -}
cf4f3fd0721ae7aa5f4d8089b6673d8f
  $fArbitraryIStackOp4 ::
    [([GHC.Types.Char],
      [GHC.Integer.Type.Integer]
      -> [GHC.Integer.Type.Integer]
      -> Test.QuickCheck.Property.Property)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char],
                      [GHC.Integer.Type.Integer]
                      -> [GHC.Integer.Type.Integer] -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryIStackOp9
                   Main.$fArbitraryIStackOp5) -}
8e6d255d0a35542148e9cfa61346ae3e
  $fArbitraryIStackOp5 ::
    [([GHC.Types.Char],
      [GHC.Integer.Type.Integer]
      -> [GHC.Integer.Type.Integer]
      -> Test.QuickCheck.Property.Property)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char],
                      [GHC.Integer.Type.Integer]
                      -> [GHC.Integer.Type.Integer] -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryIStackOp6
                   (GHC.Types.[]
                      @ ([GHC.Types.Char],
                         [GHC.Integer.Type.Integer]
                         -> [GHC.Integer.Type.Integer]
                         -> Test.QuickCheck.Property.Property))) -}
19c986a5b7493c9db46662859f02e474
  $fArbitraryIStackOp6 ::
    ([GHC.Types.Char],
     [GHC.Integer.Type.Integer]
     -> [GHC.Integer.Type.Integer] -> Test.QuickCheck.Property.Property)
  {- Strictness: m,
     Unfolding: ((Main.$fArbitraryArbSafePrimCode22,
                  Main.$fArbitraryIStackOp7)) -}
c13039dfdfa1ba55bdb3aab2375a73db
  $fArbitraryIStackOp7 ::
    [GHC.Integer.Type.Integer]
    -> [GHC.Integer.Type.Integer] -> Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (is' :: [GHC.Integer.Type.Integer])
                   (ds :: [GHC.Integer.Type.Integer]) ->
                 case ds of wild {
                   [] -> Main.$fArbitraryIStackOp8
                   : i3 ds1
                   -> case ds1 of wild1 {
                        [] -> Main.$fArbitraryIStackOp8
                        : i2 ds2
                        -> case ds2 of wild2 {
                             [] -> Main.$fArbitraryIStackOp8
                             : i1 is
                             -> let {
                                  y :: [GHC.Integer.Type.Integer]
                                  = GHC.Types.: @ GHC.Integer.Type.Integer i2 is
                                } in
                                let {
                                  y1 :: [GHC.Integer.Type.Integer]
                                  = GHC.Types.: @ GHC.Integer.Type.Integer i3 y
                                } in
                                let {
                                  y2 :: [GHC.Integer.Type.Integer]
                                  = GHC.Types.: @ GHC.Integer.Type.Integer i1 y1
                                } in
                                let {
                                  res :: GHC.Types.Bool
                                  = GHC.Classes.$fEq[]_$c==
                                      @ GHC.Integer.Type.Integer
                                      GHC.Integer.Type.$fEqInteger
                                      is'
                                      y2
                                } in
                                Test.QuickCheck.Property.counterexample_$scounterexample
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     (GHC.Show.$fShowInteger_$cshowList
                                        is'
                                        (GHC.Types.[] @ GHC.Types.Char))
                                     (case res of wild3 {
                                        GHC.Types.False
                                        -> GHC.Base.++
                                             @ GHC.Types.Char
                                             Test.QuickCheck.Property.=/=1
                                             (GHC.Show.$fShowInteger_$cshowList
                                                y2
                                                (GHC.Types.[] @ GHC.Types.Char))
                                        GHC.Types.True
                                        -> GHC.Base.++
                                             @ GHC.Types.Char
                                             Test.QuickCheck.Property.=/=3
                                             (GHC.Show.$fShowInteger_$cshowList
                                                y2
                                                (GHC.Types.[] @ GHC.Types.Char)) }))
                                  res } } }) -}
c5e5cbc14e9068c9fa2148c3b9fc3733
  $fArbitraryIStackOp8 :: Test.QuickCheck.Property.Property
  {- Strictness: x -}
f3fbb5f690beecb797f93de85e0a6898
  $fArbitraryIStackOp9 ::
    ([GHC.Types.Char],
     [GHC.Integer.Type.Integer]
     -> [GHC.Integer.Type.Integer] -> Test.QuickCheck.Property.Property)
  {- Strictness: m,
     Unfolding: ((Main.$fArbitraryArbSafePrimCode24,
                  Main.$fArbitraryIStackOp10)) -}
ec7218de797c8c01fd7908c10c0487e3
  $fArbitraryIStackOp_$cshrink :: Main.IStackOp -> [Main.IStackOp]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.IStackOp) -> GHC.Types.[] @ Main.IStackOp) -}
72bfab94daace5f080ce3903086c113a
  $fArbitraryIStackOp_ds ::
    Test.QuickCheck.Gen.Gen
      (GHC.Base.String,
       Lib.IStack -> Lib.IStack -> Test.QuickCheck.Property.Property)
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ ([GHC.Types.Char],
                      [GHC.Integer.Type.Integer]
                      -> [GHC.Integer.Type.Integer] -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryIStackOp2) -}
c4b5f963ce2d8a67a438c68f73e3dd3b
  $fArbitraryITE :: Test.QuickCheck.Arbitrary.Arbitrary Main.ITE
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.ITE
                  Main.$fArbitraryITE1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.ITE>_R))
                  Main.$fArbitraryITE_$cshrink -}
c4b5f963ce2d8a67a438c68f73e3dd3b
  $fArbitraryITE1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.ITE
  {- Arity: 2, Strictness: <L,U><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                 (Main.$fArbitraryITE_aux n)
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <Main.ITE>_R)
                   r
                   n) -}
c4b5f963ce2d8a67a438c68f73e3dd3b
  $fArbitraryITE_$cshrink :: Main.ITE -> [Main.ITE]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.ITE) -> GHC.Types.[] @ Main.ITE) -}
c4b5f963ce2d8a67a438c68f73e3dd3b
  $fArbitraryITE_aux ::
    GHC.Types.Int -> Test.QuickCheck.Gen.Gen Main.ITE
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$waux ww1 }) -}
93f4096e6fa204461c55f494f2c6ff27
  $fArbitraryLoop :: Test.QuickCheck.Arbitrary.Arbitrary Main.Loop
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Loop
                  Main.$fArbitraryLoop1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Loop>_R))
                  Main.$fArbitraryLoop_$cshrink -}
93f4096e6fa204461c55f494f2c6ff27
  $fArbitraryLoop1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.Loop
  {- Arity: 2, Strictness: <L,U><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                 (Main.$fArbitraryLoop_aux n)
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <Main.Loop>_R)
                   r
                   n) -}
93f4096e6fa204461c55f494f2c6ff27
  $fArbitraryLoop_$cshrink :: Main.Loop -> [Main.Loop]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.Loop) -> GHC.Types.[] @ Main.Loop) -}
93f4096e6fa204461c55f494f2c6ff27
  $fArbitraryLoop_aux ::
    GHC.Types.Int -> Test.QuickCheck.Gen.Gen Main.Loop
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$waux1 ww1 }) -}
e3d3895d95194df08d7b7cf170f917a6
  $fArbitraryMaxCode ::
    Test.QuickCheck.Arbitrary.Arbitrary Main.MaxCode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.MaxCode
                  Main.$fArbitraryMaxCode1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.MaxCode>_R))
                  Main.$fArbitraryMaxCode_$cshrink -}
e3d3895d95194df08d7b7cf170f917a6
  $fArbitraryMaxCode1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.MaxCode
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m2,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Main.$w$carbitrary4
                        ww1
                        ww2
                        ww3
                        ww4
                        w1 of ww7 { (#,#) ww8 ww9 ->
                 (GHC.Types.: @ GHC.Base.String ww8 ww9)
                   `cast`
                 (Sym (Main.N:MaxCode[0])) } }) -}
50634a44ff1e0a74fd2566f947515c03
  $fArbitraryMaxCode2 :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.words
                   (GHC.CString.unpackCString# Main.$fArbitraryMaxCode3)) -}
d824525479892dcc955c91d0e7fef7f0
  $fArbitraryMaxCode3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: (": max dup rot dup rot > if swap then drop ; max"#) -}
e3d3895d95194df08d7b7cf170f917a6
  $fArbitraryMaxCode_$cshrink :: Main.MaxCode -> [Main.MaxCode]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.MaxCode) -> GHC.Types.[] @ Main.MaxCode) -}
fc70cb0589ab620f4c4c10ab66765fe8
  $fShowArbBooleanIStack :: GHC.Show.Show Main.ArbBooleanIStack
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.ArbBooleanIStack
                  Main.$fShowArbBooleanIStack_$cshowsPrec
                  Main.$fShowArbBooleanIStack_$cshow
                  Main.$fShowArbBooleanIStack_$cshowList -}
fc70cb0589ab620f4c4c10ab66765fe8
  $fShowArbBooleanIStack1 ::
    Main.ArbBooleanIStack -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.ArbBooleanIStack) (s :: GHC.Base.String)[OneShot] ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArbBooleanIStack2
                   (GHC.Base.augment
                      @ GHC.Types.Char
                      (\ @ b
                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b
                         c
                         n
                         (GHC.Show.$fShowInteger_$cshowList
                            x `cast` (Main.N:ArbBooleanIStack[0])
                            (GHC.Types.[] @ GHC.Types.Char)))
                      s)) -}
d36e44912bf17ad8b10699130d5bba0a
  $fShowArbBooleanIStack2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Given IStack (Top at left):\n"#) -}
fc70cb0589ab620f4c4c10ab66765fe8
  $fShowArbBooleanIStack_$cshow ::
    Main.ArbBooleanIStack -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.ArbBooleanIStack) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArbBooleanIStack2
                   (GHC.Show.$fShowInteger_$cshowList
                      ds `cast` (Main.N:ArbBooleanIStack[0])
                      (GHC.Types.[] @ GHC.Types.Char))) -}
fc70cb0589ab620f4c4c10ab66765fe8
  $fShowArbBooleanIStack_$cshowList ::
    [Main.ArbBooleanIStack] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.ArbBooleanIStack]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Main.ArbBooleanIStack
                   Main.$fShowArbBooleanIStack1
                   ls
                   s) -}
fc70cb0589ab620f4c4c10ab66765fe8
  $fShowArbBooleanIStack_$cshowsPrec ::
    GHC.Types.Int -> Main.ArbBooleanIStack -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><L,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Main.ArbBooleanIStack)
                   (s :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArbBooleanIStack2
                   (GHC.Base.augment
                      @ GHC.Types.Char
                      (\ @ b
                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b
                         c
                         n
                         (GHC.Show.$fShowInteger_$cshowList
                            x `cast` (Main.N:ArbBooleanIStack[0])
                            (GHC.Types.[] @ GHC.Types.Char)))
                      s)) -}
672d489e136b38c2a04b42a17c785b57
  $fShowArbIStack :: GHC.Show.Show Main.ArbIStack
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.ArbIStack
                  Main.$fShowArbIStack_$cshowsPrec
                  Main.$fShowArbIStack_$cshow
                  Main.$fShowArbIStack_$cshowList -}
672d489e136b38c2a04b42a17c785b57
  $fShowArbIStack1 ::
    Main.ArbIStack -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.ArbIStack) (s :: GHC.Base.String)[OneShot] ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArbBooleanIStack2
                   (GHC.Base.augment
                      @ GHC.Types.Char
                      (\ @ b
                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b
                         c
                         n
                         (GHC.Show.$fShowInteger_$cshowList
                            x `cast` (Main.N:ArbIStack[0])
                            (GHC.Types.[] @ GHC.Types.Char)))
                      s)) -}
672d489e136b38c2a04b42a17c785b57
  $fShowArbIStack_$cshow :: Main.ArbIStack -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.ArbIStack) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArbBooleanIStack2
                   (GHC.Show.$fShowInteger_$cshowList
                      ds `cast` (Main.N:ArbIStack[0])
                      (GHC.Types.[] @ GHC.Types.Char))) -}
672d489e136b38c2a04b42a17c785b57
  $fShowArbIStack_$cshowList :: [Main.ArbIStack] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.ArbIStack]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.ArbIStack Main.$fShowArbIStack1 ls s) -}
672d489e136b38c2a04b42a17c785b57
  $fShowArbIStack_$cshowsPrec ::
    GHC.Types.Int -> Main.ArbIStack -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><L,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Main.ArbIStack)
                   (s :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArbBooleanIStack2
                   (GHC.Base.augment
                      @ GHC.Types.Char
                      (\ @ b
                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b
                         c
                         n
                         (GHC.Show.$fShowInteger_$cshowList
                            x `cast` (Main.N:ArbIStack[0])
                            (GHC.Types.[] @ GHC.Types.Char)))
                      s)) -}
8be1ce8183cc3c09c9ae19deb3e52269
  $fShowArbSafePrimCode :: GHC.Show.Show Main.ArbSafePrimCode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.ArbSafePrimCode
                  Main.$fShowArbSafePrimCode_$cshowsPrec
                  Main.$fShowArbSafePrimCode_$cshow
                  Main.$fShowArbSafePrimCode_$cshowList -}
8be1ce8183cc3c09c9ae19deb3e52269
  $fShowArbSafePrimCode1 ::
    Main.ArbSafePrimCode -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ (x :: Main.ArbSafePrimCode)
                   (s :: GHC.Base.String)[OneShot] ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArbSafePrimCode3
                   (case x `cast` (Main.N:ArbSafePrimCode[0]) of wild {
                      [] -> GHC.Base.++ @ GHC.Types.Char Main.$fShowArbSafePrimCode2 s
                      : x1 xs
                      -> GHC.Base.++_$s++
                           @ GHC.Types.Char
                           s
                           GHC.Show.showList__3
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.$fShow(,)3
                              (GHC.Show.showLitString
                                 x1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.$fShow(,)3
                                    (Main.$fShowArbSafePrimCode_showl xs)))) })) -}
41db58ec59324560dd1aae42a48a90a8
  $fShowArbSafePrimCode2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   GHC.Show.showList__4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
934ceccabeaac515c154156e862da7d3
  $fShowArbSafePrimCode3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Given code:\n"#) -}
8be1ce8183cc3c09c9ae19deb3e52269
  $fShowArbSafePrimCode_$cshow ::
    Main.ArbSafePrimCode -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (ds :: Main.ArbSafePrimCode) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArbSafePrimCode3
                   (case ds `cast` (Main.N:ArbSafePrimCode[0]) of wild {
                      [] -> Main.$fShowArbSafePrimCode2
                      : x xs
                      -> GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.showList__3
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.$fShow(,)3
                              (GHC.Show.showLitString
                                 x
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.$fShow(,)3
                                    (Main.$fShowArbSafePrimCode_showl xs)))) })) -}
8be1ce8183cc3c09c9ae19deb3e52269
  $fShowArbSafePrimCode_$cshowList ::
    [Main.ArbSafePrimCode] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.ArbSafePrimCode]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Main.ArbSafePrimCode
                   Main.$fShowArbSafePrimCode1
                   ls
                   s) -}
8be1ce8183cc3c09c9ae19deb3e52269
  $fShowArbSafePrimCode_$cshowsPrec ::
    GHC.Types.Int -> Main.ArbSafePrimCode -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><L,1*U><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.ArbSafePrimCode)
                   (w2 :: GHC.Base.String) ->
                 Main.$fShowArbSafePrimCode1 w1 w2) -}
b880b87424f45d4954ceb54e7bd896d0
  $fShowArbSafePrimCode_showl ::
    [[GHC.Types.Char]] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [[GHC.Types.Char]]) ->
                 case Main.$wshowl w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
c04055ff0f14993c6af4f9b54a4e8def
  $fShowArbStructuredITECode ::
    GHC.Show.Show Main.ArbStructuredITECode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.ArbStructuredITECode
                  Main.$fShowArbStructuredITECode_$cshowsPrec
                  Main.$fShowArbStructuredITECode_$cshow
                  Main.$fShowArbStructuredITECode_$cshowList -}
c04055ff0f14993c6af4f9b54a4e8def
  $fShowArbStructuredITECode1 ::
    Main.ArbStructuredITECode -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ (x :: Main.ArbStructuredITECode)
                   (s :: GHC.Base.String)[OneShot] ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArbSafePrimCode3
                   (case x `cast` (Main.N:ArbStructuredITECode[0]) of wild {
                      [] -> GHC.Base.++ @ GHC.Types.Char Main.$fShowArbSafePrimCode2 s
                      : x1 xs
                      -> GHC.Base.++_$s++
                           @ GHC.Types.Char
                           s
                           GHC.Show.showList__3
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.$fShow(,)3
                              (GHC.Show.showLitString
                                 x1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.$fShow(,)3
                                    (Main.$fShowArbStructuredITECode_showl xs)))) })) -}
c04055ff0f14993c6af4f9b54a4e8def
  $fShowArbStructuredITECode_$cshow ::
    Main.ArbStructuredITECode -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (ds :: Main.ArbStructuredITECode) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArbSafePrimCode3
                   (case ds `cast` (Main.N:ArbStructuredITECode[0]) of wild {
                      [] -> Main.$fShowArbSafePrimCode2
                      : x xs
                      -> GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.showList__3
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.$fShow(,)3
                              (GHC.Show.showLitString
                                 x
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.$fShow(,)3
                                    (Main.$fShowArbStructuredITECode_showl xs)))) })) -}
c04055ff0f14993c6af4f9b54a4e8def
  $fShowArbStructuredITECode_$cshowList ::
    [Main.ArbStructuredITECode] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.ArbStructuredITECode]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Main.ArbStructuredITECode
                   Main.$fShowArbStructuredITECode1
                   ls
                   s) -}
c04055ff0f14993c6af4f9b54a4e8def
  $fShowArbStructuredITECode_$cshowsPrec ::
    GHC.Types.Int -> Main.ArbStructuredITECode -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><L,1*U><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.ArbStructuredITECode)
                   (w2 :: GHC.Base.String) ->
                 Main.$fShowArbStructuredITECode1 w1 w2) -}
910b62ecd2e679571966d4af9e629c54
  $fShowArbStructuredITECode_showl ::
    [[GHC.Types.Char]] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [[GHC.Types.Char]]) ->
                 case Main.$wshowl1 w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
dcabe495a3d74831bcd970b2a8964f2b
  $fShowArbStructuredLoopCode ::
    GHC.Show.Show Main.ArbStructuredLoopCode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.ArbStructuredLoopCode
                  Main.$fShowArbStructuredLoopCode_$cshowsPrec
                  Main.$fShowArbStructuredLoopCode_$cshow
                  Main.$fShowArbStructuredLoopCode_$cshowList -}
dcabe495a3d74831bcd970b2a8964f2b
  $fShowArbStructuredLoopCode1 ::
    Main.ArbStructuredLoopCode -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ (x :: Main.ArbStructuredLoopCode)
                   (s :: GHC.Base.String)[OneShot] ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArbSafePrimCode3
                   (case x `cast` (Main.N:ArbStructuredLoopCode[0]) of wild {
                      [] -> GHC.Base.++ @ GHC.Types.Char Main.$fShowArbSafePrimCode2 s
                      : x1 xs
                      -> GHC.Base.++_$s++
                           @ GHC.Types.Char
                           s
                           GHC.Show.showList__3
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.$fShow(,)3
                              (GHC.Show.showLitString
                                 x1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.$fShow(,)3
                                    (Main.$fShowArbStructuredLoopCode_showl xs)))) })) -}
dcabe495a3d74831bcd970b2a8964f2b
  $fShowArbStructuredLoopCode_$cshow ::
    Main.ArbStructuredLoopCode -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (ds :: Main.ArbStructuredLoopCode) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArbSafePrimCode3
                   (case ds `cast` (Main.N:ArbStructuredLoopCode[0]) of wild {
                      [] -> Main.$fShowArbSafePrimCode2
                      : x xs
                      -> GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.showList__3
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.$fShow(,)3
                              (GHC.Show.showLitString
                                 x
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.$fShow(,)3
                                    (Main.$fShowArbStructuredLoopCode_showl xs)))) })) -}
dcabe495a3d74831bcd970b2a8964f2b
  $fShowArbStructuredLoopCode_$cshowList ::
    [Main.ArbStructuredLoopCode] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.ArbStructuredLoopCode]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Main.ArbStructuredLoopCode
                   Main.$fShowArbStructuredLoopCode1
                   ls
                   s) -}
dcabe495a3d74831bcd970b2a8964f2b
  $fShowArbStructuredLoopCode_$cshowsPrec ::
    GHC.Types.Int -> Main.ArbStructuredLoopCode -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><L,1*U><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.ArbStructuredLoopCode)
                   (w2 :: GHC.Base.String) ->
                 Main.$fShowArbStructuredLoopCode1 w1 w2) -}
af36c572275d18906be982082ac7a138
  $fShowArbStructuredLoopCode_showl ::
    [[GHC.Types.Char]] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [[GHC.Types.Char]]) ->
                 case Main.$wshowl2 w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
a60d096b2958af70dad9e9c1a1b6a6d6
  $fShowArithOp :: GHC.Show.Show Main.ArithOp
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.ArithOp
                  Main.$fShowArithOp_$cshowsPrec
                  Main.$fShowArithOp_$cshow
                  Main.$fShowArithOp_$cshowList -}
a60d096b2958af70dad9e9c1a1b6a6d6
  $fShowArithOp1 ::
    Main.ArithOp -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U(1*U,A)><L,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.ArithOp) (w1 :: GHC.Base.String) ->
                 case w `cast` (Main.N:ArithOp[0]) of ww { (,) ww1 ww2 ->
                 Main.$wlvl ww1 w1 }) -}
7d21d3f0d10ec4c1cb22cfc62dbabdc4
  $fShowArithOp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Given operator: "#) -}
a60d096b2958af70dad9e9c1a1b6a6d6
  $fShowArithOp_$cshow :: Main.ArithOp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,A)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.ArithOp) ->
                 case w `cast` (Main.N:ArithOp[0]) of ww { (,) ww1 ww2 ->
                 Main.$w$cshow ww1 }) -}
a60d096b2958af70dad9e9c1a1b6a6d6
  $fShowArithOp_$cshowList :: [Main.ArithOp] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.ArithOp]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.ArithOp Main.$fShowArithOp1 ls s) -}
a60d096b2958af70dad9e9c1a1b6a6d6
  $fShowArithOp_$cshowsPrec ::
    GHC.Types.Int -> Main.ArithOp -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U(1*U,A)><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.ArithOp)
                   (w2 :: GHC.Base.String) ->
                 case w1 `cast` (Main.N:ArithOp[0]) of ww { (,) ww1 ww2 ->
                 Main.$wlvl ww1 w2 }) -}
b42b10fd2a903dccf048c237fb432c28
  $fShowCompOp :: GHC.Show.Show Main.CompOp
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.CompOp
                  Main.$fShowCompOp_$cshowsPrec
                  Main.$fShowCompOp_$cshow
                  Main.$fShowCompOp_$cshowList -}
b42b10fd2a903dccf048c237fb432c28
  $fShowCompOp1 :: Main.CompOp -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U(1*U,A)><L,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.CompOp) (w1 :: GHC.Base.String) ->
                 case w `cast` (Main.N:CompOp[0]) of ww { (,) ww1 ww2 ->
                 Main.$wlvl ww1 w1 }) -}
b42b10fd2a903dccf048c237fb432c28
  $fShowCompOp_$cshow :: Main.CompOp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,A)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.CompOp) ->
                 case w `cast` (Main.N:CompOp[0]) of ww { (,) ww1 ww2 ->
                 Main.$w$cshow ww1 }) -}
b42b10fd2a903dccf048c237fb432c28
  $fShowCompOp_$cshowList :: [Main.CompOp] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.CompOp]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.CompOp Main.$fShowCompOp1 ls s) -}
b42b10fd2a903dccf048c237fb432c28
  $fShowCompOp_$cshowsPrec ::
    GHC.Types.Int -> Main.CompOp -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U(1*U,A)><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.CompOp)
                   (w2 :: GHC.Base.String) ->
                 case w1 `cast` (Main.N:CompOp[0]) of ww { (,) ww1 ww2 ->
                 Main.$wlvl ww1 w2 }) -}
ce47fc30895ad2a451b6c23d7779864c
  $fShowFactorialCode :: GHC.Show.Show Main.FactorialCode
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.FactorialCode
                  Main.$fShowFactorialCode_$cshowsPrec
                  Main.$fShowFactorialCode_$cshow
                  Main.$fShowFactorialCode_$cshowList -}
ce47fc30895ad2a451b6c23d7779864c
  $fShowFactorialCode1 ::
    Main.FactorialCode -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ (x :: Main.FactorialCode)
                   (s :: GHC.Base.String)[OneShot] ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArbSafePrimCode3
                   (case x `cast` (Main.N:FactorialCode[0]) of wild {
                      []
                      -> GHC.Base.++ @ GHC.Types.Char (GHC.Types.[] @ GHC.Types.Char) s
                      : w ws
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           (GHC.Base.++ @ GHC.Types.Char w (Data.OldList.unwords_go ws))
                           s })) -}
ce47fc30895ad2a451b6c23d7779864c
  $fShowFactorialCode_$cshow :: Main.FactorialCode -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U>,
     Unfolding: (\ (ds :: Main.FactorialCode) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArbSafePrimCode3
                   (case ds `cast` (Main.N:FactorialCode[0]) of wild {
                      [] -> GHC.Types.[] @ GHC.Types.Char
                      : w ws
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           w
                           (Data.OldList.unwords_go ws) })) -}
ce47fc30895ad2a451b6c23d7779864c
  $fShowFactorialCode_$cshowList ::
    [Main.FactorialCode] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.FactorialCode]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Main.FactorialCode
                   Main.$fShowFactorialCode1
                   ls
                   s) -}
ce47fc30895ad2a451b6c23d7779864c
  $fShowFactorialCode_$cshowsPrec ::
    GHC.Types.Int -> Main.FactorialCode -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,1*U><L,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.FactorialCode)
                   (w2 :: GHC.Base.String) ->
                 Main.$fShowFactorialCode1 w1 w2) -}
315f45fa6b075417dfe229a20cf513ca
  $fShowGEQ3IStack :: GHC.Show.Show Main.GEQ3IStack
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.GEQ3IStack
                  Main.$fShowGEQ3IStack_$cshowsPrec
                  Main.$fShowGEQ3IStack_$cshow
                  Main.$fShowGEQ3IStack_$cshowList -}
315f45fa6b075417dfe229a20cf513ca
  $fShowGEQ3IStack1 ::
    Main.GEQ3IStack -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.GEQ3IStack) (s :: GHC.Base.String)[OneShot] ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArbBooleanIStack2
                   (GHC.Base.augment
                      @ GHC.Types.Char
                      (\ @ b
                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b
                         c
                         n
                         (GHC.Show.$fShowInteger_$cshowList
                            x `cast` (Main.N:GEQ3IStack[0])
                            (GHC.Types.[] @ GHC.Types.Char)))
                      s)) -}
315f45fa6b075417dfe229a20cf513ca
  $fShowGEQ3IStack_$cshow :: Main.GEQ3IStack -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.GEQ3IStack) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArbBooleanIStack2
                   (GHC.Show.$fShowInteger_$cshowList
                      ds `cast` (Main.N:GEQ3IStack[0])
                      (GHC.Types.[] @ GHC.Types.Char))) -}
315f45fa6b075417dfe229a20cf513ca
  $fShowGEQ3IStack_$cshowList :: [Main.GEQ3IStack] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.GEQ3IStack]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Main.GEQ3IStack
                   Main.$fShowGEQ3IStack1
                   ls
                   s) -}
315f45fa6b075417dfe229a20cf513ca
  $fShowGEQ3IStack_$cshowsPrec ::
    GHC.Types.Int -> Main.GEQ3IStack -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><L,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Main.GEQ3IStack)
                   (s :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArbBooleanIStack2
                   (GHC.Base.augment
                      @ GHC.Types.Char
                      (\ @ b
                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b
                         c
                         n
                         (GHC.Show.$fShowInteger_$cshowList
                            x `cast` (Main.N:GEQ3IStack[0])
                            (GHC.Types.[] @ GHC.Types.Char)))
                      s)) -}
ec7218de797c8c01fd7908c10c0487e3
  $fShowIStackOp :: GHC.Show.Show Main.IStackOp
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.IStackOp
                  Main.$fShowIStackOp_$cshowsPrec
                  Main.$fShowIStackOp_$cshow
                  Main.$fShowIStackOp_$cshowList -}
ec7218de797c8c01fd7908c10c0487e3
  $fShowIStackOp1 ::
    Main.IStackOp -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U(1*U,A)><L,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.IStackOp) (w1 :: GHC.Base.String) ->
                 case w `cast` (Main.N:IStackOp[0]) of ww { (,) ww1 ww2 ->
                 Main.$wlvl ww1 w1 }) -}
ec7218de797c8c01fd7908c10c0487e3
  $fShowIStackOp_$cshow :: Main.IStackOp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,A)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.IStackOp) ->
                 case w `cast` (Main.N:IStackOp[0]) of ww { (,) ww1 ww2 ->
                 Main.$w$cshow ww1 }) -}
ec7218de797c8c01fd7908c10c0487e3
  $fShowIStackOp_$cshowList :: [Main.IStackOp] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.IStackOp]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.IStackOp Main.$fShowIStackOp1 ls s) -}
ec7218de797c8c01fd7908c10c0487e3
  $fShowIStackOp_$cshowsPrec ::
    GHC.Types.Int -> Main.IStackOp -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U(1*U,A)><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.IStackOp)
                   (w2 :: GHC.Base.String) ->
                 case w1 `cast` (Main.N:IStackOp[0]) of ww { (,) ww1 ww2 ->
                 Main.$wlvl ww1 w2 }) -}
e3d3895d95194df08d7b7cf170f917a6
  $fShowMaxCode :: GHC.Show.Show Main.MaxCode
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.MaxCode
                  Main.$fShowMaxCode_$cshowsPrec
                  Main.$fShowMaxCode_$cshow
                  Main.$fShowMaxCode_$cshowList -}
e3d3895d95194df08d7b7cf170f917a6
  $fShowMaxCode1 ::
    Main.MaxCode -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ (x :: Main.MaxCode)
                   (s :: GHC.Base.String)[OneShot] ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArbSafePrimCode3
                   (case x `cast` (Main.N:MaxCode[0]) of wild {
                      []
                      -> GHC.Base.++ @ GHC.Types.Char (GHC.Types.[] @ GHC.Types.Char) s
                      : w ws
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           (GHC.Base.++ @ GHC.Types.Char w (Data.OldList.unwords_go ws))
                           s })) -}
e3d3895d95194df08d7b7cf170f917a6
  $fShowMaxCode_$cshow :: Main.MaxCode -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U>,
     Unfolding: (\ (ds :: Main.MaxCode) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArbSafePrimCode3
                   (case ds `cast` (Main.N:MaxCode[0]) of wild {
                      [] -> GHC.Types.[] @ GHC.Types.Char
                      : w ws
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           w
                           (Data.OldList.unwords_go ws) })) -}
e3d3895d95194df08d7b7cf170f917a6
  $fShowMaxCode_$cshowList :: [Main.MaxCode] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.MaxCode]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.MaxCode Main.$fShowMaxCode1 ls s) -}
e3d3895d95194df08d7b7cf170f917a6
  $fShowMaxCode_$cshowsPrec ::
    GHC.Types.Int -> Main.MaxCode -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,1*U><L,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.MaxCode)
                   (w2 :: GHC.Base.String) ->
                 Main.$fShowMaxCode1 w1 w2) -}
97dc5451956e5c2e257362ba75e3b072
  $s$fTestable->1 ::
    (Main.MaxCode -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w3 :: Main.MaxCode -> Test.QuickCheck.Property.Property)
                   (w4 :: Test.QuickCheck.Random.QCGen)
                   (w5 :: GHC.Types.Int) ->
                 case w4
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.MaxCode
                   @ Test.QuickCheck.Property.Property
                   Main.$fArbitraryMaxCode
                   Main.$fShowMaxCode
                   Test.QuickCheck.Property.$fTestableProperty1
                     `cast`
                   ((<Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                 <Test.QuickCheck.Property.Property>_N))
                   w3
                   ww1
                   ww2
                   ww3
                   ww4
                   w5 }) -}
6a6e39ef49f49d111707b8849b0bbcf4
  $s$fTestable->11 ::
    (Main.ArithOp
     -> Main.GEQ3IStack -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w3 :: Main.ArithOp
                          -> Main.GEQ3IStack -> Test.QuickCheck.Property.Property)
                   (w4 :: Test.QuickCheck.Random.QCGen)
                   (w5 :: GHC.Types.Int) ->
                 case w4
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.ArithOp
                   @ (Main.GEQ3IStack -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryArithOp
                   Main.$fShowArithOp
                   Main.$s$fTestable->12
                     `cast`
                   ((<Main.GEQ3IStack -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.GEQ3IStack
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w3
                   ww1
                   ww2
                   ww3
                   ww4
                   w5 }) -}
486001c552f6e0c1c35db6a523670200
  $s$fTestable->12 ::
    (Main.GEQ3IStack -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.GEQ3IStack -> Test.QuickCheck.Property.Property)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable w ww1 ww2 ww3 ww4 w2 }) -}
32437a282ec8136864026531d5f91031
  $s$fTestable->14 ::
    (Main.IStackOp
     -> Main.GEQ3IStack -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w3 :: Main.IStackOp
                          -> Main.GEQ3IStack -> Test.QuickCheck.Property.Property)
                   (w4 :: Test.QuickCheck.Random.QCGen)
                   (w5 :: GHC.Types.Int) ->
                 case w4
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.IStackOp
                   @ (Main.GEQ3IStack -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryIStackOp
                   Main.$fShowIStackOp
                   Main.$s$fTestable->12
                     `cast`
                   ((<Main.GEQ3IStack -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.GEQ3IStack
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w3
                   ww1
                   ww2
                   ww3
                   ww4
                   w5 }) -}
e45d89af646adbe95f0e7c5368579f9a
  $s$fTestable->15 ::
    (Main.CompOp
     -> Main.ArbIStack -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w3 :: Main.CompOp
                          -> Main.ArbIStack -> Test.QuickCheck.Property.Property)
                   (w4 :: Test.QuickCheck.Random.QCGen)
                   (w5 :: GHC.Types.Int) ->
                 case w4
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.CompOp
                   @ (Main.ArbIStack -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryCompOp
                   Main.$fShowCompOp
                   Main.$s$fTestable->16
                     `cast`
                   ((<Main.ArbIStack -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.ArbIStack
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w3
                   ww1
                   ww2
                   ww3
                   ww4
                   w5 }) -}
0269ba7427db3b31c9bdb99d8c444bc0
  $s$fTestable->16 ::
    (Main.ArbIStack -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.ArbIStack -> Test.QuickCheck.Property.Property)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable1 w ww1 ww2 ww3 ww4 w2 }) -}
326eca03b9d53c9fbdcea18aabe756bc
  $s$fTestable->17 ::
    (Main.CompOp
     -> Main.GEQ3IStack -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w3 :: Main.CompOp
                          -> Main.GEQ3IStack -> Test.QuickCheck.Property.Property)
                   (w4 :: Test.QuickCheck.Random.QCGen)
                   (w5 :: GHC.Types.Int) ->
                 case w4
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.CompOp
                   @ (Main.GEQ3IStack -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryCompOp
                   Main.$fShowCompOp
                   Main.$s$fTestable->12
                     `cast`
                   ((<Main.GEQ3IStack -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.GEQ3IStack
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w3
                   ww1
                   ww2
                   ww3
                   ww4
                   w5 }) -}
8a77ba8045b57b2259b6f7da0733765a
  $s$fTestable->2 ::
    (Main.FactorialCode -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w3 :: Main.FactorialCode -> Test.QuickCheck.Property.Property)
                   (w4 :: Test.QuickCheck.Random.QCGen)
                   (w5 :: GHC.Types.Int) ->
                 case w4
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.FactorialCode
                   @ Test.QuickCheck.Property.Property
                   Main.$fArbitraryFactorialCode
                   Main.$fShowFactorialCode
                   Test.QuickCheck.Property.$fTestableProperty1
                     `cast`
                   ((<Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                 <Test.QuickCheck.Property.Property>_N))
                   w3
                   ww1
                   ww2
                   ww3
                   ww4
                   w5 }) -}
99bf6ab453e3f82f0f27b196e6679751
  $s$fTestable->3 ::
    (Main.ArbStructuredLoopCode -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w3 :: Main.ArbStructuredLoopCode
                          -> Test.QuickCheck.Property.Property)
                   (w4 :: Test.QuickCheck.Random.QCGen)
                   (w5 :: GHC.Types.Int) ->
                 case w4
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.ArbStructuredLoopCode
                   @ Test.QuickCheck.Property.Property
                   Main.$fArbitraryArbStructuredLoopCode
                   Main.$fShowArbStructuredLoopCode
                   Test.QuickCheck.Property.$fTestableProperty1
                     `cast`
                   ((<Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                 <Test.QuickCheck.Property.Property>_N))
                   w3
                   ww1
                   ww2
                   ww3
                   ww4
                   w5 }) -}
65262626350ae6bc81abe639162f14cf
  $s$fTestable->4 ::
    (Main.ArbStructuredITECode -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w3 :: Main.ArbStructuredITECode
                          -> Test.QuickCheck.Property.Property)
                   (w4 :: Test.QuickCheck.Random.QCGen)
                   (w5 :: GHC.Types.Int) ->
                 case w4
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.ArbStructuredITECode
                   @ Test.QuickCheck.Property.Property
                   Main.$fArbitraryArbStructuredITECode
                   Main.$fShowArbStructuredITECode
                   Test.QuickCheck.Property.$fTestableProperty1
                     `cast`
                   ((<Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                 <Test.QuickCheck.Property.Property>_N))
                   w3
                   ww1
                   ww2
                   ww3
                   ww4
                   w5 }) -}
07ad93adc83fa44a1b2e21f106091f99
  $tc'ArbBooleanIStack :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5948556229053367631##
                   13275965818113882211##
                   Main.$trModule
                   Main.$tc'ArbBooleanIStack2
                   0#
                   Main.$tc'ArbBooleanIStack1) -}
d53f1d2cfd92ed3c714a90467cb33dc3
  $tc'ArbBooleanIStack1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fd1afdefb36eaa57d36b3abbc307023a
  $tc'ArbBooleanIStack2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'ArbBooleanIStack3) -}
5aac8fdad63f6b10ae1870d97da1401e
  $tc'ArbBooleanIStack3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ArbBooleanIStack"#) -}
572ef36de16bfe168b1ab00b6671f692
  $tc'ArbIStack :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9619839069399404038##
                   9146644008070551276##
                   Main.$trModule
                   Main.$tc'ArbIStack2
                   0#
                   Main.$tc'ArbIStack1) -}
cdac95d2c50f1c6af3cac8a5c3fa1e05
  $tc'ArbIStack1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3623103f76aec7a86b0f4d17346b7854
  $tc'ArbIStack2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'ArbIStack3) -}
4a8c9f764201448e3e35da42b8f9f5d6
  $tc'ArbIStack3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ArbIStack"#) -}
b081c8c7152f954e018d661cb6dc9485
  $tc'ArbSafePrimCode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10816730382907260682##
                   10376677852222308011##
                   Main.$trModule
                   Main.$tc'ArbSafePrimCode2
                   0#
                   Main.$tc'ArbSafePrimCode1) -}
b375ab9c4eb6b9d6736533d60f64d51c
  $tc'ArbSafePrimCode1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4be2b2723f4075677873e437d84dba87
  $tc'ArbSafePrimCode2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'ArbSafePrimCode3) -}
e407a683e41af44681638b1186b0fe79
  $tc'ArbSafePrimCode3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ArbSafePrimCode"#) -}
a65cc59e1955b45cd32e2ae134da6f15
  $tc'ArbStructuredITECode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7105387774055311856##
                   16787096920152786627##
                   Main.$trModule
                   Main.$tc'ArbStructuredITECode2
                   0#
                   Main.$tc'ArbStructuredITECode1) -}
77ec8865bbd3fef59411f61fea8e5279
  $tc'ArbStructuredITECode1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e9411d0ac25c24ffd24cd0054626dc99
  $tc'ArbStructuredITECode2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'ArbStructuredITECode3) -}
5ae8257e326da3225fe8cda8d16e9cfd
  $tc'ArbStructuredITECode3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ArbStructuredITECode"#) -}
79eb479d140bc9089e180129c671ed57
  $tc'ArbStructuredLoopCode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15052453646238671930##
                   15581432760593864586##
                   Main.$trModule
                   Main.$tc'ArbStructuredLoopCode2
                   0#
                   Main.$tc'ArbStructuredLoopCode1) -}
316af29d4ad49d3b9bf3ea06a191e5d4
  $tc'ArbStructuredLoopCode1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7930f019271a16c9b23a7a848ac7c036
  $tc'ArbStructuredLoopCode2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'ArbStructuredLoopCode3) -}
68a6186ca3ce6b3d6e527914afe04c72
  $tc'ArbStructuredLoopCode3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ArbStructuredLoopCode"#) -}
f5ed2a9423cc6bf700ee2610f5fbbb4a
  $tc'ArithOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15322673163859019275##
                   4573879255763193281##
                   Main.$trModule
                   Main.$tc'ArithOp2
                   0#
                   Main.$tc'ArithOp1) -}
92c31157583dd1c3bcec87abe687c93e
  $tc'ArithOp1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
49cee0cf1c0b4564dfa3922826a682c1
  $tc'ArithOp2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'ArithOp3) -}
fc3ede2c18c060b69e15b4ad6d7bff6d
  $tc'ArithOp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ArithOp"#) -}
329c0957402114a21b887209527d2209
  $tc'CompOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12850500421457383385##
                   1057085658893932870##
                   Main.$trModule
                   Main.$tc'CompOp2
                   0#
                   Main.$tc'CompOp1) -}
d713ca1a13a5fcaa3a36ac1876df5d64
  $tc'CompOp1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
33327eeacc76464fef038918552031e1
  $tc'CompOp2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'CompOp3) -}
f0f37762e3c4ced8e15444cae6ef5ce6
  $tc'CompOp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompOp"#) -}
0574c30b668c057fd2b6546b7ea2a3c8
  $tc'FactorialCode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12849306055719705226##
                   10659693017368670563##
                   Main.$trModule
                   Main.$tc'FactorialCode2
                   0#
                   Main.$tc'FactorialCode1) -}
db265738087035314bf8368318bd0251
  $tc'FactorialCode1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
955f9069014d1288de74a67a88a6de8f
  $tc'FactorialCode2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'FactorialCode3) -}
b13dbeb7ecb4360a43793dc86df2f20e
  $tc'FactorialCode3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FactorialCode"#) -}
2c10e8cd32c5eb23e76c666988d5d2ee
  $tc'GEQ3IStack :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12970807187592597608##
                   5453696094397053702##
                   Main.$trModule
                   Main.$tc'GEQ3IStack2
                   0#
                   Main.$tc'GEQ3IStack1) -}
b5ce23d104820f0eb9f9172636f70a62
  $tc'GEQ3IStack1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d660831216281c379d1592fd5bf8fc8b
  $tc'GEQ3IStack2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'GEQ3IStack3) -}
249a8dc14457ce396f524c5a2e64271a
  $tc'GEQ3IStack3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'GEQ3IStack"#) -}
af1f4c95fc66cce6f172e6eec1e51454
  $tc'IStackOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11515265220441217090##
                   13053500868547461557##
                   Main.$trModule
                   Main.$tc'IStackOp2
                   0#
                   Main.$tc'IStackOp1) -}
eaeedf99b77fc4722674847c470a2d86
  $tc'IStackOp1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d444989faac7d13707490d8fef9aaf54
  $tc'IStackOp2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'IStackOp3) -}
d5bb319e09a49decbc8129857ec1c3bf
  $tc'IStackOp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IStackOp"#) -}
5b200f45a4dfa9f68d1039163aefb236
  $tc'IfElseThen :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15796086607740908922##
                   1501169099148216786##
                   Main.$trModule
                   Main.$tc'IfElseThen2
                   0#
                   Main.$tc'IfElseThen1) -}
8b8da79cf95cda48429e7fc3001e3873
  $tc'IfElseThen1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
152efba01368357e67439c6b40a9d530
  $tc'IfElseThen2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'IfElseThen3) -}
9b07706f2c397b8690b40040c0184327
  $tc'IfElseThen3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IfElseThen"#) -}
fab11fd058b46ecf75215d4c39135623
  $tc'IfThen :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2348547009054473379##
                   16866311388371721597##
                   Main.$trModule
                   Main.$tc'IfThen2
                   0#
                   Main.$tc'IfThen1) -}
c1740cb5287af0c577d0b2dc444238b4
  $tc'IfThen1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f17b5bcf4bd555020d39dbb619b10434
  $tc'IfThen2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'IfThen3) -}
06b68245289e88a1eec7b5da71af3beb
  $tc'IfThen3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IfThen"#) -}
88d7bd4a8974acd3e243e6739cd9bbf8
  $tc'LoopBegin :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6801365148663064824##
                   16619951828107813576##
                   Main.$trModule
                   Main.$tc'LoopBegin2
                   0#
                   Main.$tc'LoopBegin1) -}
0397d2c48160fc193dd1942b31ce3ab2
  $tc'LoopBegin1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b3f772d5d82ed9877649ee699b3c8b18
  $tc'LoopBegin2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'LoopBegin3) -}
4558701722f9def2c70c1cd99d23648d
  $tc'LoopBegin3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoopBegin"#) -}
4fddd2bdf8be8bdb5b0d859a51ea0449
  $tc'LoopNil :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1158591015939431807##
                   5502787599437022018##
                   Main.$trModule
                   Main.$tc'LoopNil2
                   0#
                   Main.$tc'LoopNil1) -}
dc224a6356e083f0bd2dc76be9a0c4f9
  $tc'LoopNil1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
c93135e2de19a825e76ab956330fa95b
  $tc'LoopNil2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'LoopNil3) -}
d1bd9224e66d0e6a88864fd6c8278098
  $tc'LoopNil3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoopNil"#) -}
544359907ef02b48bb47bde42109aece
  $tc'LoopSeq :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6811891964672661741##
                   3642826341936964370##
                   Main.$trModule
                   Main.$tc'LoopSeq2
                   0#
                   Main.$tc'LoopSeq1) -}
369737b266e89eb235f85b3079d63ab7
  $tc'LoopSeq1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0a8cf6b8e351e13fde215ca57d8f2589
  $tc'LoopSeq2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'LoopSeq3) -}
357ab4e67ad4ac53468761913385f16e
  $tc'LoopSeq3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoopSeq"#) -}
6b7bfcfa37a6dd27543fe33234caf5d2
  $tc'MaxCode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11015327599544416308##
                   218095112527972376##
                   Main.$trModule
                   Main.$tc'MaxCode2
                   0#
                   Main.$tc'MaxCode1) -}
e96cc8392962c2c8a44220643835f756
  $tc'MaxCode1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a7e6292bfacd9a9275d7d7acc9b9380f
  $tc'MaxCode2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'MaxCode3) -}
940b174fdd662ca5bc85f137e1e9c152
  $tc'MaxCode3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MaxCode"#) -}
c43a1c9cf2156b4343e591509096ca93
  $tc'Nil :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15703065417820164806##
                   7212711407268931041##
                   Main.$trModule
                   Main.$tc'Nil2
                   0#
                   Main.$tc'Nil1) -}
ad8ac3879c43dba7a4c87db7f9f6ef89
  $tc'Nil1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
0603d200760f44c0f08aaff39a2f26a9
  $tc'Nil2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Nil3) -}
3256d273fceed9507ec949f18d68f876
  $tc'Nil3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Nil"#) -}
b74a4d706e4a98bd8cd8cc18747bb2f8
  $tc'Seq :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9738177768049313805##
                   2803706507939841857##
                   Main.$trModule
                   Main.$tc'Seq1
                   0#
                   Main.$tc'IfElseThen1) -}
2953ab19d47975ca184987bc5e63b74b
  $tc'Seq1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Seq2) -}
035745e333830a7b8b1fcfbe976771ad
  $tc'Seq2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Seq"#) -}
b0d18bfec5d2681897594ad6dc7ee7a6
  $tcArbBooleanIStack :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16421264637492864967##
                   13812483275508158231##
                   Main.$trModule
                   Main.$tcArbBooleanIStack1
                   0#
                   GHC.Types.krep$*) -}
917bb391d0189de8ff86f253202c8f43
  $tcArbBooleanIStack1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcArbBooleanIStack2) -}
90e17064df80eeafb0e925d908806a35
  $tcArbBooleanIStack2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ArbBooleanIStack"#) -}
46a68b7f27658d19a39b2f22ae386f85
  $tcArbIStack :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5721230165968405949##
                   14728259191388843804##
                   Main.$trModule
                   Main.$tcArbIStack1
                   0#
                   GHC.Types.krep$*) -}
4a05258ac4e39fdef2ca528493ed79a7
  $tcArbIStack1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcArbIStack2) -}
6462f3ea521ae232e65d68d9d6333b44
  $tcArbIStack2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ArbIStack"#) -}
d7ab90a22b4c39cdace4feb256bcbebe
  $tcArbSafePrimCode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7239717828274537322##
                   13201987080414310721##
                   Main.$trModule
                   Main.$tcArbSafePrimCode1
                   0#
                   GHC.Types.krep$*) -}
c6d49a420badad191b42e70c587fde08
  $tcArbSafePrimCode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcArbSafePrimCode2) -}
7addf9da4fc4b73395b912c512d84841
  $tcArbSafePrimCode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ArbSafePrimCode"#) -}
f883e993132626e5b61e1c67c5dc1f96
  $tcArbStructuredITECode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1136021957098408445##
                   3022156140203681761##
                   Main.$trModule
                   Main.$tcArbStructuredITECode1
                   0#
                   GHC.Types.krep$*) -}
e4ff9d227042225b756e7d932d7100e2
  $tcArbStructuredITECode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcArbStructuredITECode2) -}
ac38f6d8623d2997ee4b9599230851e5
  $tcArbStructuredITECode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ArbStructuredITECode"#) -}
97b49a6ece78fa80cdfab60f025bb5e0
  $tcArbStructuredLoopCode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   934707771866035666##
                   5895376638084135352##
                   Main.$trModule
                   Main.$tcArbStructuredLoopCode1
                   0#
                   GHC.Types.krep$*) -}
c702bf42141ed6117bfa980373e1441b
  $tcArbStructuredLoopCode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcArbStructuredLoopCode2) -}
b755fe2c5da847fa3b1d93b25d623c75
  $tcArbStructuredLoopCode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ArbStructuredLoopCode"#) -}
48cc7bf0f81012e13f59560aa8a858b1
  $tcArithOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2797347631674305225##
                   223678597166086227##
                   Main.$trModule
                   Main.$tcArithOp1
                   0#
                   GHC.Types.krep$*) -}
3bd35a9aec296abe36448978cb6d93dc
  $tcArithOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcArithOp2) -}
65fd3f38e922307375870e9e5a4c8a9f
  $tcArithOp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ArithOp"#) -}
3c05d246b36ce93a9c0fcb62c56d111d
  $tcCompOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16247001870809097048##
                   3404398879828663353##
                   Main.$trModule
                   Main.$tcCompOp1
                   0#
                   GHC.Types.krep$*) -}
6261bd15e024cfbcab23bf9dc27d6646
  $tcCompOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcCompOp2) -}
2f1105a488496c2b3f5ea1feea781784
  $tcCompOp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompOp"#) -}
18f583d6636e3afc8ef69770c493b8f1
  $tcFactorialCode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5396160874158132325##
                   18120423759248511563##
                   Main.$trModule
                   Main.$tcFactorialCode1
                   0#
                   GHC.Types.krep$*) -}
10391e7ac46250123bb473230ec5c28c
  $tcFactorialCode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcFactorialCode2) -}
dbfc43862fb86cc9b9b74313b3d43246
  $tcFactorialCode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FactorialCode"#) -}
4e0baa82fd5b322951a149588c9b8783
  $tcGEQ3IStack :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3284146992690176036##
                   9929297995653475197##
                   Main.$trModule
                   Main.$tcGEQ3IStack1
                   0#
                   GHC.Types.krep$*) -}
19d9856d4d73d42e02cc8b477d2f3a35
  $tcGEQ3IStack1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcGEQ3IStack2) -}
f1a427e724c87487e3cc14f262ed4fad
  $tcGEQ3IStack2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GEQ3IStack"#) -}
cf9e480e60d0eea6b43e36f2b0b7aa31
  $tcIStackOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1486118770729475686##
                   12840193156165991582##
                   Main.$trModule
                   Main.$tcIStackOp1
                   0#
                   GHC.Types.krep$*) -}
04bf84286eb22df57ef74761cf54d079
  $tcIStackOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcIStackOp2) -}
2e90ec4c6bb4dffc210e11cfab52f86e
  $tcIStackOp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IStackOp"#) -}
f58e71e5bca8f6948d5d1910c1d19091
  $tcITE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8248500382578900582##
                   16453644955276828683##
                   Main.$trModule
                   Main.$tcITE1
                   0#
                   GHC.Types.krep$*) -}
6b2f845b9a0d825270271b95f69d3469
  $tcITE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcITE2) -}
f957a81bb9d6586a8a6b12a6a4cd2686
  $tcITE2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ITE"#) -}
9afda23615aec739f42671ce6d3bcaaf
  $tcLoop :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   971021315732555934##
                   4083505938184788277##
                   Main.$trModule
                   Main.$tcLoop1
                   0#
                   GHC.Types.krep$*) -}
9bb4e3d078adcaeb8337e3ef2bfac53c
  $tcLoop1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcLoop2) -}
b7c0244d309fbdb1ae955730c71bc36b
  $tcLoop2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Loop"#) -}
28d0f983a7d44d5cf3adeebeba4939bc
  $tcMaxCode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7072522872637056280##
                   1583511618269320717##
                   Main.$trModule
                   Main.$tcMaxCode1
                   0#
                   GHC.Types.krep$*) -}
515abfabdfc6b9b845a54806f5b18e7c
  $tcMaxCode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcMaxCode2) -}
e306afb9f4b0f6efae6995fa08eac1d9
  $tcMaxCode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MaxCode"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
8be1ce8183cc3c09c9ae19deb3e52269
  $w$carbitrary ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Main.ArbSafePrimCode
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww5 { System.Random.TF.Gen.TFGen ww6 ww10 ww11 ww12 ww13 ww14 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww6
                        ww10
                        ww11
                        ww12 of ww15 { (#,#) ww16 ww17 ->
                 let {
                   wild1 :: GHC.Types.Int = GHC.Types.I# ww4
                 } in
                 (GHC.Base.++
                    @ [GHC.Types.Char]
                    (Test.QuickCheck.Gen.$s$wreplicateM1
                       @ GHC.Base.String
                       (GHC.Prim.*# 3# ww4)
                       Main.$fArbitraryArbSafePrimCode48
                       ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                       wild1)
                    (Test.QuickCheck.Gen.$s$wreplicateM1
                       @ [GHC.Types.Char]
                       ww4
                       Main.$fArbitraryArbSafePrimCode2
                       ww16 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                       wild1))
                   `cast`
                 (Nth:3
                      (Nth:3
                           (<Test.QuickCheck.Random.QCGen>_R
                            ->_R <GHC.Types.Int>_R
                            ->_R Sym (Main.N:ArbSafePrimCode[0])))) } } }) -}
c04055ff0f14993c6af4f9b54a4e8def
  $w$carbitrary1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Main.ArbStructuredITECode
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 (Main.$fArbitraryArbStructuredITECode_aux
                    ((Main.$waux ww4)
                       `cast`
                     (Test.QuickCheck.Gen.N:Gen[0] <Main.ITE>_R)
                       ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                       (GHC.Types.I# ww4)))
                   `cast`
                 (Nth:3
                      (Nth:3
                           (<Test.QuickCheck.Random.QCGen>_R
                            ->_R <GHC.Types.Int>_R
                            ->_R Sym (Main.N:ArbStructuredITECode[0])))) }) -}
dcabe495a3d74831bcd970b2a8964f2b
  $w$carbitrary2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Main.ArbStructuredLoopCode
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 (Main.$fArbitraryArbStructuredLoopCode_aux
                    ((Main.$waux1 ww4)
                       `cast`
                     (Test.QuickCheck.Gen.N:Gen[0] <Main.Loop>_R)
                       ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                       (GHC.Types.I# ww4)))
                   `cast`
                 (Nth:3
                      (Nth:3
                           (<Test.QuickCheck.Random.QCGen>_R
                            ->_R <GHC.Types.Int>_R
                            ->_R Sym (Main.N:ArbStructuredLoopCode[0])))) }) -}
28c3fec573e4c2b2004f87351cb41482
  $w$carbitrary3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [GHC.Integer.Type.Integer]
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 Test.QuickCheck.Gen.$wsuchThat
                   @ [GHC.Integer.Type.Integer]
                   Main.$fArbitraryArbIStack_$s$fArbitrarySet2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Integer.Type.Integer]>_R))
                   Main.$fArbitraryGEQ3IStack2
                   ww
                   ww1
                   ww2
                   ww3
                   ww4) -}
5e3b4a3442df65a58b860522241ddb97
  $w$carbitrary4 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# GHC.Base.String, [GHC.Base.String] #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# case ww15 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                    case w of ww24 { GHC.Types.I# ww25 ->
                    case Test.QuickCheck.Arbitrary.$w$sarbitrarySizedIntegral
                           ww18
                           ww19
                           ww20
                           ww21
                           ww25 of ww26 { DEFAULT ->
                    case GHC.Show.$wshowSignedInt
                           0#
                           ww26
                           (GHC.Types.[] @ GHC.Types.Char) of ww27 { (#,#) ww28 ww29 ->
                    GHC.Types.: @ GHC.Types.Char ww28 ww29 } } } },
                    GHC.Types.:
                      @ GHC.Base.String
                      (case ww8 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                       case w of ww24 { GHC.Types.I# ww25 ->
                       case Test.QuickCheck.Arbitrary.$w$sarbitrarySizedIntegral
                              ww18
                              ww19
                              ww20
                              ww21
                              ww25 of ww26 { DEFAULT ->
                       case GHC.Show.$wshowSignedInt
                              0#
                              ww26
                              (GHC.Types.[] @ GHC.Types.Char) of ww27 { (#,#) ww28 ww29 ->
                       GHC.Types.: @ GHC.Types.Char ww28 ww29 } } } })
                      Main.$fArbitraryMaxCode2 #) } } }) -}
540a34675101035aa06d982f15283efb
  $w$cshow :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArithOp2
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.$fShow(,)3
                      (GHC.Show.showLitString ww GHC.Show.$fShow[]1))) -}
cbe75c9c307f3fff820ba1a75b35550a
  $w$dTestable ::
    (Main.GEQ3IStack -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w :: Main.GEQ3IStack
                         -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.GEQ3IStack
                   @ Test.QuickCheck.Property.Property
                   Main.$fArbitraryGEQ3IStack
                   Main.$fShowGEQ3IStack
                   Test.QuickCheck.Property.$fTestableProperty1
                     `cast`
                   ((<Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                 <Test.QuickCheck.Property.Property>_N))
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
cdfe26f88cffe8d12071dedfa8223120
  $w$dTestable1 ::
    (Main.ArbIStack -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w :: Main.ArbIStack
                         -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.ArbIStack
                   @ Test.QuickCheck.Property.Property
                   Main.$fArbitraryArbIStack
                   Main.$fShowArbIStack
                   Test.QuickCheck.Property.$fTestableProperty1
                     `cast`
                   ((<Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                 <Test.QuickCheck.Property.Property>_N))
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
022244a98414356dafc61a457d7b2257
  $w$dTestable2 ::
    (Main.ArbSafePrimCode -> Test.QuickCheck.Property.Property)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w :: Main.ArbSafePrimCode
                         -> Test.QuickCheck.Property.Property)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.ArbSafePrimCode
                   @ Test.QuickCheck.Property.Property
                   Main.$fArbitraryArbSafePrimCode
                   Main.$fShowArbSafePrimCode
                   Test.QuickCheck.Property.$fTestableProperty1
                     `cast`
                   ((<Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                 <Test.QuickCheck.Property.Property>_N))
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
c4b5f963ce2d8a67a438c68f73e3dd3b
  $waux :: GHC.Prim.Int# -> Test.QuickCheck.Gen.Gen Main.ITE
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2] -}
93f4096e6fa204461c55f494f2c6ff27
  $waux1 :: GHC.Prim.Int# -> Test.QuickCheck.Gen.Gen Main.Loop
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2] -}
7a39dd8fd7b41ae66896fdf4da152717
  $wlvl :: GHC.Base.String -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,1*U><L,1*U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Base.String) (w :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowArithOp2
                   (GHC.Base.++_$s++
                      @ GHC.Types.Char
                      w
                      GHC.Show.$fShow(,)3
                      (GHC.Show.showLitString ww GHC.Show.$fShow[]1))) -}
766b09138c0c6cc794cdee58339cadeb
  $wshowl ::
    [[GHC.Types.Char]] -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2] -}
1cb442410917b26f6b5ad0b9b5555fbd
  $wshowl1 ::
    [[GHC.Types.Char]] -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2] -}
421768a5cc93cb3a55df37704ff1e628
  $wshowl2 ::
    [[GHC.Types.Char]] -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2] -}
fc70cb0589ab620f4c4c10ab66765fe8
  newtype ArbBooleanIStack = ArbBooleanIStack Lib.IStack
672d489e136b38c2a04b42a17c785b57
  newtype ArbIStack = ArbIStack Lib.IStack
8be1ce8183cc3c09c9ae19deb3e52269
  newtype ArbSafePrimCode = ArbSafePrimCode [GHC.Base.String]
c04055ff0f14993c6af4f9b54a4e8def
  newtype ArbStructuredITECode
    = ArbStructuredITECode [GHC.Base.String]
dcabe495a3d74831bcd970b2a8964f2b
  newtype ArbStructuredLoopCode
    = ArbStructuredLoopCode [GHC.Base.String]
a60d096b2958af70dad9e9c1a1b6a6d6
  newtype ArithOp
    = ArithOp (GHC.Base.String,
               GHC.Integer.Type.Integer
               -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)
b42b10fd2a903dccf048c237fb432c28
  newtype CompOp
    = CompOp (GHC.Base.String,
              GHC.Integer.Type.Integer
              -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
ce47fc30895ad2a451b6c23d7779864c
  newtype FactorialCode = FactorialCode [GHC.Base.String]
315f45fa6b075417dfe229a20cf513ca
  newtype GEQ3IStack = GEQ3IStack Lib.IStack
ec7218de797c8c01fd7908c10c0487e3
  newtype IStackOp
    = IStackOp (GHC.Base.String,
                Lib.IStack -> Lib.IStack -> Test.QuickCheck.Property.Property)
c4b5f963ce2d8a67a438c68f73e3dd3b
  data ITE
    = Nil
    | IfElseThen Main.ITE Main.ITE
    | IfThen Main.ITE
    | Seq Main.ITE Main.ITE
93f4096e6fa204461c55f494f2c6ff27
  data Loop
    = LoopNil | LoopBegin Main.Loop | LoopSeq Main.Loop Main.Loop
e3d3895d95194df08d7b7cf170f917a6
  newtype MaxCode = MaxCode [GHC.Base.String]
491bff3d3b3b8228e0c5865f202d4e8b
  emptyForthState :: Lib.ForthState
  {- Strictness: m,
     Unfolding: ((GHC.Types.[] @ GHC.Integer.Type.Integer,
                  Lib.initialDictionary, GHC.Types.[] @ GHC.Base.String)) -}
9dd7b8eac2982aca6552359eb1ada843
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
e0585263533c908d424804e79483a009
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds2 { (#,#) ipv ipv1 ->
                 case Test.Framework.Runners.Console.defaultMain4
                        ipv1
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case ipv3 of ww { Test.Framework.Runners.Options.RunnerOptions ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Test.Framework.Runners.Console.$wdefaultMainWithOpts
                   Main.main2
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ipv2 } } }) -}
8d00161e3896f7a6536a70f81a41f5ab
  main10 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.main21
                   Main.main11) -}
29814a92355df8f2d0f35d260f92ed27
  main100 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Main.ArbIStack -> Test.QuickCheck.Property.Property)
                   Main.$s$fTestable->16
                     `cast`
                   ((<Main.ArbIStack -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.ArbIStack
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.main101) -}
5d0cd3db53ec66deeba4fb6c7a85c19d
  main101 :: Main.ArbIStack -> Test.QuickCheck.Property.Property
  {- Arity: 1, Strictness: <S,U> -}
7e5b07c7b8cdc89a90a3415adfbb6f25
  main102 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main103) -}
1d45eaafef5b22dd9bc8a16b8e2fad75
  main103 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=P= IStack Manipulations `rot`"#) -}
41d686b1cb5bf94de0867d3222d49856
  main104 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.main111
                   Main.main105) -}
16fd725c034edbde6c4a3d23cadd92c9
  main105 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Main.ArbIStack -> Test.QuickCheck.Property.Property)
                   Main.$s$fTestable->16
                     `cast`
                   ((<Main.ArbIStack -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.ArbIStack
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.main106) -}
b42283833377a446804f5666631bfb3d
  main106 :: Main.ArbIStack -> Test.QuickCheck.Property.Property
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Main.ArbIStack) ->
                 case ds `cast` (Main.N:ArbIStack[0]) of wild {
                   [] -> Main.main107
                   : ds1 rest
                   -> Test.QuickCheck.Property.counterexample
                        @ Test.QuickCheck.Property.Property
                        Test.QuickCheck.Property.$fTestableProperty1
                          `cast`
                        ((<Test.QuickCheck.Property.Property>_R
                          ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                        <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                      <Test.QuickCheck.Property.Property>_N))
                        Main.main17
                        (let {
                           res :: GHC.Types.Bool
                           = GHC.Classes.$fEq[]_$c==
                               @ GHC.Integer.Type.Integer
                               GHC.Integer.Type.$fEqInteger
                               rest
                               rest
                         } in
                         Test.QuickCheck.Property.counterexample_$scounterexample
                           (GHC.Base.++
                              @ GHC.Types.Char
                              GHC.Show.$fShowMaybe1
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Show.$fShowInteger_$cshowList
                                    rest
                                    (GHC.Types.[] @ GHC.Types.Char))
                                 (case res of wild1 {
                                    GHC.Types.False
                                    -> GHC.Base.++
                                         @ GHC.Types.Char
                                         Test.QuickCheck.Property.=/=1
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            GHC.Show.$fShowMaybe1
                                            (GHC.Show.$fShowInteger_$cshowList
                                               rest
                                               (GHC.Types.[] @ GHC.Types.Char)))
                                    GHC.Types.True
                                    -> GHC.Base.++
                                         @ GHC.Types.Char
                                         Test.QuickCheck.Property.=/=3
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            GHC.Show.$fShowMaybe1
                                            (GHC.Show.$fShowInteger_$cshowList
                                               rest
                                               (GHC.Types.[] @ GHC.Types.Char))) })))
                           res) }) -}
ad3bb2e7e9629a295c24c1c064dd0a7c
  main107 :: Test.QuickCheck.Property.Property
  {- Unfolding: (Test.QuickCheck.Property.counterexample
                   @ Test.QuickCheck.Property.Property
                   Test.QuickCheck.Property.$fTestableProperty1
                     `cast`
                   ((<Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                 <Test.QuickCheck.Property.Property>_N))
                   Main.main17
                   Main.main108) -}
a0b7011c18c235fbcdc0e10039f874b7
  main108 :: Test.QuickCheck.Property.Property
  {- Unfolding: (Test.QuickCheck.Property.counterexample_$scounterexample
                   Main.main109
                   GHC.Types.True) -}
5c7450ec0797e4f29a4907977d7e10ea
  main109 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   GHC.Show.$fShowMaybe4
                   Main.main110) -}
03ea5906f3506cf43e8c57120583e7ea
  main11 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ Test.QuickCheck.Property.Property
                   Test.QuickCheck.Property.$fTestableProperty1
                     `cast`
                   ((<Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                 <Test.QuickCheck.Property.Property>_N))
                   Main.main12) -}
ef0fc5012f45ece86d1face0f01622c9
  main110 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Test.QuickCheck.Property.=/=3
                   GHC.Show.$fShowMaybe4) -}
3725c38972c5436faf113b8bb6a03d9d
  main111 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main112) -}
16aefef7d630ee664c96859cb9921fc7
  main112 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=P= IStack Manipulations `drop`"#) -}
03b0a61a7099c18347f6f6bf1ef00864
  main113 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.main116
                   Main.main114) -}
327d64626b3dd960c03f9c145dbfb827
  main114 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Main.ArbIStack -> Test.QuickCheck.Property.Property)
                   Main.$s$fTestable->16
                     `cast`
                   ((<Main.ArbIStack -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.ArbIStack
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.main115) -}
1c420b5e5db6b84b82badf2d22751019
  main115 :: Main.ArbIStack -> Test.QuickCheck.Property.Property
  {- Arity: 1, Strictness: <S,U> -}
047bd374c1cef6e1ba752e2031a2f11e
  main116 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main117) -}
120c3f395844a68331dd39ce1317c73b
  main117 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=P= IStack Manipulations `swap`"#) -}
f6d8467d9dabac0bc2974261d66db559
  main118 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.main121
                   Main.main119) -}
989c18adb4df82cc1b29b7d05fbdab56
  main119 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Main.ArbIStack -> Test.QuickCheck.Property.Property)
                   Main.$s$fTestable->16
                     `cast`
                   ((<Main.ArbIStack -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.ArbIStack
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.main120) -}
2fc6fb4b63c43e6f10417b951e3ddf88
  main12 :: Test.QuickCheck.Property.Property
  {- Unfolding: (Test.QuickCheck.Property.within
                   @ (Main.FactorialCode -> Test.QuickCheck.Property.Property)
                   Main.$s$fTestable->2
                     `cast`
                   ((<Main.FactorialCode -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.FactorialCode
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.main20
                   Main.main13) -}
0605e0abd846b2e4080b731a62aff6e7
  main120 :: Main.ArbIStack -> Test.QuickCheck.Property.Property
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Main.ArbIStack) ->
                 case ds `cast` (Main.N:ArbIStack[0]) of wild {
                   [] -> Main.main107
                   : i ds1
                   -> Test.QuickCheck.Property.counterexample
                        @ Test.QuickCheck.Property.Property
                        Test.QuickCheck.Property.$fTestableProperty1
                          `cast`
                        ((<Test.QuickCheck.Property.Property>_R
                          ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                        <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                      <Test.QuickCheck.Property.Property>_N))
                        Main.main17
                        (let {
                           y :: [GHC.Integer.Type.Integer]
                           = GHC.Types.: @ GHC.Integer.Type.Integer i wild
                         } in
                         let {
                           res :: GHC.Types.Bool
                           = GHC.Classes.$fEq[]_$c==
                               @ GHC.Integer.Type.Integer
                               GHC.Integer.Type.$fEqInteger
                               y
                               y
                         } in
                         Test.QuickCheck.Property.counterexample_$scounterexample
                           (GHC.Base.++
                              @ GHC.Types.Char
                              GHC.Show.$fShowMaybe1
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Show.$fShowInteger_$cshowList
                                    y
                                    (GHC.Types.[] @ GHC.Types.Char))
                                 (case res of wild1 {
                                    GHC.Types.False
                                    -> GHC.Base.++
                                         @ GHC.Types.Char
                                         Test.QuickCheck.Property.=/=1
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            GHC.Show.$fShowMaybe1
                                            (GHC.Show.$fShowInteger_$cshowList
                                               y
                                               (GHC.Types.[] @ GHC.Types.Char)))
                                    GHC.Types.True
                                    -> GHC.Base.++
                                         @ GHC.Types.Char
                                         Test.QuickCheck.Property.=/=3
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            GHC.Show.$fShowMaybe1
                                            (GHC.Show.$fShowInteger_$cshowList
                                               y
                                               (GHC.Types.[] @ GHC.Types.Char))) })))
                           res) }) -}
0e320bbcfdfc03bc821097fb91932165
  main121 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main122) -}
cb468d00e3ed1f53ac579e7eb462b0b3
  main122 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=P= IStack Manipulations `dup`"#) -}
2a81e63b01d448c9c64523194f806a89
  main123 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.main126
                   Main.main124) -}
9d54674298c8afb6a790b34a93b12931
  main124 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Main.CompOp
                      -> Main.GEQ3IStack -> Test.QuickCheck.Property.Property)
                   Main.$s$fTestable->17
                     `cast`
                   ((<Main.CompOp
                      -> Main.GEQ3IStack -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.CompOp
                                                                                                                                     -> Main.GEQ3IStack
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.main125) -}
7dcd277682acc75a233837e6d6586895
  main125 ::
    Main.CompOp -> Main.GEQ3IStack -> Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <S,1*U(U,1*C1(C1(U)))><S,1*U> -}
aba283f5cc27e8c27a0cd87cb9f0674b
  main126 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main127) -}
929b6f1491a9fb9bfaf2d10f011f5ebd
  main127 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=P= Lookup Comparison Operators"#) -}
90e3f3fe91c4f3d7834bfd66fbe3be88
  main128 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.main131
                   Main.main129) -}
e762d4344c0927e3b79f9bb8d8ea1774
  main129 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Main.ArithOp
                      -> Main.GEQ3IStack -> Test.QuickCheck.Property.Property)
                   Main.$s$fTestable->11
                     `cast`
                   ((<Main.ArithOp
                      -> Main.GEQ3IStack -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.ArithOp
                                                                                                                                     -> Main.GEQ3IStack
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.main130) -}
0244bace184169da638da1b112a89827
  main13 :: Main.FactorialCode -> Test.QuickCheck.Property.Property
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Main.FactorialCode) ->
                 case ds `cast` (Main.N:FactorialCode[0]) of wild {
                   [] -> Main.main19
                   : i ds1
                   -> Test.QuickCheck.Property.counterexample
                        @ Test.QuickCheck.Property.Property
                        Test.QuickCheck.Property.$fTestableProperty1
                          `cast`
                        ((<Test.QuickCheck.Property.Property>_R
                          ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                        <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                      <Test.QuickCheck.Property.Property>_N))
                        Main.main17
                        (let {
                           x :: Lib.IStack
                           = case Lib.$weval
                                    wild
                                    (GHC.Types.[] @ GHC.Integer.Type.Integer)
                                    Lib.initialDictionary
                                    (GHC.Types.[] @ GHC.Base.String) of ww4 { (#,,#) ww5 ww6 ww7 ->
                             ww5 }
                         } in
                         let {
                           y :: GHC.Integer.Type.Integer
                           = case Text.Read.readEither8
                                    @ GHC.Integer.Type.Integer
                                    (Text.ParserCombinators.ReadP.run
                                       @ GHC.Integer.Type.Integer
                                       Main.main16
                                       i) of wild1 {
                               [] -> Main.main15
                               : x1 ds2
                               -> case ds2 of wild2 {
                                    [] -> Main.main_fact x1 : ipv ipv1 -> Main.main14 } }
                         } in
                         let {
                           y1 :: Lib.IStack
                           = GHC.Types.:
                               @ GHC.Integer.Type.Integer
                               y
                               (GHC.Types.[] @ GHC.Integer.Type.Integer)
                         } in
                         let {
                           res :: GHC.Types.Bool
                           = GHC.Classes.$fEq[]_$c==
                               @ GHC.Integer.Type.Integer
                               GHC.Integer.Type.$fEqInteger
                               x
                               y1
                         } in
                         Test.QuickCheck.Property.counterexample_$scounterexample
                           (GHC.Base.++
                              @ GHC.Types.Char
                              (GHC.Show.$fShowInteger_$cshowList
                                 x
                                 (GHC.Types.[] @ GHC.Types.Char))
                              (case res of wild1 {
                                 GHC.Types.False
                                 -> GHC.Base.++
                                      @ GHC.Types.Char
                                      Test.QuickCheck.Property.=/=1
                                      (GHC.Show.$fShowInteger_$cshowList
                                         y1
                                         (GHC.Types.[] @ GHC.Types.Char))
                                 GHC.Types.True
                                 -> GHC.Base.++
                                      @ GHC.Types.Char
                                      Test.QuickCheck.Property.=/=3
                                      (GHC.Show.$fShowInteger_$cshowList
                                         y1
                                         (GHC.Types.[] @ GHC.Types.Char)) }))
                           res) }) -}
af3f7b2180ea018f920ce7b8ef0df885
  main130 ::
    Main.ArithOp
    -> Main.GEQ3IStack -> Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <S,1*U(U,1*C1(C1(U)))><L,U> -}
d9fcd18cae8e4c1465e9579e45c940a2
  main131 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main132) -}
5cf37a3b39e44f4ef9cd9a8567d2118f
  main132 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=P= Lookup Arithmetic Operators"#) -}
88b9ca2ee80152061a4866dea3ff084a
  main133 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main134) -}
6cc17d1c11020722474bd3ffa68c0c25
  main134 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("=G= Dictionary for primitive operators"#) -}
5b7d8e5bd9e1561491c9154ff0e4847d
  main135 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.main142
                   Main.main136) -}
c2401367ca9d3a575d7fc0a126c60672
  main136 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.main137
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
b20849c084d5606c9dae23786d01a1fe
  main137 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.main140
                   Main.main138) -}
5159cf1fdaa37f1021ab657f58c827f8
  main138 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Main.CompOp
                      -> Main.ArbIStack -> Test.QuickCheck.Property.Property)
                   Main.$s$fTestable->15
                     `cast`
                   ((<Main.CompOp
                      -> Main.ArbIStack -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.CompOp
                                                                                                                                     -> Main.ArbIStack
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.main139) -}
37cb2e298d9aec0393ad20e14abea64c
  main139 ::
    Main.CompOp -> Main.ArbIStack -> Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <S,1*U(A,C(C1(U)))><S,U> -}
989266474dfc4b7b13caef81eada9da8
  main14 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
6c9fe23a84d8765ad98aabfa62b44aa0
  main140 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main141) -}
9b2e28ac47571f1e4f6f1717204649e5
  main141 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=P= Lift Comparison"#) -}
0ea2cb61a6441f8a7143d75ca012f505
  main142 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main143) -}
bd51c3738a820fd91bc2f6cc68e3770c
  main143 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=G= Lifter Functions"#) -}
c9e7ebc394e20dd59c97a17d375e06ae
  main144 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
4d3e227465a3722b7d16735ad5048974
  main15 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
3159336b94378132ce646f334f528333
  main16 :: Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
  {- Unfolding: (GHC.Read.$fReadInteger_$sreadNumber
                   GHC.Read.$fReadInteger2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Integer.Type.Integer
                   (Text.Read.readEither7 @ GHC.Integer.Type.Integer)) -}
b8ad63ebfac7e6278090c62d5186d1ea
  main17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main18) -}
6ab9ec61c6ed680f9223b44b279b27c0
  main18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IStack does not match:"#) -}
cd6a2334803273bdd1c59998e2bc72ff
  main19 :: Test.QuickCheck.Property.Property
  {- Strictness: x -}
432eb00bdb2b4b58a1a78b281841e6ac
  main2 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.main135
                   Main.main3) -}
6266825047c1ebf4948ef00b2a7909f8
  main20 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2000#) -}
b522b7cd6cfd9d67318fc9c2b01551cf
  main21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main22) -}
c199247016478e298da5a705c5fcaa0a
  main22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=P= Factorial"#) -}
c75c5102ff37d18c6d71851e39dfbce7
  main23 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.main27
                   Main.main24) -}
28da46a1bd8c0b0090f64dd3868e835b
  main24 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Main.MaxCode -> Test.QuickCheck.Property.Property)
                   Main.$s$fTestable->1
                     `cast`
                   ((<Main.MaxCode -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.MaxCode
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.main25) -}
7b950abe6c9a79d0afd9e8b66b5c8357
  main25 :: Main.MaxCode -> Test.QuickCheck.Property.Property
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Main.MaxCode) ->
                 case ds `cast` (Main.N:MaxCode[0]) of wild {
                   [] -> Main.main26
                   : n ds1
                   -> case ds1 of wild1 {
                        [] -> Main.main26
                        : m ds2
                        -> Test.QuickCheck.Property.counterexample
                             @ Test.QuickCheck.Property.Property
                             Test.QuickCheck.Property.$fTestableProperty1
                               `cast`
                             ((<Test.QuickCheck.Property.Property>_R
                               ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                             <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                           <Test.QuickCheck.Property.Property>_N))
                             Main.main17
                             (let {
                                x :: Lib.IStack
                                = case Lib.$weval
                                         wild
                                         (GHC.Types.[] @ GHC.Integer.Type.Integer)
                                         Lib.initialDictionary
                                         (GHC.Types.[]
                                            @ GHC.Base.String) of ww4 { (#,,#) ww5 ww6 ww7 ->
                                  ww5 }
                              } in
                              let {
                                y :: GHC.Integer.Type.Integer
                                = case Text.Read.readEither8
                                         @ GHC.Integer.Type.Integer
                                         (Text.ParserCombinators.ReadP.run
                                            @ GHC.Integer.Type.Integer
                                            Main.main16
                                            n) of wild2 {
                                    [] -> Main.main15
                                    : x1 ds3
                                    -> case ds3 of wild3 {
                                         []
                                         -> case Text.Read.readEither8
                                                   @ GHC.Integer.Type.Integer
                                                   (Text.ParserCombinators.ReadP.run
                                                      @ GHC.Integer.Type.Integer
                                                      Main.main16
                                                      m) of wild4 {
                                              [] -> Main.main15
                                              : x2 ds4
                                              -> case ds4 of wild5 {
                                                   []
                                                   -> case GHC.Integer.Type.leInteger#
                                                             x2
                                                             x1 of wild6 {
                                                        DEFAULT -> x2 1# -> x1 }
                                                   : ipv ipv1 -> Main.main14 } }
                                         : ipv ipv1 -> Main.main14 } }
                              } in
                              let {
                                y1 :: Lib.IStack
                                = GHC.Types.:
                                    @ GHC.Integer.Type.Integer
                                    y
                                    (GHC.Types.[] @ GHC.Integer.Type.Integer)
                              } in
                              let {
                                res :: GHC.Types.Bool
                                = GHC.Classes.$fEq[]_$c==
                                    @ GHC.Integer.Type.Integer
                                    GHC.Integer.Type.$fEqInteger
                                    x
                                    y1
                              } in
                              Test.QuickCheck.Property.counterexample_$scounterexample
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   (GHC.Show.$fShowInteger_$cshowList
                                      x
                                      (GHC.Types.[] @ GHC.Types.Char))
                                   (case res of wild2 {
                                      GHC.Types.False
                                      -> GHC.Base.++
                                           @ GHC.Types.Char
                                           Test.QuickCheck.Property.=/=1
                                           (GHC.Show.$fShowInteger_$cshowList
                                              y1
                                              (GHC.Types.[] @ GHC.Types.Char))
                                      GHC.Types.True
                                      -> GHC.Base.++
                                           @ GHC.Types.Char
                                           Test.QuickCheck.Property.=/=3
                                           (GHC.Show.$fShowInteger_$cshowList
                                              y1
                                              (GHC.Types.[] @ GHC.Types.Char)) }))
                                res) } }) -}
20800f894e2d3009e88767bc084c81c9
  main26 :: Test.QuickCheck.Property.Property
  {- Strictness: x -}
292db734c7e8be1cd90e0b06f5a8d823
  main27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main28) -}
96cdf6817d75be821a36846f53cb87d1
  main28 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=P= Max"#) -}
c3aca7c5f860463e4cf1feccc60a70b3
  main29 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.main41
                   Main.main30) -}
eda3757d8c81d4f008626d907d05ff19
  main3 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.main71
                   Main.main4) -}
a760f2fadfa2197b87d721a7f58cc7a5
  main30 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Main.ArbSafePrimCode -> Test.QuickCheck.Property.Property)
                   Main.main40
                     `cast`
                   ((<Main.ArbSafePrimCode -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.ArbSafePrimCode
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.main31) -}
c989b76baeb8bea7fea74bb15919197f
  main31 :: Main.ArbSafePrimCode -> Test.QuickCheck.Property.Property
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (ds :: Main.ArbSafePrimCode) ->
                 case Lib.compile
                        (GHC.Base.++
                           @ [GHC.Types.Char]
                           ds `cast` (Main.N:ArbSafePrimCode[0])
                           Main.main37)
                        Lib.initialDictionary
                        Main.main35 of wild {
                   Data.Either.Left msg
                   -> Test.QuickCheck.Property.counterexample
                        @ Test.QuickCheck.Property.Property
                        Test.QuickCheck.Property.$fTestableProperty1
                          `cast`
                        ((<Test.QuickCheck.Property.Property>_R
                          ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                        <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                      <Test.QuickCheck.Property.Property>_N))
                        msg
                        Main.main33
                          `cast`
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))
                   Data.Either.Right ds1
                   -> case ds1 of wild1 { (,) ds2 k ->
                      case ds2 of wild2 {
                        []
                        -> Test.QuickCheck.Property.counterexample
                             @ Test.QuickCheck.Property.Property
                             Test.QuickCheck.Property.$fTestableProperty1
                               `cast`
                             ((<Test.QuickCheck.Property.Property>_R
                               ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                             <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                           <Test.QuickCheck.Property.Property>_N))
                             Main.main17
                             (let {
                                x :: Lib.IStack
                                = case k Main.emptyForthState of wild3 { (,,) istack' ds3 ds4 ->
                                  istack' }
                              } in
                              let {
                                y :: Lib.IStack
                                = case Lib.$weval
                                         ds `cast` (Main.N:ArbSafePrimCode[0])
                                         (GHC.Types.[] @ GHC.Integer.Type.Integer)
                                         Lib.initialDictionary
                                         (GHC.Types.[]
                                            @ GHC.Base.String) of ww4 { (#,,#) ww5 ww6 ww7 ->
                                  ww5 }
                              } in
                              let {
                                res :: GHC.Types.Bool
                                = GHC.Classes.$fEq[]_$c==
                                    @ GHC.Integer.Type.Integer
                                    GHC.Integer.Type.$fEqInteger
                                    x
                                    y
                              } in
                              Test.QuickCheck.Property.counterexample_$scounterexample
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   (GHC.Show.$fShowInteger_$cshowList
                                      x
                                      (GHC.Types.[] @ GHC.Types.Char))
                                   (case res of wild3 {
                                      GHC.Types.False
                                      -> GHC.Base.++
                                           @ GHC.Types.Char
                                           Test.QuickCheck.Property.=/=1
                                           (GHC.Show.$fShowInteger_$cshowList
                                              y
                                              (GHC.Types.[] @ GHC.Types.Char))
                                      GHC.Types.True
                                      -> GHC.Base.++
                                           @ GHC.Types.Char
                                           Test.QuickCheck.Property.=/=3
                                           (GHC.Show.$fShowInteger_$cshowList
                                              y
                                              (GHC.Types.[] @ GHC.Types.Char)) }))
                                res)
                        : ipv ipv1 -> Main.main32 } } }) -}
ac9686ae882eb2901b5ca5240074f7c6
  main32 :: Test.QuickCheck.Property.Property
  {- Strictness: x -}
cd13623d647aa5015bc7700e22ad2636
  main33 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <L,A><L,A>,
     Unfolding: (\ (ds :: Test.QuickCheck.Random.QCGen)
                   (ds1 :: GHC.Types.Int) ->
                 Main.main_x1) -}
7e6ef64b6cd6ef560a284f790989c6fa
  main34 ::
    Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Strictness: m1,
     Unfolding: (Test.QuickCheck.Property.MkRose
                   @ Test.QuickCheck.Property.Result
                   Test.QuickCheck.Property.counterexample1
                   (GHC.Types.[]
                      @ (Test.QuickCheck.Property.Rose
                           Test.QuickCheck.Property.Result))) -}
affe0e4858e326aab31542a23cd3dafc
  main35 :: [(GHC.Base.String, Lib.Transition)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Lib.Transition)
                   Main.main36
                   (GHC.Types.[] @ (GHC.Base.String, Lib.Transition))) -}
bfb2c96206e1f0eb3ad44d0aaf877604
  main36 :: ([GHC.Types.Char], Lib.ForthState -> Lib.ForthState)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.[] @ GHC.Types.Char,
                  GHC.Base.id @ Lib.ForthState)) -}
49a73241fefadc37a1551ff5bc6be8b4
  main37 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.main38
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
da8a215720b42cfec2cbfce042379896
  main38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main39) -}
0ca6cdf4771400068957f781e1e4efa6
  main39 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (";"#) -}
e7c1dea93971fa65ee2db9a2bf1299e2
  main4 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.main45
                   Main.main5) -}
e1670cd41ccee8061bff559523f5cff0
  main40 ::
    (Main.ArbSafePrimCode -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.ArbSafePrimCode -> Test.QuickCheck.Property.Property)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable2 w ww1 ww2 ww3 ww4 w2 }) -}
79c9902655ffc8b53adcbdd4d2a189ef
  main41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main42) -}
42c030787930edb0238c5d2dcaf66d2f
  main42 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=P= `eval` matches `compile`"#) -}
3888aa25345e5e7212bfa6f24cd33a62
  main43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main44) -}
d48b71f2d99f8323b3dd27f56c5c39a4
  main44 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=G= Evaluator"#) -}
caeafe7bc22ebb31948ad99d4215b741
  main45 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.main69
                   Main.main46) -}
6426fcf98b277b182eedf5f8921cbca0
  main46 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.main63
                   Main.main47) -}
71b94d4799e39a7cea26eb14fb711cfd
  main47 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.main56
                   Main.main48) -}
4276e4200e955c6f20d8a68683fcac9e
  main48 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.main49
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
5471e88c63ba11b12f8a2be8774d7888
  main49 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.main54
                   Main.main50) -}
03090c047284f4386d8ada318218f0c3
  main5 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.main6
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
3a3a95960e96803f1f7e7d90d23f9814
  main50 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ Test.QuickCheck.Property.Property
                   Test.QuickCheck.Property.$fTestableProperty1
                     `cast`
                   ((<Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                 <Test.QuickCheck.Property.Property>_N))
                   Main.main51) -}
8836b8c7846be9d51f8deab443d03a14
  main51 :: Test.QuickCheck.Property.Property
  {- Unfolding: (Test.QuickCheck.Property.within
                   @ (Main.ArbBooleanIStack
                      -> Main.ArbStructuredLoopCode -> Test.QuickCheck.Property.Property)
                   Main.main53
                     `cast`
                   ((<Main.ArbBooleanIStack
                      -> Main.ArbStructuredLoopCode
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.ArbBooleanIStack
                                                                                                                                     -> Main.ArbStructuredLoopCode
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.main20
                   Main.main52) -}
b6eb39a5bb09dd1dbb16ca4448566dec
  main52 ::
    Main.ArbBooleanIStack
    -> Main.ArbStructuredLoopCode -> Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
017a2361f8cd7423debcccc906fb3040
  main53 ::
    (Main.ArbBooleanIStack
     -> Main.ArbStructuredLoopCode -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (w3 :: Main.ArbBooleanIStack
                          -> Main.ArbStructuredLoopCode
                          -> Test.QuickCheck.Property.Property)[OneShot]
                   (w4 :: Test.QuickCheck.Random.QCGen)
                   (w5 :: GHC.Types.Int)[OneShot] ->
                 case w4
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.ArbBooleanIStack
                   @ (Main.ArbStructuredLoopCode -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryArbBooleanIStack
                   Main.$fShowArbBooleanIStack
                   Main.$s$fTestable->3
                     `cast`
                   ((<Main.ArbStructuredLoopCode
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.ArbStructuredLoopCode
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w3
                   ww1
                   ww2
                   ww3
                   ww4
                   w5 }) -}
749e34287ab06d5db4a2821948772e72
  main54 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main55) -}
ecc36f420b4a3501a0e59ec65cf800d3
  main55 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=P= Indefinite Loops"#) -}
cede140061a221a24da7d23ec090d3fa
  main56 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.main61
                   Main.main57) -}
93184adfc1d1ce9ef65667d2dc289a7d
  main57 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Main.ArbBooleanIStack
                      -> Main.ArbStructuredITECode -> Test.QuickCheck.Property.Property)
                   Main.main60
                     `cast`
                   ((<Main.ArbBooleanIStack
                      -> Main.ArbStructuredITECode
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.ArbBooleanIStack
                                                                                                                                     -> Main.ArbStructuredITECode
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.main58) -}
a7274e33ca9396271f22b07c7e5a096d
  main58 ::
    Main.ArbBooleanIStack
    -> Main.ArbStructuredITECode -> Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (ds :: Main.ArbBooleanIStack)
                   (ds1 :: Main.ArbStructuredITECode) ->
                 case Lib.compile
                        (GHC.Base.++
                           @ [GHC.Types.Char]
                           ds1 `cast` (Main.N:ArbStructuredITECode[0])
                           Main.main37)
                        Lib.initialDictionary
                        Main.main35 of wild {
                   Data.Either.Left msg
                   -> Test.QuickCheck.Property.counterexample
                        @ Test.QuickCheck.Property.Property
                        Test.QuickCheck.Property.$fTestableProperty1
                          `cast`
                        ((<Test.QuickCheck.Property.Property>_R
                          ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                        <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                      <Test.QuickCheck.Property.Property>_N))
                        msg
                        Main.main33
                          `cast`
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))
                   Data.Either.Right ds2
                   -> case ds2 of wild1 { (,) ds3 k ->
                      case ds3 of wild2 {
                        []
                        -> Test.QuickCheck.Property.counterexample
                             @ Test.QuickCheck.Property.Property
                             Test.QuickCheck.Property.$fTestableProperty1
                               `cast`
                             ((<Test.QuickCheck.Property.Property>_R
                               ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                             <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                           <Test.QuickCheck.Property.Property>_N))
                             Main.main17
                             (let {
                                x :: Lib.IStack
                                = case k (ds `cast` (Main.N:ArbBooleanIStack[0]),
                                          Lib.initialDictionary,
                                          GHC.Types.[]
                                            @ GHC.Base.String) of wild3 { (,,) istack' ds4 ds5 ->
                                  istack' }
                              } in
                              let {
                                res :: GHC.Types.Bool
                                = GHC.Classes.$fEq[]_$c==
                                    @ GHC.Integer.Type.Integer
                                    GHC.Integer.Type.$fEqInteger
                                    x
                                    ds `cast` (Main.N:ArbBooleanIStack[0])
                              } in
                              Test.QuickCheck.Property.counterexample_$scounterexample
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   (GHC.Show.$fShowInteger_$cshowList
                                      x
                                      (GHC.Types.[] @ GHC.Types.Char))
                                   (case res of wild3 {
                                      GHC.Types.False
                                      -> GHC.Base.++
                                           @ GHC.Types.Char
                                           Test.QuickCheck.Property.=/=1
                                           (GHC.Show.$fShowInteger_$cshowList
                                              ds `cast` (Main.N:ArbBooleanIStack[0])
                                              (GHC.Types.[] @ GHC.Types.Char))
                                      GHC.Types.True
                                      -> GHC.Base.++
                                           @ GHC.Types.Char
                                           Test.QuickCheck.Property.=/=3
                                           (GHC.Show.$fShowInteger_$cshowList
                                              ds `cast` (Main.N:ArbBooleanIStack[0])
                                              (GHC.Types.[] @ GHC.Types.Char)) }))
                                res)
                        : ipv ipv1 -> Main.main59 } } }) -}
3ea4cf386bc45251336103162f43c8ff
  main59 :: Test.QuickCheck.Property.Property
  {- Strictness: x -}
ea679e1a505c248b6fed6b3218e4d5fa
  main6 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.main43
                   Main.main7) -}
715116a9b1bf12bade48f9615653d926
  main60 ::
    (Main.ArbBooleanIStack
     -> Main.ArbStructuredITECode -> Test.QuickCheck.Property.Property)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (w3 :: Main.ArbBooleanIStack
                          -> Main.ArbStructuredITECode -> Test.QuickCheck.Property.Property)
                   (w4 :: Test.QuickCheck.Random.QCGen)
                   (w5 :: GHC.Types.Int) ->
                 case w4
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ Main.ArbBooleanIStack
                   @ (Main.ArbStructuredITECode -> Test.QuickCheck.Property.Property)
                   Main.$fArbitraryArbBooleanIStack
                   Main.$fShowArbBooleanIStack
                   Main.$s$fTestable->4
                     `cast`
                   ((<Main.ArbStructuredITECode
                      -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.ArbStructuredITECode
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   w3
                   ww1
                   ww2
                   ww3
                   ww4
                   w5 }) -}
5086cdf17974fd72dad025c8486d13ff
  main61 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main62) -}
bdfae9c34950a0750b56e1dafc8d40e7
  main62 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=P= Conditionals"#) -}
cd4388979a2333a718f794ff8d4fa2ea
  main63 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.main67
                   Main.main64) -}
5a28766f38f5cbea9e6f707f8100cb22
  main64 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Main.ArbSafePrimCode -> Test.QuickCheck.Property.Property)
                   Main.main40
                     `cast`
                   ((<Main.ArbSafePrimCode -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.ArbSafePrimCode
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.main65) -}
3ef8177f088648b86d36b065e8bdfed0
  main65 :: Main.ArbSafePrimCode -> Test.QuickCheck.Property.Property
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (ds :: Main.ArbSafePrimCode) ->
                 case Lib.compile
                        (GHC.Base.++
                           @ [GHC.Types.Char]
                           ds `cast` (Main.N:ArbSafePrimCode[0])
                           Main.main37)
                        Lib.initialDictionary
                        Main.main35 of wild {
                   Data.Either.Left msg
                   -> Test.QuickCheck.Property.counterexample
                        @ Test.QuickCheck.Property.Property
                        Test.QuickCheck.Property.$fTestableProperty1
                          `cast`
                        ((<Test.QuickCheck.Property.Property>_R
                          ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                        <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                      <Test.QuickCheck.Property.Property>_N))
                        msg
                        Main.main33
                          `cast`
                        (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                  (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))
                   Data.Either.Right ds1
                   -> case ds1 of wild1 { (,) ds2 k ->
                      case ds2 of wild2 {
                        []
                        -> Test.QuickCheck.Property.counterexample
                             @ Test.QuickCheck.Property.Property
                             Test.QuickCheck.Property.$fTestableProperty1
                               `cast`
                             ((<Test.QuickCheck.Property.Property>_R
                               ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                             <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                           <Test.QuickCheck.Property.Property>_N))
                             Main.main17
                             (let {
                                x :: Lib.IStack
                                = case k Main.emptyForthState of wild3 { (,,) istack' ds3 ds4 ->
                                  istack' }
                              } in
                              let {
                                y :: Lib.IStack
                                = Main.main_go
                                    ds `cast` (Main.N:ArbSafePrimCode[0])
                                    (GHC.Types.[] @ GHC.Integer.Type.Integer)
                              } in
                              let {
                                res :: GHC.Types.Bool
                                = GHC.Classes.$fEq[]_$c==
                                    @ GHC.Integer.Type.Integer
                                    GHC.Integer.Type.$fEqInteger
                                    x
                                    y
                              } in
                              Test.QuickCheck.Property.counterexample_$scounterexample
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   (GHC.Show.$fShowInteger_$cshowList
                                      x
                                      (GHC.Types.[] @ GHC.Types.Char))
                                   (case res of wild3 {
                                      GHC.Types.False
                                      -> GHC.Base.++
                                           @ GHC.Types.Char
                                           Test.QuickCheck.Property.=/=1
                                           (GHC.Show.$fShowInteger_$cshowList
                                              y
                                              (GHC.Types.[] @ GHC.Types.Char))
                                      GHC.Types.True
                                      -> GHC.Base.++
                                           @ GHC.Types.Char
                                           Test.QuickCheck.Property.=/=3
                                           (GHC.Show.$fShowInteger_$cshowList
                                              y
                                              (GHC.Types.[] @ GHC.Types.Char)) }))
                                res)
                        : ipv ipv1 -> Main.main66 } } }) -}
b719eaf81ca94f50a8f341d0d04b37bf
  main66 :: Test.QuickCheck.Property.Property
  {- Strictness: x -}
76f704c0853b96aa434eafcde2c1eb5f
  main67 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main68) -}
e042ae9bf7ad0c7472a5eb20f17ab8ef
  main68 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=P= Primitive operators"#) -}
7b6a63dbef325b7b2d055e739240c4c0
  main69 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main70) -}
79e80439011ef57b5c1530a24c95d56d
  main7 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.main29
                   Main.main8) -}
94f5c2d5754ec11ffd841539d57306fd
  main70 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=G= Compiler"#) -}
ed634bc1ec990e22cc78eda5cba4800a
  main71 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.main133
                   Main.main72) -}
aa54e18cff367a3ffd740ad4c15999ac
  main72 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.main128
                   Main.main73) -}
4dd3728e73411972aa5672a96067b46e
  main73 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.main123
                   Main.main74) -}
25bb0ceb3f37a74ba126610c2f36c500
  main74 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.main118
                   Main.main75) -}
671d3d31c0fa5e736eb94f209e797d3e
  main75 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.main113
                   Main.main76) -}
7786dc5af92d4a35fce2267eea7a58cc
  main76 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.main104
                   Main.main77) -}
885e70ccc359dd4389914ead68d88ede
  main77 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.main99
                   Main.main78) -}
95e6ab9949be1dca2f3f0e95eabe806e
  main78 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.main91
                   Main.main79) -}
721f68caf77d490f6f03aa46d6cc704b
  main79 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.main86
                   Main.main80) -}
54a52ed9e661c680819c70b2c7f33780
  main8 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.main23
                   Main.main9) -}
4ee0f155a7696048dbae2b378e975061
  main80 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.main81
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
288e3a407d7f12381f1645d7d0d60bb4
  main81 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.main84
                   Main.main82) -}
33c262ced84572eb3ce21facec4e533a
  main82 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Main.ArbIStack -> Test.QuickCheck.Property.Property)
                   Main.$s$fTestable->16
                     `cast`
                   ((<Main.ArbIStack -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.ArbIStack
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.main83) -}
2a6e9b4b83b6a654de51335043c6c7ab
  main83 :: Main.ArbIStack -> Test.QuickCheck.Property.Property
  {- Arity: 1, Strictness: <L,U> -}
24335a2a6cc021158989f571242e93a3
  main84 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main85) -}
452531a85755966d3d52d8de671768ec
  main85 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=P= Lookup `.S` Operator"#) -}
fc3d3d35fa43472253652e4e5464e21f
  main86 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.main89
                   Main.main87) -}
e45c89d69f4555b87821c3bdb647e3da
  main87 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Main.ArbIStack -> Test.QuickCheck.Property.Property)
                   Main.$s$fTestable->16
                     `cast`
                   ((<Main.ArbIStack -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.ArbIStack
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.main88) -}
63ae0f681d2c24bb0c37f58fa36e9ed6
  main88 :: Main.ArbIStack -> Test.QuickCheck.Property.Property
  {- Arity: 1, Strictness: <L,U> -}
5ab1f8d490353259c787673969e0027a
  main89 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main90) -}
7a1b2d74a6956380d595b22ae7a21700
  main9 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.main10
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
5f30edc2cc8408426256213bc512c6df
  main90 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=P= Printing IStack `.S`"#) -}
948106135d97e4795c1ca1d4a195b5a5
  main91 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.main97
                   Main.main92) -}
f0d1b46ba5b87e6649cf7aa05882e075
  main92 :: Test.Framework.Providers.QuickCheck2.Property
  {- Unfolding: (Test.Framework.Providers.QuickCheck2.Property
                   @ (Main.IStackOp
                      -> Main.GEQ3IStack -> Test.QuickCheck.Property.Property)
                   Main.$s$fTestable->14
                     `cast`
                   ((<Main.IStackOp
                      -> Main.GEQ3IStack -> Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.IStackOp
                                                                                                                                     -> Main.GEQ3IStack
                                                                                                                                     -> Test.QuickCheck.Property.Property>_N))
                   Main.main93) -}
1f07f338305b03cb298ed4b86c63c038
  main93 ::
    Main.IStackOp
    -> Main.GEQ3IStack -> Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <S,1*U(U,1*C1(C1(U)))><L,U>,
     Unfolding: (\ (ds :: Main.IStackOp) (ds1 :: Main.GEQ3IStack) ->
                 case ds `cast` (Main.N:IStackOp[0]) of wild { (,) str prop ->
                 case GHC.List.lookup
                        @ GHC.Base.String
                        @ Lib.Value
                        GHC.Classes.$fEq[]_$s$fEq[]1
                        str
                        Lib.initIStackOp of wild1 {
                   GHC.Maybe.Nothing
                   -> case Text.ParserCombinators.ReadP.run
                             @ GHC.Integer.Type.Integer
                             Lib.dlookup1
                             str of wild2 {
                        [] -> Main.main94
                        : ds2 ds3
                        -> case ds2 of wild3 { (,) i ds4 ->
                           case ds4 of wild4 {
                             [] -> case ds3 of wild5 { DEFAULT -> Main.main94 }
                             : ipv ipv1 -> Main.main94 } } }
                   GHC.Maybe.Just x
                   -> case x of wild2 {
                        DEFAULT -> Main.main94
                        Lib.Prim f
                        -> Test.QuickCheck.Property.counterexample
                             @ Test.QuickCheck.Property.Property
                             Test.QuickCheck.Property.$fTestableProperty1
                               `cast`
                             ((<Test.QuickCheck.Property.Property>_R
                               ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                             <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                           <Test.QuickCheck.Property.Property>_N))
                             Main.main17
                             (prop
                                (case f (ds1 `cast` (Main.N:GEQ3IStack[0]), Lib.initIStackOp,
                                         GHC.Types.[]
                                           @ GHC.Base.String) of wild3 { (,,) istack' ds2 out' ->
                                 istack' })
                                ds1 `cast` (Main.N:GEQ3IStack[0])) } } }) -}
7737b7d66ff223a234e7a7b6da886d86
  main94 :: Test.QuickCheck.Property.Property
  {- Unfolding: (Test.QuickCheck.Property.counterexample
                   @ Test.QuickCheck.Property.Property
                   Test.QuickCheck.Property.$fTestableProperty1
                     `cast`
                   ((<Test.QuickCheck.Property.Property>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                 <Test.QuickCheck.Property.Property>_N))
                   Main.main95
                   Main.main33
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0]))) -}
47c25e114cf02cdef49059926d49ba70
  main95 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main96) -}
88cfdb045d64824ec6ec7e709c5515e4
  main96 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Cannot find operator in dictionary"#) -}
5122c98e75b8d175a4612e30c9ec636a
  main97 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main98) -}
c402653e4046e5f374d3201c89fc6ec6
  main98 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=P= Lookup IStack Manipulations"#) -}
ce1017328455ceffbd54b3ee5263ecb1
  main99 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.QuickCheck2.PropertyTestCount
                   @ Test.Framework.Providers.QuickCheck2.PropertyResult
                   @ Test.Framework.Providers.QuickCheck2.Property
                   Test.Framework.Providers.QuickCheck2.$fTestlikeIntPropertyResultProperty
                   Test.Framework.Providers.QuickCheck2.testProperty1
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Test.Framework.Providers.QuickCheck2.Property>_N)
                   Main.main102
                   Main.main100) -}
74e41cd2313d36cd03e2317191905f58
  main_fact :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,U> -}
10dbb39c295c70dbdf82e95102ddfaf0
  main_go :: [GHC.Base.String] -> Lib.IStack -> Lib.IStack
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
1eb764ef3052eb4bf4bcf113fb2704af
  main_x1 ::
    Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Unfolding: (Test.QuickCheck.Property.onRose
                   @ Test.QuickCheck.Property.Result
                   Test.QuickCheck.Property.$fTestable()1
                   Main.main34) -}
instance Test.QuickCheck.Arbitrary.Arbitrary [Main.ArbBooleanIStack]
  = Main.$fArbitraryArbBooleanIStack
instance Test.QuickCheck.Arbitrary.Arbitrary [Main.ArbIStack]
  = Main.$fArbitraryArbIStack
instance Test.QuickCheck.Arbitrary.Arbitrary [Main.ArbSafePrimCode]
  = Main.$fArbitraryArbSafePrimCode
instance Test.QuickCheck.Arbitrary.Arbitrary [Main.ArbStructuredITECode]
  = Main.$fArbitraryArbStructuredITECode
instance Test.QuickCheck.Arbitrary.Arbitrary [Main.ArbStructuredLoopCode]
  = Main.$fArbitraryArbStructuredLoopCode
instance Test.QuickCheck.Arbitrary.Arbitrary [Main.ArithOp]
  = Main.$fArbitraryArithOp
instance Test.QuickCheck.Arbitrary.Arbitrary [Main.CompOp]
  = Main.$fArbitraryCompOp
instance Test.QuickCheck.Arbitrary.Arbitrary [Main.FactorialCode]
  = Main.$fArbitraryFactorialCode
instance Test.QuickCheck.Arbitrary.Arbitrary [Main.GEQ3IStack]
  = Main.$fArbitraryGEQ3IStack
instance Test.QuickCheck.Arbitrary.Arbitrary [Main.IStackOp]
  = Main.$fArbitraryIStackOp
instance Test.QuickCheck.Arbitrary.Arbitrary [Main.ITE]
  = Main.$fArbitraryITE
instance Test.QuickCheck.Arbitrary.Arbitrary [Main.Loop]
  = Main.$fArbitraryLoop
instance Test.QuickCheck.Arbitrary.Arbitrary [Main.MaxCode]
  = Main.$fArbitraryMaxCode
instance GHC.Show.Show [Main.ArbBooleanIStack]
  = Main.$fShowArbBooleanIStack
instance GHC.Show.Show [Main.ArbIStack] = Main.$fShowArbIStack
instance GHC.Show.Show [Main.ArbSafePrimCode]
  = Main.$fShowArbSafePrimCode
instance GHC.Show.Show [Main.ArbStructuredITECode]
  = Main.$fShowArbStructuredITECode
instance GHC.Show.Show [Main.ArbStructuredLoopCode]
  = Main.$fShowArbStructuredLoopCode
instance GHC.Show.Show [Main.ArithOp] = Main.$fShowArithOp
instance GHC.Show.Show [Main.CompOp] = Main.$fShowCompOp
instance GHC.Show.Show [Main.FactorialCode]
  = Main.$fShowFactorialCode
instance GHC.Show.Show [Main.GEQ3IStack] = Main.$fShowGEQ3IStack
instance GHC.Show.Show [Main.IStackOp] = Main.$fShowIStackOp
instance GHC.Show.Show [Main.MaxCode] = Main.$fShowMaxCode
"SPEC/Main $fArbitrarySet2 @ Integer" [orphan] [2] forall (w :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                  GHC.Integer.Type.Integer)
  Test.QuickCheck.Arbitrary.$fArbitrarySet2 @ GHC.Integer.Type.Integer
                                            w
  = Main.$fArbitraryArbIStack_$s$fArbitrarySet2
"SPEC/Main $fTestable->1 @ ArbStructuredITECode @ Property" [2] forall (w2 :: Test.QuickCheck.Property.Testable
                                                                                Test.QuickCheck.Property.Property)
                                                                       (w1 :: GHC.Show.Show
                                                                                Main.ArbStructuredITECode)
                                                                       (w :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                               Main.ArbStructuredITECode)
  Test.QuickCheck.Property.$fTestable->1 @ Main.ArbStructuredITECode
                                         @ Test.QuickCheck.Property.Property
                                         w
                                         w1
                                         w2
  = Main.$s$fTestable->4
"SPEC/Main $fTestable->1 @ ArbStructuredLoopCode @ Property" [2] forall (w2 :: Test.QuickCheck.Property.Testable
                                                                                 Test.QuickCheck.Property.Property)
                                                                        (w1 :: GHC.Show.Show
                                                                                 Main.ArbStructuredLoopCode)
                                                                        (w :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                Main.ArbStructuredLoopCode)
  Test.QuickCheck.Property.$fTestable->1 @ Main.ArbStructuredLoopCode
                                         @ Test.QuickCheck.Property.Property
                                         w
                                         w1
                                         w2
  = Main.$s$fTestable->3
"SPEC/Main $fTestable->1 @ ArithOp @ (GEQ3IStack -> Property)" [2] forall (w2 :: Test.QuickCheck.Property.Testable
                                                                                   (Main.GEQ3IStack
                                                                                    -> Test.QuickCheck.Property.Property))
                                                                          (w1 :: GHC.Show.Show
                                                                                   Main.ArithOp)
                                                                          (w :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                  Main.ArithOp)
  Test.QuickCheck.Property.$fTestable->1 @ Main.ArithOp
                                         @ (Main.GEQ3IStack -> Test.QuickCheck.Property.Property)
                                         w
                                         w1
                                         w2
  = Main.$s$fTestable->11
"SPEC/Main $fTestable->1 @ CompOp @ (ArbIStack -> Property)" [2] forall (w2 :: Test.QuickCheck.Property.Testable
                                                                                 (Main.ArbIStack
                                                                                  -> Test.QuickCheck.Property.Property))
                                                                        (w1 :: GHC.Show.Show
                                                                                 Main.CompOp)
                                                                        (w :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                Main.CompOp)
  Test.QuickCheck.Property.$fTestable->1 @ Main.CompOp
                                         @ (Main.ArbIStack -> Test.QuickCheck.Property.Property)
                                         w
                                         w1
                                         w2
  = Main.$s$fTestable->15
"SPEC/Main $fTestable->1 @ CompOp @ (GEQ3IStack -> Property)" [2] forall (w2 :: Test.QuickCheck.Property.Testable
                                                                                  (Main.GEQ3IStack
                                                                                   -> Test.QuickCheck.Property.Property))
                                                                         (w1 :: GHC.Show.Show
                                                                                  Main.CompOp)
                                                                         (w :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                 Main.CompOp)
  Test.QuickCheck.Property.$fTestable->1 @ Main.CompOp
                                         @ (Main.GEQ3IStack -> Test.QuickCheck.Property.Property)
                                         w
                                         w1
                                         w2
  = Main.$s$fTestable->17
"SPEC/Main $fTestable->1 @ FactorialCode @ Property" [2] forall (w2 :: Test.QuickCheck.Property.Testable
                                                                         Test.QuickCheck.Property.Property)
                                                                (w1 :: GHC.Show.Show
                                                                         Main.FactorialCode)
                                                                (w :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                        Main.FactorialCode)
  Test.QuickCheck.Property.$fTestable->1 @ Main.FactorialCode
                                         @ Test.QuickCheck.Property.Property
                                         w
                                         w1
                                         w2
  = Main.$s$fTestable->2
"SPEC/Main $fTestable->1 @ IStackOp @ (GEQ3IStack -> Property)" [2] forall (w2 :: Test.QuickCheck.Property.Testable
                                                                                    (Main.GEQ3IStack
                                                                                     -> Test.QuickCheck.Property.Property))
                                                                           (w1 :: GHC.Show.Show
                                                                                    Main.IStackOp)
                                                                           (w :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                   Main.IStackOp)
  Test.QuickCheck.Property.$fTestable->1 @ Main.IStackOp
                                         @ (Main.GEQ3IStack -> Test.QuickCheck.Property.Property)
                                         w
                                         w1
                                         w2
  = Main.$s$fTestable->14
"SPEC/Main $fTestable->1 @ MaxCode @ Property" [2] forall (w2 :: Test.QuickCheck.Property.Testable
                                                                   Test.QuickCheck.Property.Property)
                                                          (w1 :: GHC.Show.Show Main.MaxCode)
                                                          (w :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                  Main.MaxCode)
  Test.QuickCheck.Property.$fTestable->1 @ Main.MaxCode
                                         @ Test.QuickCheck.Property.Property
                                         w
                                         w1
                                         w2
  = Main.$s$fTestable->1
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

